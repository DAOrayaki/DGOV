{"version":3,"sources":["logic/contracts.ts","utils/markets.ts","logic/ConditionalTokens/index.ts","logic/ConditionalTokens/ConditionalTokensRepo.ts","logic/MarketMakers/index.ts","logic/MarketMakers/MarketMakersRepo.ts","components/Market/Progress.tsx","components/Market/Layout.tsx","components/Market/index.tsx"],"names":["contracts","lmsrAddressCache","providerAccountCache","TruffleContract","require","loadLMSRMarketMakerContract","web3","a","LMSRMarketMaker","lmsrMarketMakerContract","setProvider","currentProvider","loadConditionalTokensContract","ConditionalTokens","conditionalTokensContract","loadWETH9Contract","YAKI","weth9Contract","loadContracts","lmsrAddress","account","undefined","LMSRMarketMakerContract","ConditionalTokensContract","WETH9Contract","at","lmsrMarketMaker","pmSystem","conditionalTokens","collateralToken","address","contract","name","decimals","symbol","console","log","error","getConditionId","oracleAddress","questionId","outcomeSlotCount","Web3","utils","soliditySha3","t","v","getPositionId","collectionId","conditionalTokensRepo","assert","ConditionalTokensRepo","balanceOf","positionId","getOutcomeSlotCount","id","getCollectionId","parentCollectionId","conditionId","indexSet","payoutDenominator","payoutNumerators","outcomeIndex","isApprovedForAll","lmsrMarketMakerAddress","setApprovalForAll","approved","from","reportPayouts","payouts","redeemPositions","collateralAddress","marketConditionId","indexSets","this","loadConditionalTokensRepo","marketMakersRepo","MarketMakersRepo","getAddress","getCollateralToken","conditionIds","index","owner","funding","stage","close","calcNetCost","outcomeTokenAmounts","calcMarginalPrice","trade","tradeAmounts","collateralLimit","loadMarketMakersRepo","CloseProgress","now","Container","fluid","Row","Col","md","sm","className","styles","circleRed","ProgressBar","label","toFixed","circleGray","ResolveProgress","EndProgress","Progress","useState","data","TradingForm","isMarketClosed","marketInfo","setSelectedOutcomeToken","setSelectedAmount","selectedOutcomeToken","Form","Group","outcomes","map","outcome","payoutNumerator","rightOutcome","wrongOutcome","join","Check","type","onChange","e","checked","Label","link","href","title","variant","parseFloat","probability","toString","outcomeInfo","balance","BuyingModal","buyFunc","approveFunc","setModalShow","modelShow","selectedAmount","calcCost","isEnoughBalance","setIsEnoughBalance","isApproving","setIsApproving","isError","setIsError","errorInfo","setErrorInfo","baseCost","fee","potentialProfit","total","costInfo","setCostInfo","approve","buyAmount","collateralBalance","then","catch","updateConstInfo","parms","cost","costInfoDic","checkInput","value","target","Modal","show","onHide","Body","controlId","Control","readOnly","placeholder","Spinner","as","animation","role","Footer","Button","onClick","TradingModal","action","actionFunc","disabled","isDisabled","TraderActions","redeem","buy","sell","buyShow","setBuyShow","sellShow","setSellShow","redeemShow","setRedeemShow","actions","OperatorActions","OracleActions","resolve","Array","length","fill","checkedState","setCheckedState","short","position","updatedCheckedState","item","handleOnChange","htmlFor","Layout","isConditionLoaded","oracle","creator","createTime","stage1_duration","questionType","stage2_duration","d","diff","Date","getTime","nowProgress","diffDays","Math","ceil","startDate","getFullYear","getMonth","getDate","getHours","getMinutes","remainDays","conditon","xs","lg","totalVolume","toLowerCase","bs58","BigNumber","config","EXPONENTIAL_AT","MarketStage","utf8decoder","TextDecoder","getIpfsHashFromBytes32","bytes32Hex","hashHex","slice","hashBytes","Buffer","encode","Market","outcomeCount","setIsConditionLoaded","setMarketInfo","client","create","process","useEffect","getMarketInfo","init","collateral","cid","stream","cat","chunk","decode","markets","JSON","parse","totalSupply","allowancePoint","parseInt","pow","repeat","dividedBy","push","marketData","amount","amount_str","toLocaleString","useGrouping","maximumFractionDigits","formatedAmount","toBN","gt","approvePoint","tx","i","neg","profit","resolutionOutcomeIndex","Closed"],"mappings":"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","file":"static/js/5.357deb4c.chunk.js","sourcesContent":["import React, { lazy } from 'react'\r\n\r\n\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet contracts: Object | undefined\r\nlet lmsrAddressCache: string | undefined\r\nlet providerAccountCache: string | undefined\r\n\r\nconst resetContracts = () => {\r\n  contracts = undefined\r\n  lmsrAddressCache = undefined\r\n  providerAccountCache = undefined\r\n}\r\n\r\nconst loadLMSRMarketMakerContract = async (web3: any) => {\r\n  let lmsrMarketMakerContract\r\n  if (!contracts) {\r\n    const LMSRMarketMaker = require('../abi/LMSRMarketMaker.min.json')\r\n    lmsrMarketMakerContract = TruffleContract(LMSRMarketMaker)\r\n    lmsrMarketMakerContract.setProvider(web3.currentProvider)\r\n  }\r\n  return lmsrMarketMakerContract\r\n}\r\n\r\nconst loadConditionalTokensContract = async (web3: any) => {\r\n  let conditionalTokensContract\r\n  if (!contracts) {\r\n    const ConditionalTokens = require('../abi/ConditionalTokens.min.json')\r\n    conditionalTokensContract = TruffleContract(ConditionalTokens)\r\n    conditionalTokensContract.setProvider(web3.currentProvider)\r\n  }\r\n  return conditionalTokensContract\r\n}\r\n\r\nconst loadWETH9Contract = async (web3: any) => {\r\n  let weth9Contract\r\n  if (!contracts) {\r\n    // weth9Contract = TruffleContract(WETH9)\r\n\r\n    const YAKI = require('../abi/YAKIID.min.json')\r\n    weth9Contract = TruffleContract(YAKI)\r\n    weth9Contract.setProvider(web3.currentProvider)\r\n  }\r\n  return weth9Contract\r\n}\r\n\r\nconst loadContracts = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetContracts()\r\n    }\r\n    if (!contracts) {\r\n      providerAccountCache = account\r\n      lmsrAddressCache = lmsrAddress\r\n\r\n      const LMSRMarketMakerContract = await loadLMSRMarketMakerContract(web3)\r\n      const ConditionalTokensContract = await loadConditionalTokensContract(web3)\r\n      const WETH9Contract = await loadWETH9Contract(web3)\r\n      try {\r\n        const lmsrMarketMaker = await LMSRMarketMakerContract.at(lmsrAddress)\r\n        const conditionalTokens = await ConditionalTokensContract.at(await lmsrMarketMaker.pmSystem())\r\n\r\n        const collateralToken = {\r\n          address: await lmsrMarketMaker.collateralToken(),\r\n          contract: await WETH9Contract.at(await lmsrMarketMaker.collateralToken()),\r\n          name: 'YAKI TOKEN',\r\n          decimals: 18,\r\n          symbol: 'YAKI',\r\n        }\r\n\r\n        contracts = { lmsrMarketMaker, conditionalTokens, collateralToken }\r\n      }\r\n      catch (error) {\r\n        console.log('error')\r\n      }\r\n    }\r\n    return contracts\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadContracts\r\n","import Web3 from 'web3'\r\n\r\nexport const getConditionId = (\r\n  oracleAddress: string,\r\n  questionId: string,\r\n  outcomeSlotCount: number,\r\n) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: oracleAddress },\r\n    { t: 'bytes32', v: questionId },\r\n    { t: 'uint', v: outcomeSlotCount },\r\n  )\r\n}\r\n\r\nexport const getPositionId = (collateralToken: string, collectionId: string) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: collateralToken },\r\n    { t: 'bytes32', v: collectionId },\r\n  )\r\n}\r\n","import ConditionalTokensRepo from './ConditionalTokensRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet conditionalTokensRepo: ConditionalTokensRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetConditionalTokensRepo = () => {\r\n  conditionalTokensRepo = undefined\r\n}\r\n\r\nconst loadConditionalTokensRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetConditionalTokensRepo()\r\n    }\r\n    if (!conditionalTokensRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      conditionalTokensRepo = new ConditionalTokensRepo(contracts)\r\n    }\r\n    return conditionalTokensRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadConditionalTokensRepo\r\n","const assert = require('assert')\r\n\r\nclass ConditionalTokensRepo {\r\n  conditionalTokens: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.conditionalTokens = contracts.conditionalTokens\r\n  }\r\n\r\n  balanceOf = async (account: string, positionId: number) => {\r\n    return this.conditionalTokens.balanceOf(account, positionId)\r\n  }\r\n\r\n  getOutcomeSlotCount = async (id: string) => {\r\n    return this.conditionalTokens.getOutcomeSlotCount(id)\r\n  }\r\n\r\n  getCollectionId = async (parentCollectionId: string, conditionId: string, indexSet: number[]) => {\r\n    return this.conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet)\r\n  }\r\n\r\n  payoutDenominator = async (conditionId: string) => {\r\n    return this.conditionalTokens.payoutDenominator(conditionId)\r\n  }\r\n\r\n  payoutNumerators = async (conditionId: string, outcomeIndex: number) => {\r\n    return this.conditionalTokens.payoutNumerators(conditionId, outcomeIndex)\r\n  }\r\n\r\n  isApprovedForAll = async (account: string, lmsrMarketMakerAddress: string) => {\r\n    return this.conditionalTokens.isApprovedForAll(account, lmsrMarketMakerAddress)\r\n  }\r\n\r\n  setApprovalForAll = async (lmsrMarketMakerAddress: string, approved: boolean, from: string) => {\r\n    return this.conditionalTokens.setApprovalForAll(lmsrMarketMakerAddress, approved, { from })\r\n  }\r\n\r\n  reportPayouts = async (questionId: string, payouts: number[], from: string) => {\r\n    return this.conditionalTokens.reportPayouts(questionId, payouts, { from })\r\n  }\r\n\r\n  redeemPositions = async (\r\n    collateralAddress: string,\r\n    parentCollectionId: string,\r\n    marketConditionId: string,\r\n    indexSets: number[],\r\n    from: string,\r\n  ) => {\r\n    return this.conditionalTokens.redeemPositions(\r\n      collateralAddress,\r\n      parentCollectionId,\r\n      marketConditionId,\r\n      indexSets,\r\n      { from },\r\n    )\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default ConditionalTokensRepo\r\n","import MarketMakersRepo from './MarketMakersRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet marketMakersRepo: MarketMakersRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetMarketMakersRepo = () => {\r\n  marketMakersRepo = undefined\r\n}\r\n\r\nconst loadMarketMakersRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetMarketMakersRepo()\r\n    }\r\n    if (!marketMakersRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      marketMakersRepo = new MarketMakersRepo(contracts)\r\n    }\r\n    return marketMakersRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadMarketMakersRepo\r\n","const assert = require('assert')\r\n\r\nclass MarketMakersRepo {\r\n  lmsrMarketMaker: any\r\n  collateralToken: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.lmsrMarketMaker = contracts.lmsrMarketMaker\r\n    this.collateralToken = contracts.collateralToken\r\n  }\r\n\r\n  getAddress = async () => {\r\n    return this.lmsrMarketMaker.address\r\n  }\r\n\r\n  getCollateralToken = async () => {\r\n    return this.collateralToken\r\n  }\r\n\r\n  conditionIds = async (index: number) => {\r\n    return this.lmsrMarketMaker.conditionIds(index)\r\n  }\r\n\r\n  owner = async () => {\r\n    return this.lmsrMarketMaker.owner()\r\n  }\r\n\r\n  funding = async () => {\r\n    return this.lmsrMarketMaker.funding()\r\n  }\r\n\r\n  stage = async () => {\r\n    return this.lmsrMarketMaker.stage()\r\n  }\r\n\r\n  close = async (from: string) => {\r\n    return this.lmsrMarketMaker.close({ from })\r\n  }\r\n\r\n  calcNetCost = async (outcomeTokenAmounts: number[]) => {\r\n    return this.lmsrMarketMaker.calcNetCost(outcomeTokenAmounts)\r\n  }\r\n\r\n  calcMarginalPrice = async (outcomeIndex: number) => {\r\n    return this.lmsrMarketMaker.calcMarginalPrice(outcomeIndex)\r\n  }\r\n\r\n  trade = async (tradeAmounts: number[], collateralLimit: number, from: string) => {\r\n    return this.lmsrMarketMaker.trade(tradeAmounts, collateralLimit, { from })\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default MarketMakersRepo\r\n","import React, { useState } from 'react'\r\nimport { Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport styles from 'src/components/style.module.css'\r\n\r\ntype ProgressProperty = {\r\n    now: number\r\n    stage: number\r\n}\r\n\r\ntype StageProperty = {\r\n    now: number\r\n}\r\n\r\nconst CloseProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={0} label={`${0}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ResolveProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst EndProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Progress: React.FC<ProgressProperty> = ({\r\n    now,\r\n    stage\r\n}) => {\r\n\r\n    const [currentStage, setCurrentStage] = useState<number>(0)\r\n\r\n    const data = () => {\r\n        switch (stage) {\r\n            case 0:\r\n                return (\r\n                    <CloseProgress now={now}></CloseProgress>\r\n                )\r\n            case 1:\r\n                return (\r\n                    <ResolveProgress now={now}></ResolveProgress>\r\n                )\r\n            case 2:\r\n                return (\r\n                    <EndProgress now={now}></EndProgress>\r\n                )\r\n\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div>\r\n            {data()}\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default Progress\r\n","import React from 'react'\r\n// import { Paper, Button, TextField, RadioGroup, FormControlLabel, Radio} from '@material-ui/core'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport { Link, NavLink } from 'react-router-dom'\r\n\r\nimport styles from '../style.module.css'\r\nimport { useState, useEffect } from \"react\"\r\n//@ts-ignore\r\nimport Progress from 'src/components/Market/Progress'\r\n\r\n\r\ntype TradingFormProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n}\r\n\r\ntype TraderActionsProps = {\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  redeem: any\r\n  approve: any\r\n  buy: any\r\n  sell: any\r\n  setSelectedAmount: any\r\n  calcCost: any\r\n}\r\n\r\ntype OperatorActionsProps = {\r\n  isMarketClosed: boolean\r\n  close: any\r\n}\r\n\r\ntype OracleActionsProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  resolve: any\r\n}\r\n\r\ntype TradingModalProps = {\r\n  action: string\r\n  actionFunc: any\r\n  setModalShow: any\r\n  modelShow: boolean\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  setSelectedAmount: any\r\n}\r\n\r\ntype BuyingModalProps = {\r\n  buyFunc: any\r\n  approveFunc: any\r\n  setModalShow: any\r\n  modelShow: boolean\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  setSelectedAmount: any\r\n  calcCost: any\r\n}\r\n\r\n\r\ntype LayoutProps = {\r\n  account: string\r\n  isConditionLoaded: boolean\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  selectedAmount: string\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n  approve: any\r\n  buy: any\r\n  sell: any\r\n  redeem: any\r\n  close: any\r\n  resolve: any\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n  calcCost: any\r\n}\r\n\r\nconst TradingForm: React.FC<TradingFormProps> = ({\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n}) => (\r\n  <>\r\n    <Form>\r\n      {/* <div className={styles.inputContainer}>\r\n      <TextField\r\n        variant=\"filled\"\r\n          label=\"Collateral value\"\r\n          type=\"number\"\r\n          onChange={e => setSelectedAmount(e.target.value)}\r\n          disabled={isMarketClosed}\r\n        />\r\n      </div> */}\r\n      {/* <Form.Group className=\"mb-3\" controlId='amount'>\r\n        <Form.Label>Yaki</Form.Label>\r\n      </Form.Group> */}\r\n\r\n      <Form.Group>\r\n        {/* <Form.Check type=\"checkbox\" label\r\n        <RadioGroup\r\n          defaultValue={0}\r\n          onChange={e => setSelectedOutcomeToken(parseInt(e.target.value))}\r\n          value={selectedOutcomeToken}\r\n        > */}\r\n        <Row className=\"mt-4\">\r\n          <Col sm md={7}>\r\n            <p className=\"text-center\">Trend</p>\r\n          </Col>\r\n          <Col sm md={2}>\r\n            <p>Price(YakID)</p>\r\n          </Col>\r\n          <Col sm md={3}>\r\n            <p>MyShares</p>\r\n          </Col>\r\n\r\n        </Row>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <div\r\n            key={outcome.title}\r\n            className={[\r\n              styles.outcome,\r\n              marketInfo.payoutDenominator > 0 && outcome.payoutNumerator > 0 && styles.rightOutcome,\r\n              marketInfo.payoutDenominator > 0 &&\r\n              !(outcome.payoutNumerator > 0) &&\r\n              styles.wrongOutcome,\r\n            ].join(' ')}\r\n          >\r\n            {/* <FormControlLabel\r\n                value={!isMarketClosed ? outcome.index : 'disabled'}\r\n                control={<Radio color=\"primary\" />}\r\n                label={outcome.title}\r\n              /> */}\r\n            <Row>\r\n              <Col sm md={1}>\r\n                <Form.Check type=\"radio\" id={`checkitem${index}`} name=\"checkitems\" onChange={e => setSelectedOutcomeToken(index)} checked={index == selectedOutcomeToken}>\r\n                </Form.Check>\r\n              </Col>\r\n              <Col sm md={6}>\r\n                <Row className=\"d-inline\">\r\n                  <Form.Label>{outcome.link?(<a href={outcome.link}>{outcome.title}</a>): (outcome.title)}</Form.Label>\r\n                </Row>\r\n                <Row>\r\n                  <ProgressBar className=\"pl-0 ml-0\" variant=\"custom\" now={parseFloat(outcome.probability.toString()) * 100} label={`${(parseFloat(outcome.probability.toString()) * 100).toFixed(2)}%`}></ProgressBar>\r\n                </Row>\r\n              </Col>\r\n              <Col sm md={2}>\r\n                <div className={styles.outcomeInfo}>{outcome.probability.toString()}</div>\r\n              </Col>\r\n              <Col sm md={3}>\r\n                <div className={styles.outcomeInfo}>\r\n                  {outcome.balance.toFixed(5).toString()}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ))}\r\n        {/* </RadioGroup> */}\r\n      </Form.Group>\r\n    </Form >\r\n  </>\r\n)\r\n\r\nconst BuyingModal: React.FC<BuyingModalProps> = ({\r\n  buyFunc,\r\n  approveFunc,\r\n  setModalShow,\r\n  modelShow,\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  setSelectedAmount,\r\n  calcCost\r\n}) => {\r\n\r\n  const [isEnoughBalance, setIsEnoughBalance] = useState<boolean>(false)\r\n  const [isApproving, setIsApproving] = useState<boolean>(false)\r\n  const [isError, setIsError] = useState<boolean>(false)\r\n  const [errorInfo, setErrorInfo] = useState<string>(\"\")\r\n  const min_buy = 1\r\n  const [costInfo, setCostInfo] = useState<any>({\r\n    baseCost: 0,\r\n    fee: 0,\r\n    potentialProfit: 0,\r\n    total: 0\r\n  })\r\n\r\n  // useEffect(() => {\r\n  //   console.log('updated effect')\r\n  //   // updateConstInfo()\r\n  // }, [])\r\n\r\n  const buy = () => {\r\n    var buyAmount = parseFloat(selectedAmount)\r\n    var balance = parseFloat(marketInfo.collateralBalance)\r\n\r\n    buyFunc()\r\n\r\n    setModalShow(false)\r\n    if (balance < buyAmount) {\r\n      setIsEnoughBalance(false)\r\n    }\r\n  }\r\n\r\n  const approve = async () => {\r\n    var buyAmount = parseFloat(selectedAmount)\r\n    var balance = parseFloat(marketInfo.collateralBalance)\r\n    if (balance >= buyAmount) {\r\n      console.log('bigger')\r\n      setIsEnoughBalance(true)\r\n    } else {\r\n      console.log('approving')\r\n      setIsApproving(true)\r\n      approveFunc()\r\n        .then(() => setIsEnoughBalance(true), () => setIsEnoughBalance(false))\r\n        .catch(() => { console.log(\"something is wrong\") })\r\n        .then(() => setIsApproving(false))\r\n    }\r\n    console.log('isApproving :' + isApproving)\r\n    console.log('balance :' + balance)\r\n    console.log('buyAmount : ' + buyAmount)\r\n\r\n  }\r\n\r\n\r\n  const updateConstInfo = async (parms:string) => {\r\n      if (parms != \"\") {\r\n        const cost = await calcCost(parms)\r\n\r\n        // calcCost().then((cost: any) => {\r\n        const costInfoDic = {\r\n          baseCost: cost,\r\n          fee: 0,\r\n          potentialProfit: parseFloat(parms) - parseFloat(cost),\r\n          total:parms \r\n        }\r\n\r\n        setCostInfo(costInfoDic)\r\n\r\n        console.log(costInfo)\r\n        // })\r\n      }\r\n\r\n  }\r\n\r\n  const checkInput = async (e: any) => {\r\n    var value = e.target.value\r\n    value = parseFloat(value)\r\n\r\n    if (value < min_buy) {\r\n      setIsError(true)\r\n      setErrorInfo(`The output share should bigger than ${min_buy}`)\r\n    } else {\r\n      setIsError(false)\r\n      setSelectedAmount(e.target.value)\r\n      updateConstInfo(e.target.value)\r\n      // if (selectedAmount != \"\") {\r\n      //   const cost = await calcCost()\r\n\r\n      //   // calcCost().then((cost: any) => {\r\n      //   const costInfoDic = {\r\n      //     baseCost: cost,\r\n      //     fee: 0,\r\n      //     potentialProfit: parseFloat(selectedAmount) - parseFloat(cost),\r\n      //     total: selectedAmount\r\n      //   }\r\n\r\n      //   setCostInfo(costInfoDic)\r\n\r\n      //   console.log(costInfo)\r\n      //   // })\r\n\r\n      // }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n\r\n        <Modal.Body>\r\n          {/* <p>Modal body text goes here.</p> */}\r\n          <Row>\r\n            <Col md={5}>\r\n              <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n                <Form.Label>Approved Tokens</Form.Label>\r\n                <Form.Control type=\"number\" readOnly value={marketInfo.collateralBalance} />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                <Form.Label>Output Shares</Form.Label>\r\n                <Form.Control type=\"number\" placeholder=\"Enter output shares \" onChange={e => checkInput(e)} value={selectedAmount} readOnly={isApproving} />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={7}>\r\n              <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n                <Form.Label>Base Cost</Form.Label>\r\n                <Form.Control type=\"number\" readOnly value={costInfo.baseCost} />\r\n              </Form.Group>\r\n              <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                <Form.Label>Fee</Form.Label>\r\n                <Form.Control type=\"number\" placeholder=\"Enter output shares \" readOnly value={costInfo.fee} />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n                <Form.Label>Potential Profit</Form.Label>\r\n                <Form.Control type=\"number\" readOnly value={costInfo.potentialProfit} />\r\n              </Form.Group>\r\n              <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                <Form.Label>Total</Form.Label>\r\n                <Form.Control readOnly value={costInfo.total} />\r\n              </Form.Group>\r\n\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <div className={isError ? ('d-block') : ('d-none')}>\r\n              <span>{errorInfo}</span>\r\n            </div>\r\n            <div className={isApproving ? ('d-block') : ('d-none')}>\r\n              <Spinner as=\"span\" animation=\"border\" role=\"status\">\r\n              </Spinner>\r\n              <span>Approving... Please dont close this window</span>\r\n            </div>\r\n          </Row>\r\n        </Modal.Body>\r\n\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => { approve() }} className={isEnoughBalance ? ('d-none') : ('d-block')} >Approve</Button>\r\n          <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n          <Button variant=\"primary\" onClick={buy} className={isEnoughBalance ? ('d-block') : ('d-none')}>Buy</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n\r\n\r\n}\r\n\r\n\r\nconst TradingModal: React.FC<TradingModalProps> = ({\r\n  action,\r\n  actionFunc,\r\n  setModalShow,\r\n  modelShow,\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  setSelectedAmount\r\n}) => {\r\n  const onFire = () => {\r\n    actionFunc()\r\n    setModalShow(false)\r\n  }\r\n\r\n  const isDisabled = () => {\r\n    switch (action) {\r\n      case \"buy\":\r\n        return isMarketClosed || !selectedAmount\r\n\r\n      case \"sell\":\r\n        return isMarketClosed || !selectedAmount\r\n\r\n      case \"redeem\":\r\n        return !isMarketClosed || !marketInfo.payoutDenominator\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n\r\n        <Modal.Body>\r\n          {/* <p>Modal body text goes here.</p> */}\r\n\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n            <Form.Label>Output Shares</Form.Label>\r\n            <Form.Control type=\"number\" placeholder=\"Enter output shares \" onChange={e => setSelectedAmount(e.target.value)} />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n          <Button variant=\"primary\" onClick={onFire} disabled={isDisabled()}>{action}</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nconst TraderActions: React.FC<TraderActionsProps> = ({\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  redeem,\r\n  approve,\r\n  buy,\r\n  sell,\r\n  setSelectedAmount,\r\n  calcCost\r\n}) => {\r\n  const [buyShow, setBuyShow] = useState(false)\r\n  const [sellShow, setSellShow] = useState(false)\r\n  const [redeemShow, setRedeemShow] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.actions}>\r\n        <Button\r\n          variant=\"outline-dark\"\r\n          onClick={() => redeem()}\r\n          // onClick={redeem}\r\n          disabled={!isMarketClosed || !marketInfo.payoutDenominator}\r\n          className=\"align-self-start\"\r\n        >\r\n          Redeem\r\n        </Button>\r\n        <Button variant=\"outline-dark\"\r\n          onClick={() => setBuyShow(true)}\r\n          // onClick={buy} \r\n          disabled={isMarketClosed}\r\n          className=\"justify-content-end\"\r\n        >\r\n          Buy\r\n        </Button>\r\n        <Button variant=\"outline-dark\"\r\n          onClick={() => setSellShow(true)}\r\n          // onClick={sell}\r\n          disabled={isMarketClosed}\r\n          className=\"justify-content-start\"\r\n        >\r\n          Sell\r\n        </Button>\r\n\r\n        {/* <TradingModal action=\"buy\" actionFunc={buy} modelShow={buyShow} setModalShow={setBuyShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n        ></TradingModal> */}\r\n        <BuyingModal buyFunc={buy} approveFunc={approve} modelShow={buyShow}\r\n          setModalShow={setBuyShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n          calcCost={calcCost}\r\n        >\r\n        </BuyingModal>\r\n\r\n        <TradingModal action=\"sell\" actionFunc={sell} modelShow={sellShow} setModalShow={setSellShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n        ></TradingModal>\r\n        <TradingModal action=\"redeem\" actionFunc={redeem} modelShow={redeemShow} setModalShow={setRedeemShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n\r\n        ></TradingModal>\r\n\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst OperatorActions: React.FC<OperatorActionsProps> = ({ isMarketClosed, close }) => (\r\n  <>\r\n    <h3>Operator actions:</h3>\r\n    <Button variant=\"danger\" onClick={close} disabled={isMarketClosed}>\r\n      Close\r\n    </Button>\r\n  </>\r\n)\r\n\r\nconst OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => {\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(marketInfo.outcomes.length).fill(false)\r\n  );\r\n\r\n  const handleOnChange = (position: any) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Oracle actions:</h3>\r\n      <div>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <li key={index}>\r\n            <input\r\n              type=\"checkbox\"\r\n              id={`custom-checkbox-${index}`}\r\n              name={outcome.short}\r\n              value={outcome.title}\r\n              checked={checkedState[index]}\r\n              onChange={() => handleOnChange(index)}\r\n            />\r\n            <label htmlFor={`custom-checkbox-${index}`}> {outcome.title} </label>\r\n          </li>\r\n        ))}\r\n        <Button\r\n          onClick={() => resolve(checkedState)}\r\n          variant=\"contained\"\r\n          disabled={!isMarketClosed}\r\n        >Resolve</Button>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst Layout: React.FC<LayoutProps> = ({\r\n  account,\r\n  isConditionLoaded,\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  selectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n  approve,\r\n  buy,\r\n  sell,\r\n  redeem,\r\n  close,\r\n  resolve,\r\n  oracle,\r\n  creator,\r\n  createTime,\r\n  calcCost\r\n}) => {\r\n\r\n  console.log(marketInfo)\r\n  const stage1_duration = marketInfo && marketInfo.questionType == 0 ? (4) : (3)\r\n  const stage2_duration = marketInfo && marketInfo.questionType == 0 ? (7) : (4)\r\n\r\n  var d = createTime\r\n\r\n  let nowDate: Date = new Date(Date.now())\r\n  var diff = nowDate.getTime() - d.getTime();\r\n  diff = diff > 0 ? diff : 0;\r\n  var diffDays = Math.ceil(diff / (1000 * 3600 * 24)) - 1;\r\n  var stage = isMarketClosed ? 1 : 0\r\n  console.log(stage)\r\n\r\n  if (isMarketClosed && marketInfo.payoutDenominator) {\r\n    stage = 2\r\n  }\r\n\r\n  var nowProgress\r\n  if (stage == 1) {\r\n    diffDays = diffDays - stage1_duration\r\n    diffDays = diffDays > 0 ? diffDays : 0\r\n    console.log('diffdays' + diffDays)\r\n    nowProgress = (diffDays / stage2_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration + stage2_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage2_duration + stage2_duration - diffDays\r\n\r\n  } else {\r\n    console.log('diffdays' + diffDays)\r\n    console.log('duration' + stage1_duration)\r\n\r\n    nowProgress = (diffDays / stage1_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage1_duration - diffDays\r\n\r\n  }\r\n  console.log(nowProgress)\r\n  console.log(stage)\r\n  console.log(oracle)\r\n\r\n  return (\r\n    <Container className={[styles.conditon].join(' ')}>\r\n      {isConditionLoaded ? (\r\n        <>\r\n          <Row className=\"justify-content-md-center mt-5\">\r\n            <Col xs sm lg=\"6\">\r\n              <Row>\r\n                <h2 className=\"text-center mb-5\">{marketInfo.title}</h2>\r\n              </Row>\r\n              <Row className=\"mt-2 pt-4 bg-transparent border border-primary\">\r\n                <Row>\r\n                  <Progress now={nowProgress} stage={stage}></Progress>\r\n                </Row>\r\n                <Row>\r\n\r\n                  <Col sm md={3} className=\"justify-content-md-center\">\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.funding}k Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Liqudity</p>\r\n                  </Col>\r\n                  <Col sm md={3}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.totalVolume} Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Total Volume</p>\r\n\r\n                  </Col>\r\n                  <Col sm md={4}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {startDate} </strong></p>\r\n                    <p className=\"mt-0 text-center\">{stage == 0 ? (`Closing Date`) : (`Resolving Date`)}</p>\r\n                  </Col>\r\n                  <Col sm md={2}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {remainDays} days </strong></p>\r\n                    <p className=\"mt-0 text-center\">Remaining</p>\r\n                  </Col>\r\n\r\n                </Row>\r\n              </Row>\r\n              <Row className=\"mt-2 bg-transparent border border-primary\">\r\n                <TradingForm\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                  setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n                  selectedOutcomeToken={selectedOutcomeToken}\r\n                />\r\n              </Row>\r\n              <Row className=\"justify-content-end\">\r\n                <TraderActions\r\n                  marketInfo={marketInfo}\r\n                  isMarketClosed={isMarketClosed}\r\n                  selectedAmount={selectedAmount}\r\n                  redeem={redeem}\r\n                  approve={approve}\r\n                  buy={buy}\r\n                  sell={sell}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                  calcCost={calcCost}\r\n                />\r\n              </Row>\r\n              {account && account.toLowerCase() === creator && (\r\n                <OperatorActions isMarketClosed={isMarketClosed} close={close} />\r\n              )}\r\n              {account && account.toLowerCase() === oracle && (\r\n                <OracleActions\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  resolve={resolve}\r\n                />\r\n              )}\r\n            </Col>\r\n          </Row>\r\n\r\n        </>\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"text-center\">Loading...</h1>\r\n        </div>\r\n      )}\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React, { useState, useEffect } from 'react'\r\nimport loadConditionalTokensRepo from 'src/logic/ConditionalTokens'\r\nimport loadMarketMakersRepo from 'src/logic/MarketMakers'\r\nimport { getConditionId, getPositionId } from 'src/utils/markets'\r\nimport BigNumber from 'bignumber.js'\r\nimport Layout from './Layout'\r\nimport { create } from 'ipfs-http-client'\r\nimport Web3 from 'web3'\r\n// import {web3} from 'web3'\r\nconst bs58 = require('bs58')\r\n\r\nBigNumber.config({ EXPONENTIAL_AT: 50 })\r\n\r\nlet utf8decoder = new TextDecoder()\r\n\r\n// const markets = require('src/conf/config.local.json')\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  lmsrAddress: string\r\n  questionId: string\r\n  outcomeCount: number\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n  questionType: number\r\n}\r\n\r\nenum MarketStage {\r\n  Running = 0,\r\n  Paused = 1,\r\n  Closed = 2,\r\n}\r\n\r\nlet conditionalTokensRepo: any\r\nlet marketMakersRepo: any\r\n\r\nfunction getIpfsHashFromBytes32(bytes32Hex: any) {\r\n  // Add our default ipfs values for first 2 bytes:\r\n  // function:0x12=sha2, size:0x20=256 bits\r\n  // and cut off leading \"0x\"\r\n  const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n  const hashBytes = Buffer.from(hashHex, 'hex');\r\n  const hashStr = bs58.encode(hashBytes)\r\n  return hashStr\r\n}\r\n\r\nconst Market: React.FC<MarketProps> = ({ web3, account, lmsrAddress, questionId, outcomeCount, oracle, creator, createTime, questionType }) => {\r\n  const [isConditionLoaded, setIsConditionLoaded] = useState<boolean>(false)\r\n  const [isEnoughBalance, setIsEnoughBalance] = useState<boolean>(false)\r\n  const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n  const [selectedOutcomeToken, setSelectedOutcomeToken] = useState<number>(0)\r\n  const [marketInfo, setMarketInfo] = useState<any>(undefined)\r\n  //@ts-ignore\r\n  const client = create(process.env.REACT_APP_IPFS_ENDPOINT)\r\n  // const client = create({\r\n  //   host: 'localhost',\r\n  //   port: 5001,\r\n  //   protocol: 'http',\r\n  //   // headers: {\r\n  //   //   authorization: auth\r\n  //   // }\r\n\r\n  // })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        conditionalTokensRepo = await loadConditionalTokensRepo(web3, lmsrAddress, account)\r\n        marketMakersRepo = await loadMarketMakersRepo(web3, lmsrAddress, account)\r\n        await getMarketInfo()\r\n        setIsConditionLoaded(true)\r\n      } catch (err) {\r\n        setIsConditionLoaded(false)\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    init()\r\n  }, [])\r\n\r\n  const getMarketInfo = async () => {\r\n    if (!oracle) return\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const conditionId = getConditionId(\r\n      // process.env.REACT_APP_ORACLE_ADDRESS,\r\n      oracle,\r\n      questionId,\r\n      outcomeCount,\r\n    )\r\n    const payoutDenominator = await conditionalTokensRepo.payoutDenominator(conditionId)\r\n\r\n    // var cid = questionId.slice(0, 46)\r\n    const cid = getIpfsHashFromBytes32(questionId)\r\n    //@ts-ignore\r\n    const stream = client.cat(cid)\r\n    let data = ''\r\n\r\n    for await (const chunk of stream) {\r\n      // data += chunk.toString()\r\n      data += utf8decoder.decode(chunk)\r\n    }\r\n    console.log(data.toString())\r\n\r\n    var markets = JSON.parse(data)\r\n    const funding = await marketMakersRepo.funding()\r\n    const totalSupply = await collateral.contract.totalSupply()\r\n    const collateralBalance = await collateral.contract.allowancePoint(account, lmsrAddress)\r\n\r\n\r\n\r\n    const outcomes = []\r\n    for (let outcomeIndex = 0; outcomeIndex < outcomeCount; outcomeIndex++) {\r\n      const indexSet = (outcomeIndex === 0\r\n        ? 1\r\n        : parseInt(Math.pow(10, outcomeIndex).toString(), 2)\r\n      ).toString()\r\n      const collectionId = await conditionalTokensRepo.getCollectionId(\r\n        `0x${'0'.repeat(64)}`,\r\n        conditionId,\r\n        indexSet,\r\n      )\r\n      const positionId = getPositionId(collateral.address, collectionId)\r\n      const probability = await marketMakersRepo.calcMarginalPrice(outcomeIndex)\r\n      const balance = await conditionalTokensRepo.balanceOf(account, positionId)\r\n      const payoutNumerator = await conditionalTokensRepo.payoutNumerators(\r\n        conditionId,\r\n        outcomeIndex,\r\n      )\r\n\r\n      const outcome = {\r\n        index: outcomeIndex,\r\n        // title: markets.markets[0].outcomes[outcomeIndex].title,\r\n        title: markets[0].outcomes[outcomeIndex].title,\r\n        link: markets[0].outcomes[outcomeIndex].link,\r\n        probability: new BigNumber(probability)\r\n          .dividedBy(Math.pow(2, 64))\r\n          .toFixed(3),\r\n        // .multipliedBy(100)\r\n        balance: new BigNumber(balance).dividedBy(Math.pow(10, collateral.decimals)),\r\n        payoutNumerator: payoutNumerator,\r\n      }\r\n      console.log(outcome)\r\n      outcomes.push(outcome)\r\n    }\r\n\r\n    const marketData = {\r\n      lmsrAddress: lmsrAddress,\r\n      title: markets[0].title,\r\n      link: markets[0].link,\r\n      outcomes,\r\n      stage: MarketStage[await marketMakersRepo.stage()],\r\n      questionId: questionId,\r\n      conditionId: conditionId,\r\n      payoutDenominator: payoutDenominator,\r\n      funding: new BigNumber(funding).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      totalVolume: new BigNumber(totalSupply).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      collateralBalance: new BigNumber(collateralBalance).dividedBy(Math.pow(10, collateral.decimals)).toFixed(2),\r\n      questionType: questionType\r\n    }\r\n\r\n    setMarketInfo(marketData)\r\n  }\r\n\r\n  const approve = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // ).toString()\r\n    // const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n    // const formatedAmount = Web3.utils.toBN(String(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)))\r\n    var amount = parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    const collateralBalance = await collateral.contract.allowancePoint(account, marketInfo.lmsrAddress)\r\n\r\n    if (cost.gt(collateralBalance)) {\r\n      // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n      await collateral.contract.approvePoint(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n        from: account,\r\n      })\r\n      setIsEnoughBalance(true)\r\n    } else {\r\n      setIsEnoughBalance(true)\r\n    }\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const buy = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // ).toString()\r\n    // const formatedAmount = Web3.utils.toBN(String(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)))\r\n    var amount = parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    // const collateralBalance = await collateral.contract.allowancePoint(account, marketInfo.lmsrAddress)\r\n    // if (cost.gt(collateralBalance)) {\r\n    //   // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n    //   await collateral.contract.approvePoint(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n    //     from: account,\r\n    //   })\r\n    // }\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, cost, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const calcCost = async (parms: string) => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // console.log(selectedAmount)\r\n    var amount = parseFloat(parms) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n    return  new BigNumber(cost).dividedBy(Math.pow(10, collateral.decimals)).toFixed(2)\r\n  }\r\n\r\n  const sell = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // )\r\n    // const formatedAmount = Web3.utils.toBN(0).sub(\r\n    // Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals))))\r\n\r\n    // const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n\r\n    // const formatedAmount = Web3.utils.toBN(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals))\r\n    // const formatedAmount = Web3.utils.toBN(String(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)))\r\n    var amount = parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n\r\n\r\n\r\n    const isApproved = await conditionalTokensRepo.isApprovedForAll(account, marketInfo.lmsrAddress)\r\n    if (!isApproved) {\r\n      await conditionalTokensRepo.setApprovalForAll(marketInfo.lmsrAddress, true, account)\r\n    }\r\n\r\n    const outcomeTokenAmounts = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === selectedOutcomeToken ? formatedAmount.neg() : Web3.utils.toBN(0),\r\n    )\r\n    const profit = (await marketMakersRepo.calcNetCost(outcomeTokenAmounts)).neg()\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, profit, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const redeem = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n\r\n    const indexSets = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === 0 ? 1 : parseInt(Math.pow(10, i).toString(), 2),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.redeemPositions(\r\n      collateral.address,\r\n      `0x${'0'.repeat(64)}`,\r\n      marketInfo.conditionId,\r\n      indexSets,\r\n      account,\r\n    )\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const close = async () => {\r\n    const tx = await marketMakersRepo.close(account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const resolve = async (resolutionOutcomeIndex: Array<Boolean>) => {\r\n    // const payouts = Array.from(\r\n    //   { length: marketInfo.outcomes.length },\r\n    //   (value: any, index: number) => (index === resolutionOutcomeIndex ? 1 : 0),\r\n    // )\r\n    const payouts = Array.from(\r\n      resolutionOutcomeIndex, (value: any, index: number) => (value === true ? 1 : 0),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.reportPayouts(marketInfo.questionId, payouts, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const isMarketClosed =\r\n    isConditionLoaded && MarketStage[marketInfo.stage].toString() === MarketStage.Closed.toString()\r\n  return (\r\n    <Layout\r\n      account={account}\r\n      isConditionLoaded={isConditionLoaded}\r\n      isMarketClosed={isMarketClosed}\r\n      marketInfo={marketInfo}\r\n      setSelectedAmount={setSelectedAmount}\r\n      selectedAmount={selectedAmount}\r\n      setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n      selectedOutcomeToken={selectedOutcomeToken}\r\n      approve={approve}\r\n      buy={buy}\r\n      sell={sell}\r\n      redeem={redeem}\r\n      close={close}\r\n      resolve={resolve}\r\n      oracle={oracle}\r\n      creator={creator}\r\n      createTime={createTime}\r\n      calcCost = {calcCost}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Market\r\n"],"sourceRoot":""}