{"version":3,"sources":["components/Yaki/index.tsx","components/Yaki/Layout.tsx"],"names":["yakiTokenRepo","Layout","account","tokenInfo","setSelectedAmount","transform","selectedAmount","isYakiTokenLoaded","setRecipient","Container","Form","Group","as","Row","className","controlId","Label","column","sm","Col","Control","plaintext","readOnly","defaultValue","symbol","value","balance","type","onChange","e","target","Button","onClick","SpinnerPage","YakiWallet","web3","yakiAddress","useState","setIsYakiTokenLoaded","undefined","setTokenInfo","recipient","console","log","useEffect","a","loadYakiTokenRepo","getYakiInfo","error","init","decimals","pointBanlanceOf","balanceAmount","Web3","utils","toBN","div","Math","pow","name","yakiData","formatedAmount","mul","transferPoint","tx"],"mappings":"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","file":"static/js/29.935f93ac.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport loadYakiTokenRepo from \"src/logic/YakiToken\";\r\nimport Layout from './Layout'\r\nimport Web3 from 'web3'\r\nimport SpinnerPage from 'src/components/SpinnerPage'\r\n\r\ntype YakiWalletProps = {\r\n    web3: any\r\n    account: string\r\n    yakiAddress: string\r\n}\r\n\r\nlet yakiTokenRepo: any\r\n\r\nconst YakiWallet: React.FC<YakiWalletProps> = ({\r\n    web3, account, yakiAddress\r\n}) => {\r\n    const [isYakiTokenLoaded, setIsYakiTokenLoaded] = useState<boolean>(false)\r\n    const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n    const [tokenInfo, setTokenInfo] = useState<any>(undefined)\r\n    const [recipient, setRecipient] = useState<string>('')\r\n\r\n    console.log(yakiAddress)\r\n\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            try {\r\n                yakiTokenRepo = await loadYakiTokenRepo(web3, yakiAddress, account)\r\n                await getYakiInfo()\r\n                setIsYakiTokenLoaded(true)\r\n            } catch (err) {\r\n                setIsYakiTokenLoaded(false)\r\n                console.error(err)\r\n            }\r\n        }\r\n\r\n\r\n        init()\r\n\r\n    }, [])\r\n\r\n    const getYakiInfo = async () => {\r\n        const decimals = await yakiTokenRepo.decimals()\r\n        const balanceAmount = await yakiTokenRepo.pointBanlanceOf(account)\r\n        const balance = Web3.utils.toBN(balanceAmount).div(\r\n            Web3.utils.toBN(Math.pow(10, decimals))\r\n        )\r\n        const symbol = await yakiTokenRepo.symbol()\r\n        const name = await yakiTokenRepo.name()\r\n\r\n        const yakiData = {\r\n            balance: balance,\r\n            symbol: symbol,\r\n            name: name,\r\n            decimals: decimals\r\n        }\r\n\r\n        console.log(yakiData.balance)\r\n\r\n        setTokenInfo(yakiData)\r\n\r\n    }\r\n\r\n    const transform = async () => {\r\n        const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, tokenInfo.decimals)))\r\n\r\n        const tx = await yakiTokenRepo.transferPoint(recipient, formatedAmount, account)\r\n\r\n        console.log({ tx })\r\n\r\n        await getYakiInfo()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isYakiTokenLoaded ? (<Layout\r\n                account={account}\r\n                // tokenSymbol={tokenInfo.symbol}\r\n                // tokenAmount={tokenInfo.balance}\r\n                tokenInfo={tokenInfo}\r\n                setSelectedAmount={setSelectedAmount}\r\n                selectedAmount={selectedAmount}\r\n                setRecipient={setRecipient}\r\n                transform={transform}\r\n                isYakiTokenLoaded={isYakiTokenLoaded}\r\n            />) : (\r\n                <SpinnerPage />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default YakiWallet","import React from 'react'\r\nimport { Form, Row, Col, Container, Button } from \"react-bootstrap\"\r\nimport SpinnerPage from 'src/components/SpinnerPage'\r\n\r\ntype TokenAccountProps = {\r\n    account: string\r\n    tokenInfo: any\r\n    setSelectedAmount: any\r\n    selectedAmount: string\r\n    transform: any\r\n    isYakiTokenLoaded: boolean\r\n    setRecipient: any\r\n}\r\n\r\nconst Layout: React.FC<TokenAccountProps> = (\r\n    {\r\n        account,\r\n        tokenInfo,\r\n        setSelectedAmount,\r\n        selectedAmount,\r\n        transform,\r\n        isYakiTokenLoaded,\r\n        setRecipient\r\n    }\r\n) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            {isYakiTokenLoaded ? (\r\n                <Container>\r\n                    <Form>\r\n                        <Form.Group as={Row} className=\"mb-3\" controlId=\"yakiSymbol\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Token Name\r\n                            </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control plaintext readOnly defaultValue={tokenInfo.symbol}></Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} className=\"mb-3\" controlId=\"yakiBalance\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Balance\r\n                            </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control plaintext readOnly value={tokenInfo.balance || ''} />\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Row} className=\"mb-3\" controlId=\"yakiAmount\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Amount\r\n                            </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control type=\"string\" onChange={e=>setSelectedAmount(e.target.value)}/>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} className=\"mb-3\" controlId=\"tradeAccount\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Account address\r\n                            </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control type=\"string\" onChange={e=>setRecipient(e.target.value)}/>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Button onClick={e=>transform()}>\r\n                            Submit\r\n                        </Button>\r\n\r\n                    </Form>\r\n                </Container>\r\n\r\n            ) : (\r\n                <SpinnerPage />\r\n            )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Layout"],"sourceRoot":""}