{"version":3,"sources":["logic/YakiToken/index.ts","logic/YakiToken/YAKID.ts"],"names":["yakiTokenRepo","yakiAddressCache","providerAccountCache","assert","require","YakiTokenRepo","contracts","yakiToken","symbol","a","decimals","name","getAddress","address","approvePoint","spender","amount","from","pointBanlanceOf","account","pointBalanceOf","transferPoint","recipient","transferPointFrom","sender","tranferPointFrom","this","TruffleContract","loadYakiContract","web3","yakiContract","YAKI","setProvider","currentProvider","loadYakiTokenRepo","yakiAddress","undefined","at","console","error"],"mappings":"mGAKIA,EACAC,EACAC,E,gCCPEC,EAASC,EAAQ,IA6CRC,EAxCX,WAAYC,GAAiB,IAAD,gCAF5BC,eAE4B,OAM5BC,OAN4B,sBAMnB,sBAAAC,EAAA,+EACE,EAAKF,UAAUC,UADjB,2CANmB,KAU5BE,SAV4B,sBAUjB,sBAAAD,EAAA,+EACA,EAAKF,UAAUG,YADf,2CAViB,KAc5BC,KAd4B,sBAcrB,sBAAAF,EAAA,+EACI,EAAKF,UAAUI,QADnB,2CAdqB,KAkB5BC,WAlB4B,sBAkBf,sBAAAH,EAAA,+EACF,EAAKF,UAAUM,SADb,2CAlBe,KAsB5BC,aAtB4B,uCAsBb,WAAOC,EAAiBC,EAAgBC,GAAxC,SAAAR,EAAA,+EACJ,EAAKF,UAAUO,aAAaC,EAASC,EAAQ,CAAEC,UAD3C,2CAtBa,+DA0B5BC,gBA1B4B,uCA0BV,WAAOC,GAAP,SAAAV,EAAA,+EACP,EAAKF,UAAUa,eAAeD,IADvB,2CA1BU,2DA8B5BE,cA9B4B,uCA8BZ,WAAOC,EAAmBN,EAAgBC,GAA1C,SAAAR,EAAA,+EACL,EAAKF,UAAUc,cAAcC,EAAWN,EAAQ,CAAEC,UAD7C,2CA9BY,+DAkC5BM,kBAlC4B,uCAkCR,WAAOC,EAAgBF,EAAmBN,EAAgBC,GAA1D,SAAAR,EAAA,+EACT,EAAKF,UAAUkB,iBAAiBD,EAAQF,EAAWN,EAAQ,CAAEC,UADpD,2CAlCQ,4DACxBd,EAAOG,EAAW,2BAElBoB,KAAKnB,UAAYD,G,UDLnBqB,EAAkBvB,EAAQ,KAW1BwB,EAAgB,uCAAG,WAAOC,GAAP,eAAApB,EAAA,6DAIjBqB,EAAeH,EAAgBI,IAClBC,YAAYH,EAAKI,iBALb,kBAOdH,GAPc,2CAAH,sDAWhBI,EAAiB,uCAAG,WAAOL,EAAWM,EAAqBhB,GAAvC,iBAAAV,EAAA,mEAGbU,GAAWA,IAAYjB,GACvBiC,GAAeA,IAAgBlC,KAlBxCD,OAAgBoC,GAsBPpC,EARa,wBASdC,EAAmBkC,EACnBjC,EAAuBiB,EAVT,SAYUS,EAAiBC,GAZ3B,cAYRvB,EAZQ,iBAaaA,EAAU+B,GAAGF,GAb1B,QAaRL,EAbQ,OAcd9B,EAAgB,IAAIK,EAAcyB,GAdpB,iCAgBX9B,GAhBW,yCAkBlBsC,QAAQC,MAAR,MAlBkB,kBAmBX,MAnBW,0DAAH,0DAuBRL,O","file":"static/js/6.17ca9bd8.chunk.js","sourcesContent":["import YakiTokenRepo from \"./YAKID\";\r\nimport YAKI from '../../abi/YAKIID.json'\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet yakiTokenRepo: YakiTokenRepo | undefined\r\nlet yakiAddressCache: string\r\nlet providerAccountCache: string\r\nlet contract: object | undefined\r\n\r\nconst resetYakiTokenRepo = () => {\r\n    yakiTokenRepo = undefined\r\n}\r\n\r\nconst loadYakiContract = async (web3: any) => {\r\n    let yakiContract\r\n    if (!contract) {\r\n        // weth9Contract = TruffleContract(WETH9)\r\n        yakiContract = TruffleContract(YAKI)\r\n        yakiContract.setProvider(web3.currentProvider)\r\n    }\r\n    return yakiContract\r\n}\r\n\r\n\r\nconst loadYakiTokenRepo = async (web3: any, yakiAddress: string, account: string) => {\r\n    try {\r\n        if (\r\n            (account && account !== providerAccountCache) ||\r\n            (yakiAddress && yakiAddress !== yakiAddressCache)\r\n        ) {\r\n            resetYakiTokenRepo()\r\n        }\r\n        if (!yakiTokenRepo) {\r\n            yakiAddressCache = yakiAddress\r\n            providerAccountCache = account\r\n\r\n            const contracts = await loadYakiContract(web3)\r\n            const yakiContract = await contracts.at(yakiAddress)\r\n            yakiTokenRepo = new YakiTokenRepo(yakiContract)\r\n        }\r\n        return yakiTokenRepo\r\n    } catch (err) {\r\n        console.error(err)\r\n        return null\r\n    }\r\n}\r\n\r\nexport default loadYakiTokenRepo\r\n","const assert = require('assert')\r\n\r\nclass YakiTokenRepo {\r\n    yakiToken: any\r\n\r\n    constructor(contracts: any) {\r\n        assert(contracts, '\"contracts\" is required')\r\n\r\n        this.yakiToken = contracts\r\n    }\r\n\r\n    symbol = async () => {\r\n        return this.yakiToken.symbol()\r\n    }\r\n\r\n    decimals = async () => {\r\n        return this.yakiToken.decimals()\r\n    }\r\n\r\n    name = async () => {\r\n        return this.yakiToken.name()\r\n    }\r\n\r\n    getAddress = async () => {\r\n        return this.yakiToken.address\r\n    }\r\n\r\n    approvePoint = async (spender: string, amount: number, from: string) => {\r\n        return this.yakiToken.approvePoint(spender, amount, { from })\r\n    }\r\n\r\n    pointBanlanceOf = async (account: string) => {\r\n        return this.yakiToken.pointBalanceOf(account)\r\n    }\r\n\r\n    transferPoint = async (recipient: string, amount: number, from: string) => {\r\n        return this.yakiToken.transferPoint(recipient, amount, { from })\r\n    }\r\n\r\n    transferPointFrom = async (sender: string, recipient: string, amount: number, from: string) => {\r\n        return this.yakiToken.tranferPointFrom(sender, recipient, amount, { from })\r\n    }\r\n\r\n}\r\n\r\nexport default YakiTokenRepo"],"sourceRoot":""}