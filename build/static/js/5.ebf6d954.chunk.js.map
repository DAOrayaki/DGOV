{"version":3,"sources":["logic/contracts.ts","utils/markets.ts","components/Market/Progress.tsx","components/Market/TradingForm.tsx","components/Market/BuyModel.tsx","components/Market/SellModel.tsx","components/Market/RedeemModel.tsx","components/Market/TradingActions.tsx","components/Market/Layout.tsx","logic/ConditionalTokens/index.ts","logic/ConditionalTokens/ConditionalTokensRepo.ts","logic/MarketMakers/index.ts","logic/MarketMakers/MarketMakersRepo.ts","components/Market/index.tsx"],"names":["contracts","lmsrAddressCache","providerAccountCache","TruffleContract","require","loadLMSRMarketMakerContract","web3","a","LMSRMarketMaker","lmsrMarketMakerContract","setProvider","currentProvider","loadConditionalTokensContract","ConditionalTokens","conditionalTokensContract","loadWETH9Contract","YAKI","weth9Contract","loadContracts","lmsrAddress","account","undefined","LMSRMarketMakerContract","ConditionalTokensContract","WETH9Contract","at","lmsrMarketMaker","pmSystem","conditionalTokens","collateralToken","address","contract","name","decimals","symbol","console","log","error","getConditionId","oracleAddress","questionId","outcomeSlotCount","Web3","utils","soliditySha3","t","v","getPositionId","collectionId","CloseProgress","now","Container","fluid","Row","Col","md","sm","className","styles","circleRed","ProgressBar","label","toFixed","circleGray","ResolveProgress","EndProgress","Progress","stage","useState","data","TradingForm","isMarketClosed","marketInfo","setSelectedOutcomeToken","setSelectedAmount","selectedOutcomeToken","Form","Group","outcomes","map","outcome","index","payoutDenominator","payoutNumerator","rightOutcome","wrongOutcome","join","Check","type","id","onChange","e","checked","Label","link","href","title","variant","parseFloat","probability","toString","outcomeInfo","balance","BuyingModal","buyFunc","approveFunc","setModalShow","modelShow","selectedAmount","calcCost","useEffect","updateConstInfo","isEnoughBalance","setIsEnoughBalance","isApproving","setIsApproving","isError","setIsError","errorInfo","setErrorInfo","baseCost","fee","potentialProfit","total","costInfo","setCostInfo","approve","buyAmount","collateralBalance","then","catch","parms","cost","costInfoDic","checkInput","value","target","Modal","show","onHide","Body","controlId","InputGroup","Control","readOnly","Text","placeholder","Spinner","as","animation","role","Footer","Button","onClick","disabled","SellingModal","sellFunc","isExecuting","setIsExecuting","RedeemModal","redeemFunc","Table","striped","bordered","hover","den","i","length","computeTotal","TraderActions","redeem","buy","sell","buyShow","setBuyShow","sellShow","setSellShow","redeemShow","setRedeemShow","actions","OperatorActions","close","OracleActions","resolve","Array","fill","checkedState","setCheckedState","short","position","updatedCheckedState","item","handleOnChange","htmlFor","Layout","stage1_duration","stage2_duration","isConditionLoaded","oracle","creator","createTime","closeDelay","parseInt","questionType","resolveDelay","d","diff","Date","getTime","nowProgress","diffDays","Math","ceil","startDate","getFullYear","getMonth","getDate","getHours","getMinutes","remainDays","conditon","xs","lg","funding","totalVolume","toLowerCase","SpinnerPage","conditionalTokensRepo","assert","ConditionalTokensRepo","balanceOf","positionId","getOutcomeSlotCount","getCollectionId","parentCollectionId","conditionId","indexSet","payoutNumerators","outcomeIndex","isApprovedForAll","lmsrMarketMakerAddress","setApprovalForAll","approved","from","reportPayouts","payouts","redeemPositions","collateralAddress","marketConditionId","indexSets","this","loadConditionalTokensRepo","marketMakersRepo","MarketMakersRepo","getAddress","getCollateralToken","conditionIds","owner","calcNetCost","outcomeTokenAmounts","calcMarginalPrice","trade","tradeAmounts","collateralLimit","loadMarketMakersRepo","bs58","BigNumber","config","EXPONENTIAL_AT","MarketStage","utf8decoder","TextDecoder","getIpfsHashFromBytes32","bytes32Hex","hashHex","slice","hashBytes","Buffer","encode","Market","outcomeCount","setIsConditionLoaded","setMarketInfo","client","create","process","getMarketInfo","init","collateral","cid","stream","cat","chunk","decode","markets","JSON","parse","totalSupply","allowancePoint","pow","repeat","dividedBy","push","marketData","amount","amount_str","toLocaleString","useGrouping","maximumFractionDigits","formatedAmount","toBN","gt","approvePoint","tx","neg","profit","resolutionOutcomeIndex","Closed"],"mappings":"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","file":"static/js/5.ebf6d954.chunk.js","sourcesContent":["import React, { lazy } from 'react'\r\n\r\n\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet contracts: Object | undefined\r\nlet lmsrAddressCache: string | undefined\r\nlet providerAccountCache: string | undefined\r\n\r\nconst resetContracts = () => {\r\n  contracts = undefined\r\n  lmsrAddressCache = undefined\r\n  providerAccountCache = undefined\r\n}\r\n\r\nconst loadLMSRMarketMakerContract = async (web3: any) => {\r\n  let lmsrMarketMakerContract\r\n  if (!contracts) {\r\n    const LMSRMarketMaker = require('../abi/LMSRMarketMaker.min.json')\r\n    lmsrMarketMakerContract = TruffleContract(LMSRMarketMaker)\r\n    lmsrMarketMakerContract.setProvider(web3.currentProvider)\r\n  }\r\n  return lmsrMarketMakerContract\r\n}\r\n\r\nconst loadConditionalTokensContract = async (web3: any) => {\r\n  let conditionalTokensContract\r\n  if (!contracts) {\r\n    const ConditionalTokens = require('../abi/ConditionalTokens.min.json')\r\n    conditionalTokensContract = TruffleContract(ConditionalTokens)\r\n    conditionalTokensContract.setProvider(web3.currentProvider)\r\n  }\r\n  return conditionalTokensContract\r\n}\r\n\r\nconst loadWETH9Contract = async (web3: any) => {\r\n  let weth9Contract\r\n  if (!contracts) {\r\n    // weth9Contract = TruffleContract(WETH9)\r\n\r\n    const YAKI = require('../abi/YAKIID.min.json')\r\n    weth9Contract = TruffleContract(YAKI)\r\n    weth9Contract.setProvider(web3.currentProvider)\r\n  }\r\n  return weth9Contract\r\n}\r\n\r\nconst loadContracts = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetContracts()\r\n    }\r\n    if (!contracts) {\r\n      providerAccountCache = account\r\n      lmsrAddressCache = lmsrAddress\r\n\r\n      const LMSRMarketMakerContract = await loadLMSRMarketMakerContract(web3)\r\n      const ConditionalTokensContract = await loadConditionalTokensContract(web3)\r\n      const WETH9Contract = await loadWETH9Contract(web3)\r\n      try {\r\n        const lmsrMarketMaker = await LMSRMarketMakerContract.at(lmsrAddress)\r\n        const conditionalTokens = await ConditionalTokensContract.at(await lmsrMarketMaker.pmSystem())\r\n\r\n        const collateralToken = {\r\n          address: await lmsrMarketMaker.collateralToken(),\r\n          contract: await WETH9Contract.at(await lmsrMarketMaker.collateralToken()),\r\n          name: 'YAKI TOKEN',\r\n          decimals: 18,\r\n          symbol: 'YAKI',\r\n        }\r\n\r\n        contracts = { lmsrMarketMaker, conditionalTokens, collateralToken }\r\n      }\r\n      catch (error) {\r\n        console.log('error')\r\n      }\r\n    }\r\n    return contracts\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadContracts\r\n","import Web3 from 'web3'\r\n\r\nexport const getConditionId = (\r\n  oracleAddress: string,\r\n  questionId: string,\r\n  outcomeSlotCount: number,\r\n) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: oracleAddress },\r\n    { t: 'bytes32', v: questionId },\r\n    { t: 'uint', v: outcomeSlotCount },\r\n  )\r\n}\r\n\r\nexport const getPositionId = (collateralToken: string, collectionId: string) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: collateralToken },\r\n    { t: 'bytes32', v: collectionId },\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport styles from 'src/components/style.module.css'\r\n\r\ntype ProgressProperty = {\r\n    now: number\r\n    stage: number\r\n}\r\n\r\ntype StageProperty = {\r\n    now: number\r\n}\r\n\r\nconst CloseProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={0} label={`${0}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ResolveProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst EndProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Progress: React.FC<ProgressProperty> = ({\r\n    now,\r\n    stage\r\n}) => {\r\n\r\n    const [currentStage, setCurrentStage] = useState<number>(0)\r\n\r\n    const data = () => {\r\n        switch (stage) {\r\n            case 0:\r\n                return (\r\n                    <CloseProgress now={now}></CloseProgress>\r\n                )\r\n            case 1:\r\n                return (\r\n                    <ResolveProgress now={now}></ResolveProgress>\r\n                )\r\n            case 2:\r\n                return (\r\n                    <EndProgress now={now}></EndProgress>\r\n                )\r\n\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div>\r\n            {data()}\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default Progress\r\n","import React, {useState} from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport styles from '../style.module.css'\r\n\r\ntype TradingFormProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n}\r\n\r\nconst TradingForm: React.FC<TradingFormProps> = ({\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n}) => (\r\n  <>\r\n    <Form>\r\n      {/* <div className={styles.inputContainer}>\r\n      <TextField\r\n        variant=\"filled\"\r\n          label=\"Collateral value\"\r\n          type=\"number\"\r\n          onChange={e => setSelectedAmount(e.target.value)}\r\n          disabled={isMarketClosed}\r\n        />\r\n      </div> */}\r\n      {/* <Form.Group className=\"mb-3\" controlId='amount'>\r\n        <Form.Label>Yaki</Form.Label>\r\n      </Form.Group> */}\r\n\r\n      <Form.Group>\r\n        {/* <Form.Check type=\"checkbox\" label\r\n        <RadioGroup\r\n          defaultValue={0}\r\n          onChange={e => setSelectedOutcomeToken(parseInt(e.target.value))}\r\n          value={selectedOutcomeToken}\r\n        > */}\r\n        <Row className=\"mt-4\">\r\n          <Col sm md={7}>\r\n            <p className=\"text-center\">Trend</p>\r\n          </Col>\r\n          <Col sm md={2}>\r\n            <p>Price(YakID)</p>\r\n          </Col>\r\n          <Col sm md={3}>\r\n            <p>MyShares</p>\r\n          </Col>\r\n\r\n        </Row>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <div\r\n            key={outcome.title}\r\n            className={[\r\n              styles.outcome,\r\n              marketInfo.payoutDenominator > 0 && outcome.payoutNumerator > 0 && styles.rightOutcome,\r\n              marketInfo.payoutDenominator > 0 &&\r\n              !(outcome.payoutNumerator > 0) &&\r\n              styles.wrongOutcome,\r\n            ].join(' ')}\r\n          >\r\n            {/* <FormControlLabel\r\n                value={!isMarketClosed ? outcome.index : 'disabled'}\r\n                control={<Radio color=\"primary\" />}\r\n                label={outcome.title}\r\n              /> */}\r\n            <Row>\r\n              <Col sm md={1}>\r\n                <Form.Check type=\"radio\" id={`checkitem${index}`} name=\"checkitems\" onChange={e => setSelectedOutcomeToken(index)} checked={index == selectedOutcomeToken}>\r\n                </Form.Check>\r\n              </Col>\r\n              <Col sm md={6}>\r\n                <Row className=\"d-inline\">\r\n                  <Form.Label>{outcome.link ? (<a href={outcome.link}>{outcome.title}</a>) : (outcome.title)}</Form.Label>\r\n                </Row>\r\n                <Row>\r\n                  <ProgressBar className=\"pl-0 ml-0\" variant=\"custom\" now={parseFloat(outcome.probability.toString()) * 100} label={`${(parseFloat(outcome.probability.toString()) * 100).toFixed(2)}%`}></ProgressBar>\r\n                </Row>\r\n              </Col>\r\n              <Col sm md={2}>\r\n                <div className={styles.outcomeInfo}>{outcome.probability.toString()}</div>\r\n              </Col>\r\n              <Col sm md={3}>\r\n                <div className={styles.outcomeInfo}>\r\n                  {outcome.balance.toFixed(5).toString()}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ))}\r\n        {/* </RadioGroup> */}\r\n      </Form.Group>\r\n    </Form >\r\n  </>\r\n)\r\n\r\nexport default TradingForm","import React, { useState, useEffect } from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\n\r\ntype BuyingModalProps = {\r\n    buyFunc: any\r\n    approveFunc: any\r\n    setModalShow: any\r\n    modelShow: boolean\r\n    marketInfo: any\r\n    isMarketClosed: boolean\r\n    selectedAmount: string\r\n    setSelectedAmount: any\r\n    calcCost: any\r\n}\r\n\r\nconst BuyingModal: React.FC<BuyingModalProps> = ({\r\n    buyFunc,\r\n    approveFunc,\r\n    setModalShow,\r\n    modelShow,\r\n    marketInfo,\r\n    isMarketClosed,\r\n    selectedAmount,\r\n    setSelectedAmount,\r\n    calcCost\r\n}) => {\r\n\r\n    useEffect(() => {\r\n        updateConstInfo(selectedAmount)\r\n    }, [])\r\n\r\n    const [isEnoughBalance, setIsEnoughBalance] = useState<boolean>(false)\r\n    const [isApproving, setIsApproving] = useState<boolean>(false)\r\n    const [isError, setIsError] = useState<boolean>(false)\r\n    const [errorInfo, setErrorInfo] = useState<string>(\"\")\r\n    const min_buy = 1\r\n    const [costInfo, setCostInfo] = useState<any>({\r\n        baseCost: 0,\r\n        fee: 0,\r\n        potentialProfit: 0,\r\n        total: 0\r\n    })\r\n\r\n\r\n    const buy = () => {\r\n        var buyAmount = parseFloat(selectedAmount)\r\n        var balance = parseFloat(marketInfo.collateralBalance)\r\n        setIsApproving(true)\r\n        buyFunc().then(() => {\r\n            if (balance < buyAmount) {\r\n                setIsEnoughBalance(false)\r\n            }\r\n        }).catch(() => { console.log(\"something is wrong\") })\r\n            .then(() => setIsApproving(false))\r\n    }\r\n\r\n    const approve = async () => {\r\n        var buyAmount = parseFloat(selectedAmount)\r\n        var balance = parseFloat(marketInfo.collateralBalance)\r\n        if (balance >= buyAmount) {\r\n            console.log('bigger')\r\n            setIsEnoughBalance(true)\r\n        } else {\r\n            console.log('approving')\r\n            setIsApproving(true)\r\n            approveFunc()\r\n                .then(() => setIsEnoughBalance(true), () => setIsEnoughBalance(false))\r\n                .catch(() => { console.log(\"something is wrong\") })\r\n                .then(() => setIsApproving(false))\r\n        }\r\n        console.log('isApproving :' + isApproving)\r\n        console.log('balance :' + balance)\r\n        console.log('buyAmount : ' + buyAmount)\r\n\r\n    }\r\n\r\n\r\n    const updateConstInfo = async (parms: string) => {\r\n        if (parms != \"\") {\r\n            const cost = await calcCost(parms)\r\n\r\n            const costInfoDic = {\r\n                baseCost: cost,\r\n                fee: 0,\r\n                potentialProfit: parseFloat(parms) - parseFloat(cost),\r\n                total: parms\r\n            }\r\n\r\n            setCostInfo(costInfoDic)\r\n\r\n            console.log(costInfo)\r\n        }\r\n\r\n    }\r\n\r\n    const checkInput = async (e: any) => {\r\n        var value = e.target.value\r\n        value = parseFloat(value)\r\n\r\n        if (value < min_buy) {\r\n            setIsError(true)\r\n            setErrorInfo(`The output share should bigger than ${min_buy}`)\r\n        } else {\r\n            setIsError(false)\r\n            setSelectedAmount(e.target.value)\r\n            updateConstInfo(e.target.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n\r\n                <Modal.Body>\r\n                    {/* <p>Modal body text goes here.</p> */}\r\n                    <Row>\r\n                        <Col md={5}>\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n                                <Form.Label>Approved Tokens</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"number\" readOnly value={marketInfo.collateralBalance} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Output Shares</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"number\" placeholder=\"Enter output shares \" onChange={e => checkInput(e)} value={selectedAmount} readOnly={isApproving} />\r\n                                    <InputGroup.Text>Shares</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={7}>\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n\r\n                                <Form.Label>Base Cost</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={`${costInfo.baseCost}`} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Fee</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control placeholder=\"Enter output shares \" readOnly value={`${costInfo.fee}`} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n                                <Form.Label>Potential Profit</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={`${costInfo.potentialProfit}`} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Total</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={`${costInfo.total}`} />\r\n                                    <InputGroup.Text>Shares</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <div className={isError ? ('d-block') : ('d-none')}>\r\n                            <span>{errorInfo}</span>\r\n                        </div>\r\n                        <div className={isApproving ? ('d-block') : ('d-none')}>\r\n                            <Spinner as=\"span\" animation=\"border\" role=\"status\">\r\n                            </Spinner>\r\n                            <span>Executing... Please dont close this window</span>\r\n                        </div>\r\n                    </Row>\r\n                </Modal.Body>\r\n\r\n\r\n                <Modal.Footer className=\"d-flex justify-content-between\">\r\n                    <Button variant=\"secondary\" onClick={() => { approve() }} className={isEnoughBalance ? ('d-none') : ('d-block')} disabled={isApproving}>Approve</Button>\r\n\r\n                    <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n                    <Button variant=\"primary\" onClick={buy} className={isEnoughBalance ? ('d-block') : ('d-none')} disabled={isApproving}>Buy</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default BuyingModal","import React, { useState, useEffect } from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\n\r\ntype SellingModalProps = {\r\n    sellFunc: any\r\n    setModalShow: any\r\n    modelShow: boolean\r\n    marketInfo: any\r\n    isMarketClosed: boolean\r\n    selectedAmount: string\r\n    setSelectedAmount: any\r\n    calcCost: any\r\n    selectedOutcomeToken: number\r\n}\r\n\r\n\r\nconst SellingModal: React.FC<SellingModalProps> = ({\r\n    sellFunc,\r\n    setModalShow,\r\n    modelShow,\r\n    marketInfo,\r\n    isMarketClosed,\r\n    selectedAmount,\r\n    setSelectedAmount,\r\n    calcCost,\r\n    selectedOutcomeToken\r\n}) => {\r\n    const [isExecuting, setIsExecuting] = useState<boolean>(false)\r\n    const [isError, setIsError] = useState<boolean>(false)\r\n    const [errorInfo, setErrorInfo] = useState<string>(\"\")\r\n    const [costInfo, setCostInfo] = useState<any>({\r\n        baseCost: 0,\r\n        fee: 0,\r\n        total: 0\r\n    })\r\n    const min_buy = 1\r\n        useEffect(() => {\r\n        updateConstInfo(selectedAmount)\r\n    }, [])\r\n\r\n    const sell = () => {\r\n        var buyAmount = parseFloat(selectedAmount)\r\n        var balance = parseFloat(marketInfo.collateralBalance)\r\n        setIsExecuting(true)\r\n        sellFunc().then(\r\n            ()=>{console.log('selling')}).catch(() => {console.log('something wrong')}).then(() => setIsExecuting(false))\r\n    }\r\n\r\n    const updateConstInfo = async (parms: string) => {\r\n        if (parms != \"\") {\r\n            const cost = await calcCost(parms)\r\n\r\n            const costInfoDic = {\r\n                baseCost: parms,\r\n                fee: 0,\r\n                total: cost\r\n            }\r\n\r\n            setCostInfo(costInfoDic)\r\n\r\n            console.log(costInfo)\r\n        }\r\n\r\n    }\r\n    const checkInput = async (e: any) => {\r\n        var value = e.target.value\r\n        value = parseFloat(value)\r\n\r\n        if (value < min_buy) {\r\n            setIsError(true)\r\n            setErrorInfo(`The output share should bigger than ${min_buy}`)\r\n        } else {\r\n            setIsError(false)\r\n            setSelectedAmount(e.target.value)\r\n            updateConstInfo(e.target.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n\r\n                <Modal.Body>\r\n                    {/* <p>Modal body text goes here.</p> */}\r\n                    <Row>\r\n                        <Col md={5}>\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n                                <Form.Label>Shell Balance</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"number\" readOnly value={marketInfo.outcomes[selectedOutcomeToken].balance.toFixed(2).toString()} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Sell Shares</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"number\" placeholder=\"Enter output shares \" onChange={e => checkInput(e)} value={selectedAmount} readOnly={isExecuting} />\r\n                                    <InputGroup.Text>Shares</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={7}>\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n\r\n                                <Form.Label>Base Cost</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={`${costInfo.baseCost}`} />\r\n                                    <InputGroup.Text>Shares</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Fee</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control placeholder=\"Enter output shares \" readOnly value={`${costInfo.fee}`} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Total</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={`${costInfo.total}`} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <div className={isError ? ('d-block') : ('d-none')}>\r\n                            <span>{errorInfo}</span>\r\n                        </div>\r\n                        <div className={isExecuting ? ('d-block') : ('d-none')}>\r\n                            <Spinner as=\"span\" animation=\"border\" role=\"status\">\r\n                            </Spinner>\r\n                            <span>Executing... Please dont close this window</span>\r\n                        </div>\r\n                    </Row>\r\n                </Modal.Body>\r\n\r\n\r\n                <Modal.Footer className=\"d-flex justify-content-between\">\r\n                    <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n                    <Button variant=\"primary\" onClick={sell} disabled={isExecuting}>Sell</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SellingModal","import React, { useState, useEffect } from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner, Table } from \"react-bootstrap\"\r\n\r\ntype RedeemModalProps = {\r\n    redeemFunc: any\r\n    setModalShow: any\r\n    modelShow: boolean\r\n    marketInfo: any\r\n}\r\n\r\nconst RedeemModal: React.FC<RedeemModalProps> = ({\r\n    redeemFunc,\r\n    setModalShow,\r\n    modelShow,\r\n    marketInfo\r\n}) => {\r\n    const [isExecuting, setIsExecuting] = useState<boolean>(false)\r\n\r\n    const redeem = () => {\r\n        setIsExecuting(true)\r\n        redeemFunc().then(() => {\r\n            console.log('redeeming')\r\n        }).catch(\r\n            () => {\r\n                console.log('something is wrong')\r\n            }\r\n        ).then(() => setIsExecuting(false))\r\n    }\r\n\r\n    const computeTotal = () => {\r\n        let total = 0\r\n        let den = parseFloat(marketInfo.payoutDenominator.toString())\r\n        for (let i = 0; i < marketInfo.outcomes.length; i++) {\r\n            let outcome = marketInfo.outcomes[i]\r\n            let numerator = parseFloat(outcome.payoutNumerator.toString())\r\n            let balance = parseFloat(outcome.balance.toFixed(5).toString())\r\n            total = total + (numerator / den) * balance\r\n        }\r\n        return total.toFixed(2)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n                <Modal.Body>\r\n                    <Row>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Choice</th>\r\n                                    <th>Payouts</th>\r\n                                    <th>Balances</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n\r\n                                    marketInfo.outcomes.map((outcome: any, index: number) => (\r\n                                        <tr>\r\n                                            <td>{index}</td>\r\n                                            <td>{outcome.payoutNumerator.toString() != '0' ? (`${outcome.payoutNumerator.toString()} / ${marketInfo.payoutDenominator.toString()}`) : (`${outcome.payoutNumerator.toString()}`)} YAKID/Share</td>\r\n                                            <td>{outcome.balance.toFixed(2).toString()} Shares</td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Row>\r\n                    <Row>\r\n                                <p>In total: {computeTotal()} YAKID</p>\r\n                    </Row>\r\n                    <Row>\r\n                        <div className={isExecuting ? ('d-block') : ('d-none')}>\r\n                            <Spinner as=\"span\" animation=\"border\" role=\"status\">\r\n                            </Spinner>\r\n                            <span>Executing... Please dont close this window</span>\r\n                        </div>\r\n                    </Row>\r\n\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer className=\"d-flex justify-content-between\">\r\n                    <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n                    <Button variant=\"primary\" onClick={redeem} disabled={isExecuting}>Redeem</Button>\r\n                </Modal.Footer>\r\n\r\n            </Modal>\r\n\r\n        </>)\r\n}\r\n\r\nexport default RedeemModal","import React, { useState } from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport styles from '../style.module.css'\r\nimport BuyingModal from 'src/components/Market/BuyModel'\r\nimport TradingModal from './TradingModel'\r\nimport SellingModal from 'src/components/Market/SellModel'\r\nimport RedeemModal from 'src/components/Market/RedeemModel'\r\n\r\ntype TraderActionsProps = {\r\n    marketInfo: any\r\n    isMarketClosed: boolean\r\n    selectedAmount: string\r\n    redeem: any\r\n    approve: any\r\n    buy: any\r\n    sell: any\r\n    setSelectedAmount: any\r\n    calcCost: any\r\n    selectedOutcomeToken: number\r\n}\r\n\r\nconst TraderActions: React.FC<TraderActionsProps> = ({\r\n    marketInfo,\r\n    isMarketClosed,\r\n    selectedAmount,\r\n    redeem,\r\n    approve,\r\n    buy,\r\n    sell,\r\n    setSelectedAmount,\r\n    calcCost,\r\n    selectedOutcomeToken\r\n}) => {\r\n    const [buyShow, setBuyShow] = useState(false)\r\n    const [sellShow, setSellShow] = useState(false)\r\n    const [redeemShow, setRedeemShow] = useState(false)\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.actions}>\r\n                <Button\r\n                    variant=\"outline-dark\"\r\n                    onClick={() => setRedeemShow(true)}\r\n                    // onClick={redeem}\r\n                    disabled={!isMarketClosed || !marketInfo.payoutDenominator}\r\n                    className=\"align-self-start\"\r\n                >\r\n                    Redeem\r\n                </Button>\r\n                <Button variant=\"outline-dark\"\r\n                    onClick={() => setBuyShow(true)}\r\n                    // onClick={buy} \r\n                    disabled={isMarketClosed}\r\n                    className=\"justify-content-end\"\r\n                >\r\n                    Buy\r\n                </Button>\r\n                <Button variant=\"outline-dark\"\r\n                    onClick={() => setSellShow(true)}\r\n                    // onClick={sell}\r\n                    disabled={isMarketClosed}\r\n                    className=\"justify-content-start\"\r\n                >\r\n                    Sell\r\n                </Button>\r\n\r\n                <BuyingModal buyFunc={buy} approveFunc={approve} modelShow={buyShow}\r\n                    setModalShow={setBuyShow}\r\n                    marketInfo={marketInfo}\r\n                    isMarketClosed={isMarketClosed}\r\n                    selectedAmount={selectedAmount}\r\n                    setSelectedAmount={setSelectedAmount}\r\n                    calcCost={calcCost}\r\n                >\r\n                </BuyingModal>\r\n\r\n                <SellingModal sellFunc={sell} modelShow={sellShow} setModalShow={setSellShow}\r\n                    marketInfo={marketInfo}\r\n                    isMarketClosed={isMarketClosed}\r\n                    selectedAmount={selectedAmount}\r\n                    setSelectedAmount={setSelectedAmount}\r\n                    calcCost={calcCost}\r\n                    selectedOutcomeToken={selectedOutcomeToken}\r\n                ></SellingModal>\r\n                <RedeemModal redeemFunc={redeem} modelShow={redeemShow} setModalShow={setRedeemShow}\r\n                    marketInfo={marketInfo}\r\n                ></RedeemModal>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TraderActions","import React from 'react'\r\n// import { Paper, Button, TextField, RadioGroup, FormControlLabel, Radio} from '@material-ui/core'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport { Link, NavLink } from 'react-router-dom'\r\n\r\nimport styles from '../style.module.css'\r\nimport { useState, useEffect } from \"react\"\r\n//@ts-ignore\r\nimport Progress from 'src/components/Market/Progress'\r\nimport SpinnerPage from 'src/components/SpinnerPage'\r\nimport TradingForm from './TradingForm'\r\nimport TraderActions from './TradingActions'\r\n\r\n\r\ntype OperatorActionsProps = {\r\n  isMarketClosed: boolean\r\n  close: any\r\n}\r\n\r\ntype OracleActionsProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  resolve: any\r\n}\r\n\r\n\r\n\r\n\r\ntype LayoutProps = {\r\n  account: string\r\n  isConditionLoaded: boolean\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  selectedAmount: string\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n  approve: any\r\n  buy: any\r\n  sell: any\r\n  redeem: any\r\n  close: any\r\n  resolve: any\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n  calcCost: any\r\n}\r\n\r\n\r\nconst OperatorActions: React.FC<OperatorActionsProps> = ({ isMarketClosed, close }) => (\r\n  <>\r\n    <h3>Operator actions:</h3>\r\n    <Button variant=\"danger\" onClick={close} disabled={isMarketClosed}>\r\n      Close\r\n    </Button>\r\n  </>\r\n)\r\n\r\nconst OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => {\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(marketInfo.outcomes.length).fill(false)\r\n  );\r\n\r\n  const handleOnChange = (position: any) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Oracle actions:</h3>\r\n      <div>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <li key={index}>\r\n            <input\r\n              type=\"checkbox\"\r\n              id={`custom-checkbox-${index}`}\r\n              name={outcome.short}\r\n              value={outcome.title}\r\n              checked={checkedState[index]}\r\n              onChange={() => handleOnChange(index)}\r\n            />\r\n            <label htmlFor={`custom-checkbox-${index}`}> {outcome.title} </label>\r\n          </li>\r\n        ))}\r\n        <Button\r\n          onClick={() => resolve(checkedState)}\r\n          variant=\"contained\"\r\n          disabled={!isMarketClosed}\r\n        >Resolve</Button>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst Layout: React.FC<LayoutProps> = ({\r\n  account,\r\n  isConditionLoaded,\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  selectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n  approve,\r\n  buy,\r\n  sell,\r\n  redeem,\r\n  close,\r\n  resolve,\r\n  oracle,\r\n  creator,\r\n  createTime,\r\n  calcCost\r\n}) => {\r\n\r\n  console.log(marketInfo)\r\n  var stage1_duration\r\n  var stage2_duration\r\n  if (marketInfo && marketInfo.closeDelay) {\r\n    stage1_duration = parseInt(marketInfo.closeDelay)\r\n\r\n  } else {\r\n    stage1_duration = marketInfo && marketInfo.questionType == 0 ? (4) : (3)\r\n  }\r\n\r\n  if (marketInfo && marketInfo.resolveDelay) {\r\n    stage2_duration = parseInt(marketInfo.resolveDelay)\r\n  } else {\r\n    stage2_duration = marketInfo && marketInfo.questionType == 0 ? (7) : (4)\r\n  }\r\n\r\n\r\n  var d = createTime\r\n\r\n  let nowDate: Date = new Date(Date.now())\r\n  var diff = nowDate.getTime() - d.getTime();\r\n  diff = diff > 0 ? diff : 0;\r\n  var diffDays = Math.ceil(diff / (1000 * 3600 * 24)) - 1;\r\n  var stage = isMarketClosed ? 1 : 0\r\n  console.log(stage)\r\n\r\n  if (isMarketClosed && marketInfo.payoutDenominator) {\r\n    stage = 2\r\n  }\r\n\r\n  var nowProgress\r\n  if (stage == 1) {\r\n    diffDays = diffDays - stage1_duration\r\n    diffDays = diffDays > 0 ? diffDays : 0\r\n    console.log('diffdays' + diffDays)\r\n    nowProgress = (diffDays / stage2_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration + stage2_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage2_duration + stage2_duration - diffDays\r\n\r\n  } else {\r\n    console.log('diffdays' + diffDays)\r\n    console.log('duration' + stage1_duration)\r\n\r\n    nowProgress = (diffDays / stage1_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage1_duration - diffDays\r\n\r\n  }\r\n  console.log(nowProgress)\r\n  console.log(stage)\r\n  console.log(oracle)\r\n\r\n  return (\r\n    <Container className={[styles.conditon].join(' ')}>\r\n      {isConditionLoaded ? (\r\n        <>\r\n          <Row className=\"justify-content-md-center mt-5\">\r\n            <Col xs sm lg=\"6\">\r\n              <Row>\r\n                <h2 className=\"text-center mb-5\">{marketInfo.title}</h2>\r\n              </Row>\r\n              <Row className=\"mt-2 pt-4 bg-transparent border border-primary\">\r\n                <Row>\r\n                  <Progress now={nowProgress} stage={stage}></Progress>\r\n                </Row>\r\n                <Row>\r\n\r\n                  <Col sm md={3} className=\"justify-content-md-center\">\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.funding}k Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Liqudity</p>\r\n                  </Col>\r\n                  <Col sm md={3}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.totalVolume}k Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Total Volume</p>\r\n\r\n                  </Col>\r\n                  <Col sm md={4}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {startDate} </strong></p>\r\n                    <p className=\"mt-0 text-center\">{stage == 0 ? (`Closing Date`) : (`Resolving Date`)}</p>\r\n                  </Col>\r\n                  <Col sm md={2}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {remainDays} days </strong></p>\r\n                    <p className=\"mt-0 text-center\">Remaining</p>\r\n                  </Col>\r\n\r\n                </Row>\r\n              </Row>\r\n              <Row className=\"mt-2 bg-transparent border border-primary\">\r\n                <TradingForm\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                  setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n                  selectedOutcomeToken={selectedOutcomeToken}\r\n                />\r\n              </Row>\r\n              <Row className=\"justify-content-end\">\r\n                <TraderActions\r\n                  marketInfo={marketInfo}\r\n                  isMarketClosed={isMarketClosed}\r\n                  selectedAmount={selectedAmount}\r\n                  redeem={redeem}\r\n                  approve={approve}\r\n                  buy={buy}\r\n                  sell={sell}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                  calcCost={calcCost}\r\n                  selectedOutcomeToken={selectedOutcomeToken}\r\n                />\r\n              </Row>\r\n              {account && account.toLowerCase() === creator && (\r\n                <OperatorActions isMarketClosed={isMarketClosed} close={close} />\r\n              )}\r\n              {account && account.toLowerCase() === oracle && (\r\n                <OracleActions\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  resolve={resolve}\r\n                />\r\n              )}\r\n            </Col>\r\n          </Row>\r\n\r\n        </>\r\n      ) : (\r\n        <div>\r\n          <SpinnerPage />\r\n        </div>\r\n      )}\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import ConditionalTokensRepo from './ConditionalTokensRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet conditionalTokensRepo: ConditionalTokensRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetConditionalTokensRepo = () => {\r\n  conditionalTokensRepo = undefined\r\n}\r\n\r\nconst loadConditionalTokensRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetConditionalTokensRepo()\r\n    }\r\n    if (!conditionalTokensRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      conditionalTokensRepo = new ConditionalTokensRepo(contracts)\r\n    }\r\n    return conditionalTokensRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadConditionalTokensRepo\r\n","const assert = require('assert')\r\n\r\nclass ConditionalTokensRepo {\r\n  conditionalTokens: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.conditionalTokens = contracts.conditionalTokens\r\n  }\r\n\r\n  balanceOf = async (account: string, positionId: number) => {\r\n    return this.conditionalTokens.balanceOf(account, positionId)\r\n  }\r\n\r\n  getOutcomeSlotCount = async (id: string) => {\r\n    return this.conditionalTokens.getOutcomeSlotCount(id)\r\n  }\r\n\r\n  getCollectionId = async (parentCollectionId: string, conditionId: string, indexSet: number[]) => {\r\n    return this.conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet)\r\n  }\r\n\r\n  payoutDenominator = async (conditionId: string) => {\r\n    return this.conditionalTokens.payoutDenominator(conditionId)\r\n  }\r\n\r\n  payoutNumerators = async (conditionId: string, outcomeIndex: number) => {\r\n    return this.conditionalTokens.payoutNumerators(conditionId, outcomeIndex)\r\n  }\r\n\r\n  isApprovedForAll = async (account: string, lmsrMarketMakerAddress: string) => {\r\n    return this.conditionalTokens.isApprovedForAll(account, lmsrMarketMakerAddress)\r\n  }\r\n\r\n  setApprovalForAll = async (lmsrMarketMakerAddress: string, approved: boolean, from: string) => {\r\n    return this.conditionalTokens.setApprovalForAll(lmsrMarketMakerAddress, approved, { from })\r\n  }\r\n\r\n  reportPayouts = async (questionId: string, payouts: number[], from: string) => {\r\n    return this.conditionalTokens.reportPayouts(questionId, payouts, { from })\r\n  }\r\n\r\n  redeemPositions = async (\r\n    collateralAddress: string,\r\n    parentCollectionId: string,\r\n    marketConditionId: string,\r\n    indexSets: number[],\r\n    from: string,\r\n  ) => {\r\n    return this.conditionalTokens.redeemPositions(\r\n      collateralAddress,\r\n      parentCollectionId,\r\n      marketConditionId,\r\n      indexSets,\r\n      { from },\r\n    )\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default ConditionalTokensRepo\r\n","import MarketMakersRepo from './MarketMakersRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet marketMakersRepo: MarketMakersRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetMarketMakersRepo = () => {\r\n  marketMakersRepo = undefined\r\n}\r\n\r\nconst loadMarketMakersRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetMarketMakersRepo()\r\n    }\r\n    if (!marketMakersRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      marketMakersRepo = new MarketMakersRepo(contracts)\r\n    }\r\n    return marketMakersRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadMarketMakersRepo\r\n","const assert = require('assert')\r\n\r\nclass MarketMakersRepo {\r\n  lmsrMarketMaker: any\r\n  collateralToken: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.lmsrMarketMaker = contracts.lmsrMarketMaker\r\n    this.collateralToken = contracts.collateralToken\r\n  }\r\n\r\n  getAddress = async () => {\r\n    return this.lmsrMarketMaker.address\r\n  }\r\n\r\n  getCollateralToken = async () => {\r\n    return this.collateralToken\r\n  }\r\n\r\n  conditionIds = async (index: number) => {\r\n    return this.lmsrMarketMaker.conditionIds(index)\r\n  }\r\n\r\n  owner = async () => {\r\n    return this.lmsrMarketMaker.owner()\r\n  }\r\n\r\n  funding = async () => {\r\n    return this.lmsrMarketMaker.funding()\r\n  }\r\n\r\n  stage = async () => {\r\n    return this.lmsrMarketMaker.stage()\r\n  }\r\n\r\n  close = async (from: string) => {\r\n    return this.lmsrMarketMaker.close({ from })\r\n  }\r\n\r\n  calcNetCost = async (outcomeTokenAmounts: number[]) => {\r\n    return this.lmsrMarketMaker.calcNetCost(outcomeTokenAmounts)\r\n  }\r\n\r\n  calcMarginalPrice = async (outcomeIndex: number) => {\r\n    return this.lmsrMarketMaker.calcMarginalPrice(outcomeIndex)\r\n  }\r\n\r\n  trade = async (tradeAmounts: number[], collateralLimit: number, from: string) => {\r\n    return this.lmsrMarketMaker.trade(tradeAmounts, collateralLimit, { from })\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default MarketMakersRepo\r\n","import React, { useState, useEffect } from 'react'\r\nimport loadConditionalTokensRepo from 'src/logic/ConditionalTokens'\r\nimport loadMarketMakersRepo from 'src/logic/MarketMakers'\r\nimport { getConditionId, getPositionId } from 'src/utils/markets'\r\nimport BigNumber from 'bignumber.js'\r\nimport Layout from './Layout'\r\nimport { create } from 'ipfs-http-client'\r\nimport Web3 from 'web3'\r\n// import {web3} from 'web3'\r\nconst bs58 = require('bs58')\r\n\r\nBigNumber.config({ EXPONENTIAL_AT: 50 })\r\n\r\nlet utf8decoder = new TextDecoder()\r\n\r\n// const markets = require('src/conf/config.local.json')\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  lmsrAddress: string\r\n  questionId: string\r\n  outcomeCount: number\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n  questionType: number\r\n}\r\n\r\nenum MarketStage {\r\n  Running = 0,\r\n  Paused = 1,\r\n  Closed = 2,\r\n}\r\n\r\nlet conditionalTokensRepo: any\r\nlet marketMakersRepo: any\r\n\r\nfunction getIpfsHashFromBytes32(bytes32Hex: any) {\r\n  // Add our default ipfs values for first 2 bytes:\r\n  // function:0x12=sha2, size:0x20=256 bits\r\n  // and cut off leading \"0x\"\r\n  const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n  const hashBytes = Buffer.from(hashHex, 'hex');\r\n  const hashStr = bs58.encode(hashBytes)\r\n  return hashStr\r\n}\r\n\r\nconst Market: React.FC<MarketProps> = ({ web3, account, lmsrAddress, questionId, outcomeCount, oracle, creator, createTime, questionType }) => {\r\n  const [isConditionLoaded, setIsConditionLoaded] = useState<boolean>(false)\r\n  const [isEnoughBalance, setIsEnoughBalance] = useState<boolean>(false)\r\n  const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n  const [selectedOutcomeToken, setSelectedOutcomeToken] = useState<number>(0)\r\n  const [marketInfo, setMarketInfo] = useState<any>(undefined)\r\n  //@ts-ignore\r\n  const client = create(process.env.REACT_APP_IPFS_ENDPOINT)\r\n  // const client = create({\r\n  //   host: 'localhost',\r\n  //   port: 5001,\r\n  //   protocol: 'http',\r\n  //   // headers: {\r\n  //   //   authorization: auth\r\n  //   // }\r\n\r\n  // })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        conditionalTokensRepo = await loadConditionalTokensRepo(web3, lmsrAddress, account)\r\n        marketMakersRepo = await loadMarketMakersRepo(web3, lmsrAddress, account)\r\n        await getMarketInfo()\r\n        setIsConditionLoaded(true)\r\n      } catch (err) {\r\n        setIsConditionLoaded(false)\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    init()\r\n  }, [])\r\n\r\n  const getMarketInfo = async () => {\r\n    if (!oracle) return\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const conditionId = getConditionId(\r\n      // process.env.REACT_APP_ORACLE_ADDRESS,\r\n      oracle,\r\n      questionId,\r\n      outcomeCount,\r\n    )\r\n    const payoutDenominator = await conditionalTokensRepo.payoutDenominator(conditionId)\r\n\r\n    // var cid = questionId.slice(0, 46)\r\n    const cid = getIpfsHashFromBytes32(questionId)\r\n    //@ts-ignore\r\n    const stream = client.cat(cid)\r\n    let data = ''\r\n\r\n    for await (const chunk of stream) {\r\n      // data += chunk.toString()\r\n      data += utf8decoder.decode(chunk)\r\n    }\r\n    console.log(data.toString())\r\n\r\n    var markets = JSON.parse(data)\r\n    const funding = await marketMakersRepo.funding()\r\n    const totalSupply = await collateral.contract.totalSupply()\r\n    const collateralBalance = await collateral.contract.allowancePoint(account, lmsrAddress)\r\n\r\n\r\n\r\n    const outcomes = []\r\n    for (let outcomeIndex = 0; outcomeIndex < outcomeCount; outcomeIndex++) {\r\n      const indexSet = (outcomeIndex === 0\r\n        ? 1\r\n        : parseInt(Math.pow(10, outcomeIndex).toString(), 2)\r\n      ).toString()\r\n      const collectionId = await conditionalTokensRepo.getCollectionId(\r\n        `0x${'0'.repeat(64)}`,\r\n        conditionId,\r\n        indexSet,\r\n      )\r\n      const positionId = getPositionId(collateral.address, collectionId)\r\n      const probability = await marketMakersRepo.calcMarginalPrice(outcomeIndex)\r\n      const balance = await conditionalTokensRepo.balanceOf(account, positionId)\r\n      const payoutNumerator = await conditionalTokensRepo.payoutNumerators(\r\n        conditionId,\r\n        outcomeIndex,\r\n      )\r\n\r\n      const outcome = {\r\n        index: outcomeIndex,\r\n        // title: markets.markets[0].outcomes[outcomeIndex].title,\r\n        title: markets[0].outcomes[outcomeIndex].title,\r\n        link: markets[0].outcomes[outcomeIndex].link,\r\n        probability: new BigNumber(probability)\r\n          .dividedBy(Math.pow(2, 64))\r\n          .toFixed(3),\r\n        // .multipliedBy(100)\r\n        balance: new BigNumber(balance).dividedBy(Math.pow(10, collateral.decimals)),\r\n        payoutNumerator: payoutNumerator,\r\n      }\r\n      console.log(outcome)\r\n      outcomes.push(outcome)\r\n    }\r\n\r\n    const marketData = {\r\n      lmsrAddress: lmsrAddress,\r\n      title: markets[0].title,\r\n      link: markets[0].link,\r\n      outcomes,\r\n      stage: MarketStage[await marketMakersRepo.stage()],\r\n      questionId: questionId,\r\n      conditionId: conditionId,\r\n      payoutDenominator: payoutDenominator,\r\n      funding: new BigNumber(funding).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      totalVolume: new BigNumber(totalSupply).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      collateralBalance: new BigNumber(collateralBalance).dividedBy(Math.pow(10, collateral.decimals)).toFixed(2),\r\n      questionType: questionType,\r\n      closeDelay: markets[0].closeDelay,\r\n      resolveDelay: markets[0].resolveDelay\r\n    }\r\n\r\n    setMarketInfo(marketData)\r\n  }\r\n\r\n  const approve = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // ).toString()\r\n    // const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n    // const formatedAmount = Web3.utils.toBN(String(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)))\r\n    var amount = parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    const collateralBalance = await collateral.contract.allowancePoint(account, marketInfo.lmsrAddress)\r\n\r\n    if (cost.gt(collateralBalance)) {\r\n      // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n      await collateral.contract.approvePoint(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n        from: account,\r\n      })\r\n      setIsEnoughBalance(true)\r\n    } else {\r\n      setIsEnoughBalance(true)\r\n    }\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const buy = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // ).toString()\r\n    // const formatedAmount = Web3.utils.toBN(String(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)))\r\n    var amount = parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    // const collateralBalance = await collateral.contract.allowancePoint(account, marketInfo.lmsrAddress)\r\n    // if (cost.gt(collateralBalance)) {\r\n    //   // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n    //   await collateral.contract.approvePoint(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n    //     from: account,\r\n    //   })\r\n    // }\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, cost, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const calcCost = async (parms: string) => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // console.log(selectedAmount)\r\n    var amount = parseFloat(parms) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n    return  new BigNumber(cost).dividedBy(Math.pow(10, collateral.decimals)).toFixed(2)\r\n  }\r\n\r\n  const sell = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // )\r\n    // const formatedAmount = Web3.utils.toBN(0).sub(\r\n    // Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals))))\r\n\r\n    // const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n\r\n    // const formatedAmount = Web3.utils.toBN(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals))\r\n    // const formatedAmount = Web3.utils.toBN(String(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)))\r\n    var amount = parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n\r\n\r\n\r\n    const isApproved = await conditionalTokensRepo.isApprovedForAll(account, marketInfo.lmsrAddress)\r\n    if (!isApproved) {\r\n      await conditionalTokensRepo.setApprovalForAll(marketInfo.lmsrAddress, true, account)\r\n    }\r\n\r\n    const outcomeTokenAmounts = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === selectedOutcomeToken ? formatedAmount.neg() : Web3.utils.toBN(0),\r\n    )\r\n    const profit = (await marketMakersRepo.calcNetCost(outcomeTokenAmounts)).neg()\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, profit, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const redeem = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n\r\n    const indexSets = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === 0 ? 1 : parseInt(Math.pow(10, i).toString(), 2),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.redeemPositions(\r\n      collateral.address,\r\n      `0x${'0'.repeat(64)}`,\r\n      marketInfo.conditionId,\r\n      indexSets,\r\n      account,\r\n    )\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const close = async () => {\r\n    const tx = await marketMakersRepo.close(account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const resolve = async (resolutionOutcomeIndex: Array<Boolean>) => {\r\n    // const payouts = Array.from(\r\n    //   { length: marketInfo.outcomes.length },\r\n    //   (value: any, index: number) => (index === resolutionOutcomeIndex ? 1 : 0),\r\n    // )\r\n    const payouts = Array.from(\r\n      resolutionOutcomeIndex, (value: any, index: number) => (value === true ? 1 : 0),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.reportPayouts(marketInfo.questionId, payouts, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const isMarketClosed =\r\n    isConditionLoaded && MarketStage[marketInfo.stage].toString() === MarketStage.Closed.toString()\r\n  return (\r\n    <Layout\r\n      account={account}\r\n      isConditionLoaded={isConditionLoaded}\r\n      isMarketClosed={isMarketClosed}\r\n      marketInfo={marketInfo}\r\n      setSelectedAmount={setSelectedAmount}\r\n      selectedAmount={selectedAmount}\r\n      setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n      selectedOutcomeToken={selectedOutcomeToken}\r\n      approve={approve}\r\n      buy={buy}\r\n      sell={sell}\r\n      redeem={redeem}\r\n      close={close}\r\n      resolve={resolve}\r\n      oracle={oracle}\r\n      creator={creator}\r\n      createTime={createTime}\r\n      calcCost = {calcCost}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Market\r\n"],"sourceRoot":""}