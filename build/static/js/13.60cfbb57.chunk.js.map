{"version":3,"sources":["components/MarketPage/CurrentMarket.tsx","logic/contracts.ts","utils/markets.ts","logic/ConditionalTokens/index.ts","logic/ConditionalTokens/ConditionalTokensRepo.ts","logic/MarketMakers/index.ts","logic/MarketMakers/MarketMakersRepo.ts","components/Market/Progress.tsx","components/Market/Layout.tsx","components/Market/index.tsx"],"names":["CurrentMarket","web3","account","MARKET_QUERY","gql","useQuery","fetchPolicy","loading","error","data","refetch","console","log","lmsrmarketMakers","lmsrmarketMaker","d","Date","now","parseInt","creationTimestamp","lmsrAddress","id","questionId","outcomeCount","outcomeSlotCount","oracle","creator","createTime","className","CurrentMarketProvider","client","ApolloClient","uri","process","cache","InMemoryCache","contracts","lmsrAddressCache","providerAccountCache","TruffleContract","require","loadLMSRMarketMakerContract","a","lmsrMarketMakerContract","LMSRMarketMaker","setProvider","currentProvider","loadConditionalTokensContract","conditionalTokensContract","ConditionalTokens","loadWETH9Contract","weth9Contract","YAKI","loadContracts","undefined","LMSRMarketMakerContract","ConditionalTokensContract","WETH9Contract","at","lmsrMarketMaker","pmSystem","conditionalTokens","collateralToken","address","contract","name","decimals","symbol","getConditionId","oracleAddress","Web3","utils","soliditySha3","t","v","getPositionId","collectionId","conditionalTokensRepo","assert","ConditionalTokensRepo","balanceOf","positionId","getOutcomeSlotCount","getCollectionId","parentCollectionId","conditionId","indexSet","payoutDenominator","payoutNumerators","outcomeIndex","isApprovedForAll","lmsrMarketMakerAddress","setApprovalForAll","approved","from","reportPayouts","payouts","redeemPositions","collateralAddress","marketConditionId","indexSets","this","loadConditionalTokensRepo","marketMakersRepo","MarketMakersRepo","getAddress","getCollateralToken","conditionIds","index","owner","funding","stage","close","calcNetCost","outcomeTokenAmounts","calcMarginalPrice","trade","tradeAmounts","collateralLimit","loadMarketMakersRepo","CloseProgress","Container","fluid","Row","Col","md","styles","circleRed","ProgressBar","label","circleGray","ResolveProgress","EndProgress","Progress","useState","TradingForm","isMarketClosed","marketInfo","setSelectedOutcomeToken","setSelectedAmount","selectedOutcomeToken","Form","Group","outcomes","map","outcome","payoutNumerator","rightOutcome","wrongOutcome","join","Check","type","onChange","e","Label","title","parseFloat","probability","toString","outcomeInfo","balance","toFixed","TradingModal","action","actionFunc","setModalShow","modelShow","selectedAmount","Modal","show","onHide","Header","closeButton","Title","Body","controlId","Control","placeholder","target","value","Footer","Button","variant","onClick","disabled","isDisabled","TraderActions","redeem","buy","sell","buyShow","setBuyShow","sellShow","setSellShow","redeemShow","setRedeemShow","actions","OperatorActions","OracleActions","resolve","Array","length","fill","checkedState","setCheckedState","short","checked","position","updatedCheckedState","item","handleOnChange","htmlFor","Layout","isConditionLoaded","startDate","getFullYear","getMonth","getDate","getHours","getMinutes","diff","getTime","diffDays","Math","ceil","nowProgress","conditon","xs","lg","totalVolume","toLowerCase","bs58","BigNumber","config","EXPONENTIAL_AT","MarketStage","utf8decoder","TextDecoder","getIpfsHashFromBytes32","bytes32Hex","hashHex","slice","hashBytes","Buffer","encode","Market","setIsConditionLoaded","setMarketInfo","create","useEffect","getMarketInfo","init","collateral","cid","stream","cat","chunk","decode","markets","JSON","parse","totalSupply","pow","repeat","dividedBy","push","marketData","formatedAmount","toBN","mul","cost","allowancePoint","collateralBalance","gt","approvePoint","tx","i","neg","profit","resolutionOutcomeIndex","Closed"],"mappings":"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","file":"static/js/13.60cfbb57.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\nimport { useParams } from 'react-router-dom';\r\nimport MarketLayout from './MarketLayout'\r\n// const Market = lazy(() => import('src/components/Market/index'))\r\nimport Market from 'src/components/Market'\r\n\r\n\r\n\r\ntype MarketProviderProps = {\r\n    web3: any\r\n    account: string\r\n}\r\n\r\n\r\nconst CurrentMarketProvider: React.FC<MarketProviderProps> = ({ web3, account }) => {\r\n\r\n    //@ts-ignore\r\n    // let { address } = useParams();\r\n\r\n    //@ts-ignore\r\n    const client = new ApolloClient({\r\n        uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n        // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n        cache: new InMemoryCache()\r\n    });\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            {account && web3 ? (\r\n                <CurrentMarket web3={web3} account={account}></CurrentMarket>) : (\r\n                <div> Connect your account first </div>\r\n            )\r\n            }\r\n        </ApolloProvider>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nconst CurrentMarket: React.FC<MarketProviderProps> = ({ web3, account }) => {\r\n\r\n    const MARKET_QUERY = gql`\r\n    query lsmrMarkets($id: String) {\r\n        lmsrmarketMakers(orderBy: creationTimestamp, orderDirection: desc, first:1, where:{questionType: 0}) {\r\n          id\r\n          creator\r\n          creationTimestamp\r\n          collateralToken\r\n          conditions {\r\n            id\r\n            oracle\r\n            questionId\r\n            outcomeSlotCount\r\n          }\r\n          funding\r\n          fee\r\n          condition {\r\n            id\r\n          }\r\n          oracle\r\n          questionId\r\n          outcomeSlotCount\r\n        }\r\n   }\r\n  `\r\n    const { loading, error, data, refetch } = useQuery(MARKET_QUERY, {\r\n        fetchPolicy: \"no-cache\"\r\n    }\r\n    )\r\n\r\n    if (loading) return <p>Loading...</p>\r\n\r\n    if (error) return <p>Error :</p>\r\n\r\n    console.log(data.lmsrmarketMakers)\r\n\r\n    const lmsrmarketMaker = data.lmsrmarketMakers[0]\r\n    let d: Date = new Date(Date.now())\r\n    if (lmsrmarketMaker) {\r\n        d = new Date(parseInt(lmsrmarketMaker.creationTimestamp) * 1000);\r\n    }\r\n    // let d: Date = new Date(parseInt(lmsrmarketMaker.creationTimestamp) * 1000);  \r\n    // var datestring = d.getDate()  + \"-\" + (d.getMonth()+1) + \"-\" + d.getFullYear() + \" \" +d.getHours() + \":\" + d.getMinutes()\r\n    // console.log(datestring)\r\n    // console.trace()\r\n\r\n    return (\r\n        <>\r\n            {lmsrmarketMaker ? (\r\n                <>\r\n                    <Market\r\n                        web3={web3}\r\n                        account={account}\r\n                        lmsrAddress={lmsrmarketMaker.id}\r\n                        questionId={lmsrmarketMaker.questionId}\r\n                        outcomeCount={lmsrmarketMaker.outcomeSlotCount}\r\n                        oracle={lmsrmarketMaker.oracle}\r\n                        creator={lmsrmarketMaker.creator}\r\n                        createTime={d} />\r\n                </>\r\n            ) : (\r\n                <h1 className=\"text-center\">No data found</h1>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CurrentMarketProvider","import ConditionalTokens from '../abi/ConditionalTokens.json'\r\nimport LMSRMarketMaker from '../abi/LMSRMarketMaker.json'\r\nimport YAKI from '../abi/YAKIID.json'\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet contracts: Object | undefined\r\nlet lmsrAddressCache: string | undefined\r\nlet providerAccountCache: string | undefined\r\n\r\nconst resetContracts = () => {\r\n  contracts = undefined\r\n  lmsrAddressCache = undefined\r\n  providerAccountCache = undefined\r\n}\r\n\r\nconst loadLMSRMarketMakerContract = async (web3: any) => {\r\n  let lmsrMarketMakerContract\r\n  if (!contracts) {\r\n    lmsrMarketMakerContract = TruffleContract(LMSRMarketMaker)\r\n    lmsrMarketMakerContract.setProvider(web3.currentProvider)\r\n  }\r\n  return lmsrMarketMakerContract\r\n}\r\n\r\nconst loadConditionalTokensContract = async (web3: any) => {\r\n  let conditionalTokensContract\r\n  if (!contracts) {\r\n    conditionalTokensContract = TruffleContract(ConditionalTokens)\r\n    conditionalTokensContract.setProvider(web3.currentProvider)\r\n  }\r\n  return conditionalTokensContract\r\n}\r\n\r\nconst loadWETH9Contract = async (web3: any) => {\r\n  let weth9Contract\r\n  if (!contracts) {\r\n    // weth9Contract = TruffleContract(WETH9)\r\n    weth9Contract = TruffleContract(YAKI)\r\n    weth9Contract.setProvider(web3.currentProvider)\r\n  }\r\n  return weth9Contract\r\n}\r\n\r\nconst loadContracts = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetContracts()\r\n    }\r\n    if (!contracts) {\r\n      providerAccountCache = account\r\n      lmsrAddressCache = lmsrAddress\r\n\r\n      const LMSRMarketMakerContract = await loadLMSRMarketMakerContract(web3)\r\n      const ConditionalTokensContract = await loadConditionalTokensContract(web3)\r\n      const WETH9Contract = await loadWETH9Contract(web3)\r\n\r\n      const lmsrMarketMaker = await LMSRMarketMakerContract.at(lmsrAddress)\r\n      const conditionalTokens = await ConditionalTokensContract.at(await lmsrMarketMaker.pmSystem())\r\n      const collateralToken = {\r\n        address: await lmsrMarketMaker.collateralToken(),\r\n        contract: await WETH9Contract.at(await lmsrMarketMaker.collateralToken()),\r\n        name: 'YAKI TOKEN',\r\n        decimals: 18,\r\n        symbol: 'YAKI',\r\n      }\r\n\r\n      contracts = { lmsrMarketMaker, conditionalTokens, collateralToken }\r\n    }\r\n    return contracts\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadContracts\r\n","import Web3 from 'web3'\r\n\r\nexport const getConditionId = (\r\n  oracleAddress: string,\r\n  questionId: string,\r\n  outcomeSlotCount: number,\r\n) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: oracleAddress },\r\n    { t: 'bytes32', v: questionId },\r\n    { t: 'uint', v: outcomeSlotCount },\r\n  )\r\n}\r\n\r\nexport const getPositionId = (collateralToken: string, collectionId: string) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: collateralToken },\r\n    { t: 'bytes32', v: collectionId },\r\n  )\r\n}\r\n","import ConditionalTokensRepo from './ConditionalTokensRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet conditionalTokensRepo: ConditionalTokensRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetConditionalTokensRepo = () => {\r\n  conditionalTokensRepo = undefined\r\n}\r\n\r\nconst loadConditionalTokensRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetConditionalTokensRepo()\r\n    }\r\n    if (!conditionalTokensRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      conditionalTokensRepo = new ConditionalTokensRepo(contracts)\r\n    }\r\n    return conditionalTokensRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadConditionalTokensRepo\r\n","const assert = require('assert')\r\n\r\nclass ConditionalTokensRepo {\r\n  conditionalTokens: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.conditionalTokens = contracts.conditionalTokens\r\n  }\r\n\r\n  balanceOf = async (account: string, positionId: number) => {\r\n    return this.conditionalTokens.balanceOf(account, positionId)\r\n  }\r\n\r\n  getOutcomeSlotCount = async (id: string) => {\r\n    return this.conditionalTokens.getOutcomeSlotCount(id)\r\n  }\r\n\r\n  getCollectionId = async (parentCollectionId: string, conditionId: string, indexSet: number[]) => {\r\n    return this.conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet)\r\n  }\r\n\r\n  payoutDenominator = async (conditionId: string) => {\r\n    return this.conditionalTokens.payoutDenominator(conditionId)\r\n  }\r\n\r\n  payoutNumerators = async (conditionId: string, outcomeIndex: number) => {\r\n    return this.conditionalTokens.payoutNumerators(conditionId, outcomeIndex)\r\n  }\r\n\r\n  isApprovedForAll = async (account: string, lmsrMarketMakerAddress: string) => {\r\n    return this.conditionalTokens.isApprovedForAll(account, lmsrMarketMakerAddress)\r\n  }\r\n\r\n  setApprovalForAll = async (lmsrMarketMakerAddress: string, approved: boolean, from: string) => {\r\n    return this.conditionalTokens.setApprovalForAll(lmsrMarketMakerAddress, approved, { from })\r\n  }\r\n\r\n  reportPayouts = async (questionId: string, payouts: number[], from: string) => {\r\n    return this.conditionalTokens.reportPayouts(questionId, payouts, { from })\r\n  }\r\n\r\n  redeemPositions = async (\r\n    collateralAddress: string,\r\n    parentCollectionId: string,\r\n    marketConditionId: string,\r\n    indexSets: number[],\r\n    from: string,\r\n  ) => {\r\n    return this.conditionalTokens.redeemPositions(\r\n      collateralAddress,\r\n      parentCollectionId,\r\n      marketConditionId,\r\n      indexSets,\r\n      { from },\r\n    )\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default ConditionalTokensRepo\r\n","import MarketMakersRepo from './MarketMakersRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet marketMakersRepo: MarketMakersRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetMarketMakersRepo = () => {\r\n  marketMakersRepo = undefined\r\n}\r\n\r\nconst loadMarketMakersRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetMarketMakersRepo()\r\n    }\r\n    if (!marketMakersRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      marketMakersRepo = new MarketMakersRepo(contracts)\r\n    }\r\n    return marketMakersRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadMarketMakersRepo\r\n","const assert = require('assert')\r\n\r\nclass MarketMakersRepo {\r\n  lmsrMarketMaker: any\r\n  collateralToken: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.lmsrMarketMaker = contracts.lmsrMarketMaker\r\n    this.collateralToken = contracts.collateralToken\r\n  }\r\n\r\n  getAddress = async () => {\r\n    return this.lmsrMarketMaker.address\r\n  }\r\n\r\n  getCollateralToken = async () => {\r\n    return this.collateralToken\r\n  }\r\n\r\n  conditionIds = async (index: number) => {\r\n    return this.lmsrMarketMaker.conditionIds(index)\r\n  }\r\n\r\n  owner = async () => {\r\n    return this.lmsrMarketMaker.owner()\r\n  }\r\n\r\n  funding = async () => {\r\n    return this.lmsrMarketMaker.funding()\r\n  }\r\n\r\n  stage = async () => {\r\n    return this.lmsrMarketMaker.stage()\r\n  }\r\n\r\n  close = async (from: string) => {\r\n    return this.lmsrMarketMaker.close({ from })\r\n  }\r\n\r\n  calcNetCost = async (outcomeTokenAmounts: number[]) => {\r\n    return this.lmsrMarketMaker.calcNetCost(outcomeTokenAmounts)\r\n  }\r\n\r\n  calcMarginalPrice = async (outcomeIndex: number) => {\r\n    return this.lmsrMarketMaker.calcMarginalPrice(outcomeIndex)\r\n  }\r\n\r\n  trade = async (tradeAmounts: number[], collateralLimit: number, from: string) => {\r\n    return this.lmsrMarketMaker.trade(tradeAmounts, collateralLimit, { from })\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default MarketMakersRepo\r\n","import React, { useState } from 'react'\r\nimport { Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport styles from 'src/components/style.module.css'\r\n\r\ntype ProgressProperty = {\r\n    now: number\r\n    stage: number\r\n}\r\n\r\ntype StageProperty = {\r\n    now: number\r\n}\r\n\r\nconst CloseProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                        <ProgressBar now={now} label={`${now}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <div className={styles.circleGray}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <ProgressBar now={0} label={`${0}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ResolveProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <ProgressBar now={now} label={`${now}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst EndProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <div className={styles.circleRed}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                    </Col>\r\n                    <Col md={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Progress: React.FC<ProgressProperty> = ({\r\n    now,\r\n    stage\r\n}) => {\r\n\r\n    const [currentStage, setCurrentStage] = useState<number>(0)\r\n\r\n    const data = () => {\r\n        switch (stage) {\r\n            case 0:\r\n                return (\r\n                    <CloseProgress now={now}></CloseProgress>\r\n                )\r\n            case 1:\r\n                return (\r\n                    <ResolveProgress now={now}></ResolveProgress>\r\n                )\r\n            case 2:\r\n                return (\r\n                    <EndProgress now={now}></EndProgress>\r\n                )\r\n\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div>\r\n            {data()}\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default Progress\r\n","import React from 'react'\r\n// import { Paper, Button, TextField, RadioGroup, FormControlLabel, Radio} from '@material-ui/core'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport styles from '../style.module.css'\r\nimport { useState } from \"react\"\r\n//@ts-ignore\r\nimport Progress from 'src/components/Market/Progress'\r\n\r\n\r\ntype TradingFormProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n}\r\n\r\ntype TraderActionsProps = {\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  redeem: any\r\n  buy: any\r\n  sell: any\r\n  setSelectedAmount: any\r\n\r\n}\r\n\r\ntype OperatorActionsProps = {\r\n  isMarketClosed: boolean\r\n  close: any\r\n}\r\n\r\ntype OracleActionsProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  resolve: any\r\n}\r\n\r\ntype TradingModalProps = {\r\n  action: string\r\n  actionFunc: any\r\n  setModalShow: any\r\n  modelShow: boolean\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  setSelectedAmount: any\r\n}\r\n\r\ntype LayoutProps = {\r\n  account: string\r\n  isConditionLoaded: boolean\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  selectedAmount: string\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n  buy: any\r\n  sell: any\r\n  redeem: any\r\n  close: any\r\n  resolve: any\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n}\r\n\r\nconst TradingForm: React.FC<TradingFormProps> = ({\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n}) => (\r\n  <>\r\n    <Form>\r\n      {/* <div className={styles.inputContainer}>\r\n      <TextField\r\n        variant=\"filled\"\r\n          label=\"Collateral value\"\r\n          type=\"number\"\r\n          onChange={e => setSelectedAmount(e.target.value)}\r\n          disabled={isMarketClosed}\r\n        />\r\n      </div> */}\r\n      {/* <Form.Group className=\"mb-3\" controlId='amount'>\r\n        <Form.Label>Yaki</Form.Label>\r\n      </Form.Group> */}\r\n\r\n      <Form.Group>\r\n        {/* <Form.Check type=\"checkbox\" label\r\n        <RadioGroup\r\n          defaultValue={0}\r\n          onChange={e => setSelectedOutcomeToken(parseInt(e.target.value))}\r\n          value={selectedOutcomeToken}\r\n        > */}\r\n        <Row >\r\n          <Col md={1}>\r\n            <p>Trend</p>\r\n          </Col>\r\n          <Col md={6}>\r\n            <p> </p>\r\n          </Col>\r\n          <Col md={2}>\r\n            <p>Price(YakID)</p>\r\n          </Col>\r\n          <Col md={3}>\r\n            <p>MyShares</p>\r\n          </Col>\r\n\r\n        </Row>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <div\r\n            key={outcome.title}\r\n            className={[\r\n              styles.outcome,\r\n              marketInfo.payoutDenominator > 0 && outcome.payoutNumerator > 0 && styles.rightOutcome,\r\n              marketInfo.payoutDenominator > 0 &&\r\n              !(outcome.payoutNumerator > 0) &&\r\n              styles.wrongOutcome,\r\n            ].join(' ')}\r\n          >\r\n            {/* <FormControlLabel\r\n                value={!isMarketClosed ? outcome.index : 'disabled'}\r\n                control={<Radio color=\"primary\" />}\r\n                label={outcome.title}\r\n              /> */}\r\n            <Row>\r\n              <Col md={1}>\r\n                <Form.Check type=\"radio\" id={`checkitem${index}`} name=\"checkitems\" onChange={e => setSelectedOutcomeToken(index)}>\r\n                </Form.Check>\r\n              </Col>\r\n              <Col md={6}>\r\n                <Row className=\"d-inline\">\r\n                  <Form.Label>{outcome.title}</Form.Label>\r\n                </Row>\r\n                <Row>\r\n                  <ProgressBar className=\"pl-0 ml-0\" now={parseFloat(outcome.probability.toString()) * 100} label={`${parseFloat(outcome.probability.toString()) * 100}%`}></ProgressBar>\r\n                </Row>\r\n              </Col>\r\n              <Col md={2}>\r\n                <div className={styles.outcomeInfo}>{outcome.probability.toString()}</div>\r\n              </Col>\r\n              <Col md={3}>\r\n                <div className={styles.outcomeInfo}>\r\n                  {outcome.balance.toFixed(5).toString()}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ))}\r\n        {/* </RadioGroup> */}\r\n      </Form.Group>\r\n    </Form >\r\n  </>\r\n)\r\n\r\nconst TradingModal: React.FC<TradingModalProps> = ({\r\n  action,\r\n  actionFunc,\r\n  setModalShow,\r\n  modelShow,\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  setSelectedAmount\r\n}) => {\r\n  const onFire = () => {\r\n    actionFunc()\r\n    setModalShow(false)\r\n  }\r\n\r\n  const isDisabled = () => {\r\n    switch (action) {\r\n      case \"buy\":\r\n        return isMarketClosed || !selectedAmount\r\n\r\n      case \"sell\":\r\n        return isMarketClosed || !selectedAmount\r\n\r\n      case \"redeem\":\r\n        return !isMarketClosed || !marketInfo.payoutDenominator\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal title</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          {/* <p>Modal body text goes here.</p> */}\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n            <Form.Label>Output Shares</Form.Label>\r\n            <Form.Control type=\"number\" placeholder=\"Enter output shares \" onChange={e => setSelectedAmount(e.target.value)} />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n          <Button variant=\"primary\" onClick={onFire} disabled={isDisabled()}>{action}</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nconst TraderActions: React.FC<TraderActionsProps> = ({\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  redeem,\r\n  buy,\r\n  sell,\r\n  setSelectedAmount\r\n}) => {\r\n  const [buyShow, setBuyShow] = useState(false)\r\n  const [sellShow, setSellShow] = useState(false)\r\n  const [redeemShow, setRedeemShow] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.actions}>\r\n        <Button\r\n          variant=\"outline-dark\"\r\n          onClick={() => setRedeemShow(true)}\r\n          // onClick={redeem}\r\n          disabled={!isMarketClosed || !marketInfo.payoutDenominator}\r\n        >\r\n          Redeem\r\n        </Button>\r\n        <Button variant=\"outline-dark\"\r\n          onClick={() => setBuyShow(true)}\r\n          // onClick={buy} \r\n          disabled={isMarketClosed}\r\n        >\r\n          Buy\r\n        </Button>\r\n        <Button variant=\"outline-dark\"\r\n          onClick={() => setSellShow(true)}\r\n          // onClick={sell}\r\n          disabled={isMarketClosed}\r\n        >\r\n          Sell\r\n        </Button>\r\n\r\n        <TradingModal action=\"buy\" actionFunc={buy} modelShow={buyShow} setModalShow={setBuyShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n        ></TradingModal>\r\n        <TradingModal action=\"sell\" actionFunc={sell} modelShow={sellShow} setModalShow={setSellShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n\r\n        ></TradingModal>\r\n        <TradingModal action=\"redeem\" actionFunc={redeem} modelShow={redeemShow} setModalShow={setRedeemShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n\r\n        ></TradingModal>\r\n\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst OperatorActions: React.FC<OperatorActionsProps> = ({ isMarketClosed, close }) => (\r\n  <>\r\n    <h3>Operator actions:</h3>\r\n    <Button variant=\"danger\" onClick={close} disabled={isMarketClosed}>\r\n      Close\r\n    </Button>\r\n  </>\r\n)\r\n\r\nconst OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => {\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(marketInfo.outcomes.length).fill(false)\r\n  );\r\n\r\n  const handleOnChange = (position: any) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Oracle actions:</h3>\r\n      <div>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <li key={index}>\r\n            <input\r\n              type=\"checkbox\"\r\n              id={`custom-checkbox-${index}`}\r\n              name={outcome.short}\r\n              value={outcome.title}\r\n              checked={checkedState[index]}\r\n              onChange={() => handleOnChange(index)}\r\n            />\r\n            <label htmlFor={`custom-checkbox-${index}`}> {outcome.title} </label>\r\n          </li>\r\n        ))}\r\n        <Button\r\n          onClick={() => resolve(checkedState)}\r\n          variant=\"contained\"\r\n          disabled={!isMarketClosed}\r\n        >Resolve</Button>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst Layout: React.FC<LayoutProps> = ({\r\n  account,\r\n  isConditionLoaded,\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  selectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n  buy,\r\n  sell,\r\n  redeem,\r\n  close,\r\n  resolve,\r\n  oracle,\r\n  creator,\r\n  createTime\r\n}) => {\r\n\r\n  var d = createTime\r\n  var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + 7) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n\r\n  let nowDate: Date = new Date(Date.now())\r\n  var diff = nowDate.getTime() - d.getTime();\r\n  diff = diff > 0 ? diff : 0;\r\n  var diffDays = Math.ceil(diff / (1000 * 3600 * 24));\r\n  var stage = isMarketClosed ? 1 : 0\r\n  console.log(stage)\r\n\r\n  if (isMarketClosed && marketInfo.payoutDenominator) {\r\n    stage = 2\r\n  }\r\n  if (stage == 1) {\r\n    diffDays = diffDays - 7\r\n    diffDays = diffDays > 0 ? diffDays : 0\r\n  }\r\n\r\n  var nowProgress = (diffDays / 7) * 100\r\n  console.log(nowProgress)\r\n  console.log(stage)\r\n\r\n  return (\r\n    <Container className={[styles.conditon].join(' ')}>\r\n      {isConditionLoaded ? (\r\n        <>\r\n          <Row className=\"justify-content-md-center mt-5\">\r\n            <Col xs lg=\"6\">\r\n              <Row>\r\n                <h2 className=\"text-center mb-5\">{marketInfo.title}</h2>\r\n              </Row>\r\n              <Row className=\"mt-2 pt-4 bg-light\">\r\n                <Row>\r\n                  <Progress now={nowProgress} stage={stage}></Progress>\r\n                </Row>\r\n                <Row>\r\n\r\n                  <Col md={3} className=\"justify-content-md-center\">\r\n                    <p className=\"mb-0 text-center\"> {marketInfo.funding} Yakid </p>\r\n                    <p className=\"mt-0 text-center\">Liqudity</p>\r\n                  </Col>\r\n                  <Col md={3}>\r\n                    <p className=\"mb-0 text-center\"> {marketInfo.totalVolume} Yakid </p>\r\n                    <p className=\"mt-0 text-center\">Total Volume</p>\r\n\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <p className=\"mb-0 text-center\"> {startDate} </p>\r\n                    <p className=\"mt-0 text-center\">Closing Date</p>\r\n                  </Col>\r\n                  <Col md={2}>\r\n                    <p className=\"mb-0 text-center\"> {diffDays} day</p>\r\n                    <p className=\"mt-0 text-center\">Remaining</p>\r\n                  </Col>\r\n\r\n                </Row>\r\n              </Row>\r\n              <Row className=\"mt-2 bg-light\">\r\n                <TradingForm\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                  setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n                  selectedOutcomeToken={selectedOutcomeToken}\r\n                />\r\n              </Row>\r\n              <Row className=\"justify-content-end\">\r\n                <TraderActions\r\n                  marketInfo={marketInfo}\r\n                  isMarketClosed={isMarketClosed}\r\n                  selectedAmount={selectedAmount}\r\n                  redeem={redeem}\r\n                  buy={buy}\r\n                  sell={sell}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                />\r\n              </Row>\r\n              {account && account.toLowerCase() === creator && (\r\n                <OperatorActions isMarketClosed={isMarketClosed} close={close} />\r\n              )}\r\n              {account && account.toLowerCase() === oracle && (\r\n                <OracleActions\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  resolve={resolve}\r\n                />\r\n              )}\r\n            </Col>\r\n          </Row>\r\n\r\n        </>\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"text-center\">Loading...</h1>\r\n          </div>\r\n        // <Spinner animation=\"border\" role=\"status\" className=\"align-center\">\r\n          // <span className=\"visually-hidden\">Loading...</span>\r\n        // </Spinner>\r\n      )}\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React, { useState, useEffect } from 'react'\r\nimport loadConditionalTokensRepo from 'src/logic/ConditionalTokens'\r\nimport loadMarketMakersRepo from 'src/logic/MarketMakers'\r\nimport { getConditionId, getPositionId } from 'src/utils/markets'\r\nimport BigNumber from 'bignumber.js'\r\nimport Layout from './Layout'\r\nimport { create } from 'ipfs-http-client'\r\nimport Web3 from 'web3'\r\n// import {web3} from 'web3'\r\nconst bs58 = require('bs58')\r\n\r\nBigNumber.config({ EXPONENTIAL_AT: 50 })\r\n\r\nlet utf8decoder = new TextDecoder()\r\n\r\n// const markets = require('src/conf/config.local.json')\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  lmsrAddress: string\r\n  questionId: string\r\n  outcomeCount: number\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n}\r\n\r\nenum MarketStage {\r\n  Running = 0,\r\n  Paused = 1,\r\n  Closed = 2,\r\n}\r\n\r\nlet conditionalTokensRepo: any\r\nlet marketMakersRepo: any\r\n\r\nfunction getIpfsHashFromBytes32(bytes32Hex: any) {\r\n  // Add our default ipfs values for first 2 bytes:\r\n  // function:0x12=sha2, size:0x20=256 bits\r\n  // and cut off leading \"0x\"\r\n  const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n  const hashBytes = Buffer.from(hashHex, 'hex');\r\n  const hashStr = bs58.encode(hashBytes)\r\n  return hashStr\r\n}\r\n\r\nconst Market: React.FC<MarketProps> = ({ web3, account, lmsrAddress, questionId, outcomeCount, oracle, creator, createTime }) => {\r\n  const [isConditionLoaded, setIsConditionLoaded] = useState<boolean>(false)\r\n  const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n  const [selectedOutcomeToken, setSelectedOutcomeToken] = useState<number>(0)\r\n  const [marketInfo, setMarketInfo] = useState<any>(undefined)\r\n  //@ts-ignore\r\n  const client = create(process.env.REACT_APP_IPFS_ENDPOINT)\r\n  // const client = create({\r\n  //   host: 'localhost',\r\n  //   port: 5001,\r\n  //   protocol: 'http',\r\n  //   // headers: {\r\n  //   //   authorization: auth\r\n  //   // }\r\n\r\n  // })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        conditionalTokensRepo = await loadConditionalTokensRepo(web3, lmsrAddress, account)\r\n        marketMakersRepo = await loadMarketMakersRepo(web3, lmsrAddress, account)\r\n        await getMarketInfo()\r\n        setIsConditionLoaded(true)\r\n      } catch (err) {\r\n        setIsConditionLoaded(false)\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    init()\r\n  }, [])\r\n\r\n  const getMarketInfo = async () => {\r\n    if (!oracle) return\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const conditionId = getConditionId(\r\n      // process.env.REACT_APP_ORACLE_ADDRESS,\r\n      oracle,\r\n      questionId,\r\n      outcomeCount,\r\n    )\r\n    const payoutDenominator = await conditionalTokensRepo.payoutDenominator(conditionId)\r\n\r\n    // var cid = questionId.slice(0, 46)\r\n    const cid = getIpfsHashFromBytes32(questionId)\r\n    //@ts-ignore\r\n    const stream = client.cat(cid)\r\n    let data = ''\r\n\r\n    for await (const chunk of stream) {\r\n      // data += chunk.toString()\r\n      data += utf8decoder.decode(chunk)\r\n    }\r\n    console.log(data.toString())\r\n\r\n    var markets = JSON.parse(data)\r\n    const funding = await marketMakersRepo.funding()\r\n    const totalSupply = await collateral.contract.totalSupply()\r\n\r\n\r\n    const outcomes = []\r\n    for (let outcomeIndex = 0; outcomeIndex < outcomeCount; outcomeIndex++) {\r\n      const indexSet = (outcomeIndex === 0\r\n        ? 1\r\n        : parseInt(Math.pow(10, outcomeIndex).toString(), 2)\r\n      ).toString()\r\n      const collectionId = await conditionalTokensRepo.getCollectionId(\r\n        `0x${'0'.repeat(64)}`,\r\n        conditionId,\r\n        indexSet,\r\n      )\r\n      const positionId = getPositionId(collateral.address, collectionId)\r\n      const probability = await marketMakersRepo.calcMarginalPrice(outcomeIndex)\r\n      const balance = await conditionalTokensRepo.balanceOf(account, positionId)\r\n      const payoutNumerator = await conditionalTokensRepo.payoutNumerators(\r\n        conditionId,\r\n        outcomeIndex,\r\n      )\r\n\r\n      const outcome = {\r\n        index: outcomeIndex,\r\n        // title: markets.markets[0].outcomes[outcomeIndex].title,\r\n        title: markets[0].outcomes[outcomeIndex].title,\r\n        // title: `outcome ${outcomeIndex}`,\r\n        probability: new BigNumber(probability)\r\n          .dividedBy(Math.pow(2, 64))\r\n          // .multipliedBy(100)\r\n          .toFixed(3),\r\n        balance: new BigNumber(balance).dividedBy(Math.pow(10, collateral.decimals)),\r\n        payoutNumerator: payoutNumerator,\r\n      }\r\n      outcomes.push(outcome)\r\n    }\r\n\r\n    const marketData = {\r\n      lmsrAddress: lmsrAddress,\r\n      title: markets[0].title,\r\n      outcomes,\r\n      stage: MarketStage[await marketMakersRepo.stage()],\r\n      questionId: questionId,\r\n      conditionId: conditionId,\r\n      payoutDenominator: payoutDenominator,\r\n      funding: new BigNumber(funding).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      totalVolume: new BigNumber(totalSupply).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2)\r\n\r\n    }\r\n\r\n    setMarketInfo(marketData)\r\n  }\r\n\r\n  const buy = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // ).toString()\r\n    const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    const collateralBalance = await collateral.contract.allowancePoint(account, marketInfo.lmsrAddress)\r\n    if (cost.gt(collateralBalance)) {\r\n      // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n      await collateral.contract.approvePoint(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n        from: account,\r\n      })\r\n    }\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, cost, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const sell = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // )\r\n    // const formatedAmount = Web3.utils.toBN(0).sub(\r\n    // Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals))))\r\n\r\n    const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n\r\n\r\n\r\n    const isApproved = await conditionalTokensRepo.isApprovedForAll(account, marketInfo.lmsrAddress)\r\n    if (!isApproved) {\r\n      await conditionalTokensRepo.setApprovalForAll(marketInfo.lmsrAddress, true, account)\r\n    }\r\n\r\n    const outcomeTokenAmounts = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === selectedOutcomeToken ? formatedAmount.neg() : Web3.utils.toBN(0),\r\n    )\r\n    const profit = (await marketMakersRepo.calcNetCost(outcomeTokenAmounts)).neg()\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, profit, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const redeem = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n\r\n    const indexSets = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === 0 ? 1 : parseInt(Math.pow(10, i).toString(), 2),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.redeemPositions(\r\n      collateral.address,\r\n      `0x${'0'.repeat(64)}`,\r\n      marketInfo.conditionId,\r\n      indexSets,\r\n      account,\r\n    )\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const close = async () => {\r\n    const tx = await marketMakersRepo.close(account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const resolve = async (resolutionOutcomeIndex: Array<Boolean>) => {\r\n    // const payouts = Array.from(\r\n    //   { length: marketInfo.outcomes.length },\r\n    //   (value: any, index: number) => (index === resolutionOutcomeIndex ? 1 : 0),\r\n    // )\r\n    const payouts = Array.from(\r\n      resolutionOutcomeIndex, (value: any, index: number) => (value === true ? 1 : 0),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.reportPayouts(marketInfo.questionId, payouts, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const isMarketClosed =\r\n    isConditionLoaded && MarketStage[marketInfo.stage].toString() === MarketStage.Closed.toString()\r\n  return (\r\n    <Layout\r\n      account={account}\r\n      isConditionLoaded={isConditionLoaded}\r\n      isMarketClosed={isMarketClosed}\r\n      marketInfo={marketInfo}\r\n      setSelectedAmount={setSelectedAmount}\r\n      selectedAmount={selectedAmount}\r\n      setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n      selectedOutcomeToken={selectedOutcomeToken}\r\n      buy={buy}\r\n      sell={sell}\r\n      redeem={redeem}\r\n      close={close}\r\n      resolve={resolve}\r\n      oracle={oracle}\r\n      creator={creator}\r\n      createTime={createTime}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Market\r\n"],"sourceRoot":""}