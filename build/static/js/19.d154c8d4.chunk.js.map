{"version":3,"sources":["../../src/index.ts","../node_modules/react-bootstrap/esm/DropdownButton.js","components/Web3Connect/YakiButton.tsx","components/Web3Connect/index.tsx","../node_modules/react-bootstrap/esm/types.js","logic/YakiToken/index.ts","logic/YakiToken/YAKID.ts"],"names":["propTypes","id","PropTypes","string","href","onClick","func","title","node","isRequired","disabled","bool","align","alignPropType","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","oneOf","bsPrefix","variant","size","DropdownButton","React","ref","children","props","_jsxs","Dropdown","_jsx","DropdownToggle","childBsPrefix","DropdownMenu","role","renderOnMount","displayName","yakiTokenRepo","YakiButton","web3","account","yakiAddress","useState","isYakiTokenLoaded","setIsYakiTokenLoaded","undefined","tokenInfo","setTokenInfo","history","useHistory","console","log","updateTik","getYakiInfo","useEffect","a","loadYakiTokenRepo","setInterval","error","init","decimals","pointBanlanceOf","balanceAmount","balance","Web3","utils","toBN","div","Math","pow","toString","Button","className","push","web3ConnectListenersAdded","Web3ConnectButton","account1","setProviderData","connectProvider","provider","useWallet","connect","reset","status","resetMetamask","connectMetamask","detectEthereumProvider","Container","Row","Col","md","slice","Item","as","process","alignDirection","oneOfType","shape","sm","lg","xl","xxl","yakiAddressCache","providerAccountCache","assert","require","YakiTokenRepo","contracts","yakiToken","symbol","name","getAddress","address","approvePoint","spender","amount","from","pointBalanceOf","transferPoint","recipient","transferPointFrom","sender","tranferPointFrom","this","TruffleContract","loadYakiContract","yakiContract","YAKI","setProvider","currentProvider","at"],"mappings":"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","file":"static/js/19.d154c8d4.chunk.js","sourcesContent":["\"use strict\";\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3000, } = {}) {\n    _validateInputs();\n    let handled = false;\n    return new Promise((resolve) => {\n        if (window.ethereum) {\n            handleEthereum();\n        }\n        else {\n            window.addEventListener('ethereum#initialized', handleEthereum, { once: true });\n            setTimeout(() => {\n                handleEthereum();\n            }, timeout);\n        }\n        function handleEthereum() {\n            if (handled) {\n                return;\n            }\n            handled = true;\n            window.removeEventListener('ethereum#initialized', handleEthereum);\n            const { ethereum } = window;\n            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n                resolve(ethereum);\n            }\n            else {\n                const message = mustBeMetaMask && ethereum\n                    ? 'Non-MetaMask window.ethereum detected.'\n                    : 'Unable to detect window.ethereum.';\n                !silent && console.error('@metamask/detect-provider:', message);\n                resolve(null);\n            }\n        }\n    });\n    function _validateInputs() {\n        if (typeof mustBeMetaMask !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n        }\n        if (typeof silent !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n        }\n        if (typeof timeout !== 'number') {\n            throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n        }\n    }\n}\nmodule.exports = detectEthereumProvider;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVlBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILFNBQVMsc0JBQXNCLENBQUMsRUFDOUIsY0FBYyxHQUFHLEtBQUssRUFDdEIsTUFBTSxHQUFHLEtBQUssRUFDZCxPQUFPLEdBQUcsSUFBSSxHQUNmLEdBQUcsRUFBRTtJQUVKLGVBQWUsRUFBRSxDQUFDO0lBRWxCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUVwQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDN0IsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO1lBRW5CLGNBQWMsRUFBRSxDQUFDO1NBRWxCO2FBQU07WUFFTCxNQUFNLENBQUMsZ0JBQWdCLENBQ3JCLHNCQUFzQixFQUN0QixjQUFjLEVBQ2QsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQ2YsQ0FBQztZQUVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsY0FBYyxFQUFFLENBQUM7WUFDbkIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2I7UUFFRCxTQUFTLGNBQWM7WUFFckIsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTzthQUNSO1lBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQztZQUVmLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxzQkFBc0IsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUVuRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDO1lBRTVCLElBQUksUUFBUSxJQUFJLENBQUMsQ0FBQyxjQUFjLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbkI7aUJBQU07Z0JBRUwsTUFBTSxPQUFPLEdBQUcsY0FBYyxJQUFJLFFBQVE7b0JBQ3hDLENBQUMsQ0FBQyx3Q0FBd0M7b0JBQzFDLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQztnQkFFeEMsQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDaEUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2Y7UUFDSCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLGVBQWU7UUFDdEIsSUFBSSxPQUFPLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO1NBQ2pHO1FBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ3pGO1FBQ0QsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ3pGO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFsRkQsaUJBQVMsc0JBQXNCLENBQUMifQ==","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport loadYakiTokenRepo from \"src/logic/YakiToken\";\r\nimport Web3 from 'web3'\r\n\r\n\r\ntype YakiWalletProps = {\r\n    web3: any\r\n    account: string\r\n    yakiAddress: string\r\n}\r\n\r\nlet yakiTokenRepo: any\r\n\r\nconst YakiButton: React.FC<YakiWalletProps> = ({\r\n    web3, account, yakiAddress\r\n}) => {\r\n    const [isYakiTokenLoaded, setIsYakiTokenLoaded] = useState<boolean>(false)\r\n    const [tokenInfo, setTokenInfo] = useState<any>(undefined)\r\n    const history = useHistory();\r\n\r\n    console.log(yakiAddress)\r\n    const updateTik = () => {\r\n        if (isYakiTokenLoaded) {\r\n            console.log('update info')\r\n            getYakiInfo()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            try {\r\n                yakiTokenRepo = await loadYakiTokenRepo(web3, yakiAddress, account)\r\n                await getYakiInfo()\r\n                setIsYakiTokenLoaded(true)\r\n                setInterval(updateTik, 5000)\r\n            } catch (err) {\r\n                setIsYakiTokenLoaded(false)\r\n                console.error(err)\r\n            }\r\n        }\r\n\r\n        init()\r\n    }, [])\r\n\r\n    const getYakiInfo = async () => {\r\n        const decimals = await yakiTokenRepo.decimals()\r\n        const balanceAmount = await yakiTokenRepo.pointBanlanceOf(account)\r\n        const balance = Web3.utils.toBN(balanceAmount).div(\r\n            Web3.utils.toBN(Math.pow(10, decimals))\r\n        ).toString()\r\n        console.log(balance)\r\n\r\n        const yakiData = {\r\n            balance: balance,\r\n        }\r\n\r\n        setTokenInfo(yakiData)\r\n    }\r\n\r\n    if (isYakiTokenLoaded) {\r\n\r\n        console.log(tokenInfo.balance)\r\n    }\r\n\r\n    const goWallet = () => {\r\n        history.push(\"/wallet\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isYakiTokenLoaded && web3 ?\r\n                (\r\n                    <Button variant=\"outline-dark\" className=\"pl-2 ms-4\" onClick={goWallet}>\r\n                        {`${tokenInfo.balance} YakID`}\r\n                    </Button>\r\n                )\r\n                : (\r\n                    <Button variant=\"outline-dark\" className=\"pl-2 ms-4\">\r\n                        Loading\r\n                    </Button>\r\n\r\n                )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default YakiButton","import React, { useEffect } from 'react'\r\nimport detectEthereumProvider from '@metamask/detect-provider'\r\nimport {\r\n  useWallet,\r\n} from 'use-wallet'\r\nimport { DropdownButton, Dropdown, Button, Container, Row, Col } from 'react-bootstrap'\r\nimport YakiButton from 'src/components/Web3Connect/YakiButton'\r\n// import detectEthereumProvider from '@metamask/detect-provider';\r\n\r\n\r\ntype Props = {\r\n  web3: any\r\n  account1: string\r\n  setProviderData: Function\r\n}\r\n\r\nlet web3ConnectListenersAdded = false\r\n\r\n\r\nconst Web3ConnectButton: React.FC<Props> = ({ web3, account1, setProviderData }) => {\r\n  const connectProvider = (provider: any) => setProviderData(provider)\r\n  const disconnectProvider = () => setProviderData()\r\n  const { account, connect, reset, status } = useWallet()\r\n\r\n  useEffect(() => {\r\n    if (!web3ConnectListenersAdded) {\r\n      web3ConnectListenersAdded = true\r\n    }\r\n  })\r\n\r\n  const resetMetamask = async () => {\r\n    reset()\r\n    disconnectProvider()\r\n  }\r\n\r\n  const connectMetamask = async () => {\r\n    //@ts-ignore\r\n    // connect('bsc')\r\n    connect()\r\n    // const provider = await detectEthereumProvider()\r\n    // const provider = <window className=\"bin</window>\r\n\r\n    //this is only for bsc\r\n    //@ts-ignore\r\n    // const provider = window.BinanceChain\r\n\r\n    const provider = await detectEthereumProvider();\r\n\r\n    if (provider) {\r\n      // if (provider !== window.ethereum) {\r\n      // console.log('Do you have multiple wallets installed?')\r\n      // }\r\n      connectProvider(provider)\r\n    }\r\n\r\n  }\r\n\r\n  // const getTypeOfAccount = () => {\r\n  //   let type: string\r\n  //   if (account1 === process.env.REACT_APP_OPERATOR_ADDRESS) {\r\n  //     type = 'Operator'\r\n  //   } else if (account1 === process.env.REACT_APP_ORACLE_ADDRESS) {\r\n  //     type = 'Oracle'\r\n  //   } else {\r\n  //     type = 'Trader'\r\n  //   }\r\n  //   return type\r\n  // }\r\n\r\n  return account1 ? (\r\n    // <Button variant=\"contained\" onClick={() => resetMetamask()}>\r\n    //   Disconnect {account1}\r\n    // </Button>\r\n    <>\r\n      <Container>\r\n        {/* <Row> */}\r\n        <Row>\r\n          <Col md={4}>\r\n            <DropdownButton id=\"dropdown-item-button\" title={ account1.slice(0, 4) + \"...\" + account1.slice(-4)} variant=\"secondary\" className=\"me-5\">\r\n              {/* <Dropdown.ItemText>{account1}</Dropdown.ItemText> */}\r\n              <Dropdown.Item as=\"button\" onClick={() => resetMetamask()}>Disconnect  </Dropdown.Item>\r\n            </DropdownButton>\r\n          </Col>\r\n          {/* </Row> */}\r\n          {/* <Row className=\"mt-2\"> */}\r\n          <Col md={7}>\r\n            {/* @ts-ignore */}\r\n            <YakiButton web3={web3} account={account1} yakiAddress={process.env.REACT_APP_YAKI_ADDRESS}></YakiButton>\r\n          </Col>\r\n          {/* </Row> */}\r\n        </Row>\r\n      </Container>\r\n    </>\r\n\r\n  ) : (\r\n    <Button variant=\"secondary\" onClick={connectMetamask}>\r\n      Connect\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default Web3ConnectButton\r\n","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n})]);","import YakiTokenRepo from \"./YAKID\";\r\nimport YAKI from '../../abi/YAKIID.json'\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet yakiTokenRepo: YakiTokenRepo | undefined\r\nlet yakiAddressCache: string\r\nlet providerAccountCache: string\r\nlet contract: object | undefined\r\n\r\nconst resetYakiTokenRepo = () => {\r\n    yakiTokenRepo = undefined\r\n}\r\n\r\nconst loadYakiContract = async (web3: any) => {\r\n    let yakiContract\r\n    if (!contract) {\r\n        // weth9Contract = TruffleContract(WETH9)\r\n        yakiContract = TruffleContract(YAKI)\r\n        yakiContract.setProvider(web3.currentProvider)\r\n    }\r\n    return yakiContract\r\n}\r\n\r\n\r\nconst loadYakiTokenRepo = async (web3: any, yakiAddress: string, account: string) => {\r\n    try {\r\n        if (\r\n            (account && account !== providerAccountCache) ||\r\n            (yakiAddress && yakiAddress !== yakiAddressCache)\r\n        ) {\r\n            resetYakiTokenRepo()\r\n        }\r\n        if (!yakiTokenRepo) {\r\n            yakiAddressCache = yakiAddress\r\n            providerAccountCache = account\r\n\r\n            const contracts = await loadYakiContract(web3)\r\n            const yakiContract = await contracts.at(yakiAddress)\r\n            yakiTokenRepo = new YakiTokenRepo(yakiContract)\r\n        }\r\n        return yakiTokenRepo\r\n    } catch (err) {\r\n        console.error(err)\r\n        return null\r\n    }\r\n}\r\n\r\nexport default loadYakiTokenRepo\r\n","const assert = require('assert')\r\n\r\nclass YakiTokenRepo {\r\n    yakiToken: any\r\n\r\n    constructor(contracts: any) {\r\n        assert(contracts, '\"contracts\" is required')\r\n\r\n        this.yakiToken = contracts\r\n    }\r\n\r\n    symbol = async () => {\r\n        return this.yakiToken.symbol()\r\n    }\r\n\r\n    decimals = async () => {\r\n        return this.yakiToken.decimals()\r\n    }\r\n\r\n    name = async () => {\r\n        return this.yakiToken.name()\r\n    }\r\n\r\n    getAddress = async () => {\r\n        return this.yakiToken.address\r\n    }\r\n\r\n    approvePoint = async (spender: string, amount: number, from: string) => {\r\n        return this.yakiToken.approvePoint(spender, amount, { from })\r\n    }\r\n\r\n    pointBanlanceOf = async (account: string) => {\r\n        return this.yakiToken.pointBalanceOf(account)\r\n    }\r\n\r\n    transferPoint = async (recipient: string, amount: number, from: string) => {\r\n        return this.yakiToken.transferPoint(recipient, amount, { from })\r\n    }\r\n\r\n    transferPointFrom = async (sender: string, recipient: string, amount: number, from: string) => {\r\n        return this.yakiToken.tranferPointFrom(sender, recipient, amount, { from })\r\n    }\r\n\r\n}\r\n\r\nexport default YakiTokenRepo"],"sourceRoot":""}