{"version":3,"sources":["components/MarketPage/CurrentMarket.tsx","logic/contracts.ts","utils/markets.ts","logic/ConditionalTokens/index.ts","logic/ConditionalTokens/ConditionalTokensRepo.ts","logic/MarketMakers/index.ts","logic/MarketMakers/MarketMakersRepo.ts","components/Market/Progress.tsx","components/Market/Layout.tsx","components/Market/index.tsx"],"names":["CurrentMarket","web3","account","MARKET_QUERY","gql","useQuery","fetchPolicy","loading","error","data","refetch","console","log","lmsrmarketMakers","lmsrmarketMaker","d","Date","now","parseInt","creationTimestamp","lmsrAddress","id","questionId","outcomeCount","outcomeSlotCount","oracle","creator","questionType","createTime","className","CurrentMarketProvider","client","ApolloClient","uri","process","cache","InMemoryCache","contracts","lmsrAddressCache","providerAccountCache","TruffleContract","require","loadLMSRMarketMakerContract","a","LMSRMarketMaker","lmsrMarketMakerContract","setProvider","currentProvider","loadConditionalTokensContract","ConditionalTokens","conditionalTokensContract","loadWETH9Contract","YAKI","weth9Contract","loadContracts","undefined","LMSRMarketMakerContract","ConditionalTokensContract","WETH9Contract","at","lmsrMarketMaker","pmSystem","conditionalTokens","collateralToken","address","contract","name","decimals","symbol","getConditionId","oracleAddress","Web3","utils","soliditySha3","t","v","getPositionId","collectionId","conditionalTokensRepo","assert","ConditionalTokensRepo","balanceOf","positionId","getOutcomeSlotCount","getCollectionId","parentCollectionId","conditionId","indexSet","payoutDenominator","payoutNumerators","outcomeIndex","isApprovedForAll","lmsrMarketMakerAddress","setApprovalForAll","approved","from","reportPayouts","payouts","redeemPositions","collateralAddress","marketConditionId","indexSets","this","loadConditionalTokensRepo","marketMakersRepo","MarketMakersRepo","getAddress","getCollateralToken","conditionIds","index","owner","funding","stage","close","calcNetCost","outcomeTokenAmounts","calcMarginalPrice","trade","tradeAmounts","collateralLimit","loadMarketMakersRepo","CloseProgress","Container","fluid","Row","Col","md","sm","styles","circleRed","ProgressBar","label","toFixed","circleGray","ResolveProgress","EndProgress","Progress","useState","TradingForm","isMarketClosed","marketInfo","setSelectedOutcomeToken","setSelectedAmount","selectedOutcomeToken","Form","Group","outcomes","map","outcome","payoutNumerator","rightOutcome","wrongOutcome","join","Check","type","onChange","e","checked","Label","title","parseFloat","probability","toString","outcomeInfo","balance","TradingModal","action","actionFunc","setModalShow","modelShow","selectedAmount","Modal","show","onHide","Body","controlId","Control","placeholder","target","value","Footer","Button","variant","onClick","disabled","isDisabled","TraderActions","redeem","buy","sell","buyShow","setBuyShow","sellShow","setSellShow","redeemShow","setRedeemShow","actions","OperatorActions","OracleActions","resolve","Array","length","fill","checkedState","setCheckedState","short","position","updatedCheckedState","item","handleOnChange","htmlFor","Layout","isConditionLoaded","stage1_duration","stage2_duration","diff","getTime","nowProgress","diffDays","Math","ceil","startDate","getFullYear","getMonth","getDate","getHours","getMinutes","remainDays","conditon","xs","lg","totalVolume","toLowerCase","bs58","BigNumber","config","EXPONENTIAL_AT","MarketStage","utf8decoder","TextDecoder","getIpfsHashFromBytes32","bytes32Hex","hashHex","slice","hashBytes","Buffer","encode","Market","setIsConditionLoaded","setMarketInfo","create","useEffect","getMarketInfo","init","collateral","cid","stream","cat","chunk","decode","markets","JSON","parse","totalSupply","pow","repeat","dividedBy","push","marketData","formatedAmount","toBN","mul","cost","allowancePoint","collateralBalance","gt","approvePoint","tx","i","neg","profit","resolutionOutcomeIndex","Closed"],"mappings":"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","file":"static/js/13.e48f9aa2.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\n// import { useParams } from 'react-router-dom';\r\n// import MarketLayout from './MarketLayout'\r\n// const Market = lazy(() => import('src/components/Market/index'))\r\nimport Market from 'src/components/Market'\r\n\r\n\r\n\r\ntype MarketProviderProps = {\r\n    web3: any\r\n    account: string\r\n}\r\n\r\n\r\nconst CurrentMarketProvider: React.FC<MarketProviderProps> = ({ web3, account }) => {\r\n\r\n    //@ts-ignore\r\n    // let { address } = useParams();\r\n\r\n    //@ts-ignore\r\n    const client = new ApolloClient({\r\n        uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n        // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n        cache: new InMemoryCache()\r\n    });\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            {account && web3 ? (\r\n                <CurrentMarket web3={web3} account={account}></CurrentMarket>) : (\r\n                <div> Connect your account first </div>\r\n            )\r\n            }\r\n        </ApolloProvider>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nconst CurrentMarket: React.FC<MarketProviderProps> = ({ web3, account }) => {\r\n\r\n    const MARKET_QUERY = gql`\r\n    query lsmrMarkets($id: String) {\r\n        lmsrmarketMakers(orderBy: creationTimestamp, orderDirection: desc, first:1, where:{questionType: 0}) {\r\n          id\r\n          creator\r\n          creationTimestamp\r\n          collateralToken\r\n          conditions {\r\n            id\r\n            oracle\r\n            questionId\r\n            outcomeSlotCount\r\n          }\r\n          funding\r\n          fee\r\n          condition {\r\n            id\r\n          }\r\n          oracle\r\n          questionId\r\n          outcomeSlotCount\r\n          questionType\r\n        }\r\n   }\r\n  `\r\n    const { loading, error, data, refetch } = useQuery(MARKET_QUERY, {\r\n        fetchPolicy: \"no-cache\"\r\n    }\r\n    )\r\n\r\n    if (loading) return <p>Loading...</p>\r\n\r\n    if (error) return <p>Error :</p>\r\n\r\n    console.log(data.lmsrmarketMakers)\r\n\r\n    const lmsrmarketMaker = data.lmsrmarketMakers[0]\r\n    let d: Date = new Date(Date.now())\r\n    if (lmsrmarketMaker) {\r\n        d = new Date(parseInt(lmsrmarketMaker.creationTimestamp) * 1000);\r\n    }\r\n    // let d: Date = new Date(parseInt(lmsrmarketMaker.creationTimestamp) * 1000);  \r\n    // var datestring = d.getDate()  + \"-\" + (d.getMonth()+1) + \"-\" + d.getFullYear() + \" \" +d.getHours() + \":\" + d.getMinutes()\r\n    // console.log(datestring)\r\n    // console.trace()\r\n\r\n    return (\r\n        <>\r\n            {lmsrmarketMaker ? (\r\n                <>\r\n                    <Market\r\n                        web3={web3}\r\n                        account={account}\r\n                        lmsrAddress={lmsrmarketMaker.id}\r\n                        questionId={lmsrmarketMaker.questionId}\r\n                        outcomeCount={lmsrmarketMaker.outcomeSlotCount}\r\n                        oracle={lmsrmarketMaker.oracle}\r\n                        creator={lmsrmarketMaker.creator}\r\n                        questionType={lmsrmarketMaker.questionType}\r\n                        createTime={d} \r\n                        />\r\n                </>\r\n            ) : (\r\n                <h1 className=\"text-center\">No data found</h1>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CurrentMarketProvider","import React, { lazy } from 'react'\r\n\r\n\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet contracts: Object | undefined\r\nlet lmsrAddressCache: string | undefined\r\nlet providerAccountCache: string | undefined\r\n\r\nconst resetContracts = () => {\r\n  contracts = undefined\r\n  lmsrAddressCache = undefined\r\n  providerAccountCache = undefined\r\n}\r\n\r\nconst loadLMSRMarketMakerContract = async (web3: any) => {\r\n  let lmsrMarketMakerContract\r\n  if (!contracts) {\r\n    const LMSRMarketMaker = require('../abi/LMSRMarketMaker.min.json')\r\n    lmsrMarketMakerContract = TruffleContract(LMSRMarketMaker)\r\n    lmsrMarketMakerContract.setProvider(web3.currentProvider)\r\n  }\r\n  return lmsrMarketMakerContract\r\n}\r\n\r\nconst loadConditionalTokensContract = async (web3: any) => {\r\n  let conditionalTokensContract\r\n  if (!contracts) {\r\n    const ConditionalTokens = require('../abi/ConditionalTokens.min.json')\r\n    conditionalTokensContract = TruffleContract(ConditionalTokens)\r\n    conditionalTokensContract.setProvider(web3.currentProvider)\r\n  }\r\n  return conditionalTokensContract\r\n}\r\n\r\nconst loadWETH9Contract = async (web3: any) => {\r\n  let weth9Contract\r\n  if (!contracts) {\r\n    // weth9Contract = TruffleContract(WETH9)\r\n\r\n    const YAKI = require('../abi/YAKIID.min.json')\r\n    weth9Contract = TruffleContract(YAKI)\r\n    weth9Contract.setProvider(web3.currentProvider)\r\n  }\r\n  return weth9Contract\r\n}\r\n\r\nconst loadContracts = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetContracts()\r\n    }\r\n    if (!contracts) {\r\n      providerAccountCache = account\r\n      lmsrAddressCache = lmsrAddress\r\n\r\n      const LMSRMarketMakerContract = await loadLMSRMarketMakerContract(web3)\r\n      const ConditionalTokensContract = await loadConditionalTokensContract(web3)\r\n      const WETH9Contract = await loadWETH9Contract(web3)\r\n\r\n      const lmsrMarketMaker = await LMSRMarketMakerContract.at(lmsrAddress)\r\n      const conditionalTokens = await ConditionalTokensContract.at(await lmsrMarketMaker.pmSystem())\r\n      const collateralToken = {\r\n        address: await lmsrMarketMaker.collateralToken(),\r\n        contract: await WETH9Contract.at(await lmsrMarketMaker.collateralToken()),\r\n        name: 'YAKI TOKEN',\r\n        decimals: 18,\r\n        symbol: 'YAKI',\r\n      }\r\n\r\n      contracts = { lmsrMarketMaker, conditionalTokens, collateralToken }\r\n    }\r\n    return contracts\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadContracts\r\n","import Web3 from 'web3'\r\n\r\nexport const getConditionId = (\r\n  oracleAddress: string,\r\n  questionId: string,\r\n  outcomeSlotCount: number,\r\n) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: oracleAddress },\r\n    { t: 'bytes32', v: questionId },\r\n    { t: 'uint', v: outcomeSlotCount },\r\n  )\r\n}\r\n\r\nexport const getPositionId = (collateralToken: string, collectionId: string) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: collateralToken },\r\n    { t: 'bytes32', v: collectionId },\r\n  )\r\n}\r\n","import ConditionalTokensRepo from './ConditionalTokensRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet conditionalTokensRepo: ConditionalTokensRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetConditionalTokensRepo = () => {\r\n  conditionalTokensRepo = undefined\r\n}\r\n\r\nconst loadConditionalTokensRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetConditionalTokensRepo()\r\n    }\r\n    if (!conditionalTokensRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      conditionalTokensRepo = new ConditionalTokensRepo(contracts)\r\n    }\r\n    return conditionalTokensRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadConditionalTokensRepo\r\n","const assert = require('assert')\r\n\r\nclass ConditionalTokensRepo {\r\n  conditionalTokens: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.conditionalTokens = contracts.conditionalTokens\r\n  }\r\n\r\n  balanceOf = async (account: string, positionId: number) => {\r\n    return this.conditionalTokens.balanceOf(account, positionId)\r\n  }\r\n\r\n  getOutcomeSlotCount = async (id: string) => {\r\n    return this.conditionalTokens.getOutcomeSlotCount(id)\r\n  }\r\n\r\n  getCollectionId = async (parentCollectionId: string, conditionId: string, indexSet: number[]) => {\r\n    return this.conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet)\r\n  }\r\n\r\n  payoutDenominator = async (conditionId: string) => {\r\n    return this.conditionalTokens.payoutDenominator(conditionId)\r\n  }\r\n\r\n  payoutNumerators = async (conditionId: string, outcomeIndex: number) => {\r\n    return this.conditionalTokens.payoutNumerators(conditionId, outcomeIndex)\r\n  }\r\n\r\n  isApprovedForAll = async (account: string, lmsrMarketMakerAddress: string) => {\r\n    return this.conditionalTokens.isApprovedForAll(account, lmsrMarketMakerAddress)\r\n  }\r\n\r\n  setApprovalForAll = async (lmsrMarketMakerAddress: string, approved: boolean, from: string) => {\r\n    return this.conditionalTokens.setApprovalForAll(lmsrMarketMakerAddress, approved, { from })\r\n  }\r\n\r\n  reportPayouts = async (questionId: string, payouts: number[], from: string) => {\r\n    return this.conditionalTokens.reportPayouts(questionId, payouts, { from })\r\n  }\r\n\r\n  redeemPositions = async (\r\n    collateralAddress: string,\r\n    parentCollectionId: string,\r\n    marketConditionId: string,\r\n    indexSets: number[],\r\n    from: string,\r\n  ) => {\r\n    return this.conditionalTokens.redeemPositions(\r\n      collateralAddress,\r\n      parentCollectionId,\r\n      marketConditionId,\r\n      indexSets,\r\n      { from },\r\n    )\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default ConditionalTokensRepo\r\n","import MarketMakersRepo from './MarketMakersRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet marketMakersRepo: MarketMakersRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetMarketMakersRepo = () => {\r\n  marketMakersRepo = undefined\r\n}\r\n\r\nconst loadMarketMakersRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetMarketMakersRepo()\r\n    }\r\n    if (!marketMakersRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      marketMakersRepo = new MarketMakersRepo(contracts)\r\n    }\r\n    return marketMakersRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadMarketMakersRepo\r\n","const assert = require('assert')\r\n\r\nclass MarketMakersRepo {\r\n  lmsrMarketMaker: any\r\n  collateralToken: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.lmsrMarketMaker = contracts.lmsrMarketMaker\r\n    this.collateralToken = contracts.collateralToken\r\n  }\r\n\r\n  getAddress = async () => {\r\n    return this.lmsrMarketMaker.address\r\n  }\r\n\r\n  getCollateralToken = async () => {\r\n    return this.collateralToken\r\n  }\r\n\r\n  conditionIds = async (index: number) => {\r\n    return this.lmsrMarketMaker.conditionIds(index)\r\n  }\r\n\r\n  owner = async () => {\r\n    return this.lmsrMarketMaker.owner()\r\n  }\r\n\r\n  funding = async () => {\r\n    return this.lmsrMarketMaker.funding()\r\n  }\r\n\r\n  stage = async () => {\r\n    return this.lmsrMarketMaker.stage()\r\n  }\r\n\r\n  close = async (from: string) => {\r\n    return this.lmsrMarketMaker.close({ from })\r\n  }\r\n\r\n  calcNetCost = async (outcomeTokenAmounts: number[]) => {\r\n    return this.lmsrMarketMaker.calcNetCost(outcomeTokenAmounts)\r\n  }\r\n\r\n  calcMarginalPrice = async (outcomeIndex: number) => {\r\n    return this.lmsrMarketMaker.calcMarginalPrice(outcomeIndex)\r\n  }\r\n\r\n  trade = async (tradeAmounts: number[], collateralLimit: number, from: string) => {\r\n    return this.lmsrMarketMaker.trade(tradeAmounts, collateralLimit, { from })\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default MarketMakersRepo\r\n","import React, { useState } from 'react'\r\nimport { Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport styles from 'src/components/style.module.css'\r\n\r\ntype ProgressProperty = {\r\n    now: number\r\n    stage: number\r\n}\r\n\r\ntype StageProperty = {\r\n    now: number\r\n}\r\n\r\nconst CloseProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={0} label={`${0}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ResolveProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst EndProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Progress: React.FC<ProgressProperty> = ({\r\n    now,\r\n    stage\r\n}) => {\r\n\r\n    const [currentStage, setCurrentStage] = useState<number>(0)\r\n\r\n    const data = () => {\r\n        switch (stage) {\r\n            case 0:\r\n                return (\r\n                    <CloseProgress now={now}></CloseProgress>\r\n                )\r\n            case 1:\r\n                return (\r\n                    <ResolveProgress now={now}></ResolveProgress>\r\n                )\r\n            case 2:\r\n                return (\r\n                    <EndProgress now={now}></EndProgress>\r\n                )\r\n\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div>\r\n            {data()}\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default Progress\r\n","import React from 'react'\r\n// import { Paper, Button, TextField, RadioGroup, FormControlLabel, Radio} from '@material-ui/core'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport styles from '../style.module.css'\r\nimport { useState } from \"react\"\r\n//@ts-ignore\r\nimport Progress from 'src/components/Market/Progress'\r\n\r\n\r\ntype TradingFormProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n}\r\n\r\ntype TraderActionsProps = {\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  redeem: any\r\n  buy: any\r\n  sell: any\r\n  setSelectedAmount: any\r\n\r\n}\r\n\r\ntype OperatorActionsProps = {\r\n  isMarketClosed: boolean\r\n  close: any\r\n}\r\n\r\ntype OracleActionsProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  resolve: any\r\n}\r\n\r\ntype TradingModalProps = {\r\n  action: string\r\n  actionFunc: any\r\n  setModalShow: any\r\n  modelShow: boolean\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  setSelectedAmount: any\r\n}\r\n\r\ntype LayoutProps = {\r\n  account: string\r\n  isConditionLoaded: boolean\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  selectedAmount: string\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n  buy: any\r\n  sell: any\r\n  redeem: any\r\n  close: any\r\n  resolve: any\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n}\r\n\r\nconst TradingForm: React.FC<TradingFormProps> = ({\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n}) => (\r\n  <>\r\n    <Form>\r\n      {/* <div className={styles.inputContainer}>\r\n      <TextField\r\n        variant=\"filled\"\r\n          label=\"Collateral value\"\r\n          type=\"number\"\r\n          onChange={e => setSelectedAmount(e.target.value)}\r\n          disabled={isMarketClosed}\r\n        />\r\n      </div> */}\r\n      {/* <Form.Group className=\"mb-3\" controlId='amount'>\r\n        <Form.Label>Yaki</Form.Label>\r\n      </Form.Group> */}\r\n\r\n      <Form.Group>\r\n        {/* <Form.Check type=\"checkbox\" label\r\n        <RadioGroup\r\n          defaultValue={0}\r\n          onChange={e => setSelectedOutcomeToken(parseInt(e.target.value))}\r\n          value={selectedOutcomeToken}\r\n        > */}\r\n        <Row className=\"mt-4\">\r\n          <Col sm md={7}>\r\n            <p className=\"text-center\">Trend</p>\r\n          </Col>\r\n          <Col sm md={2}>\r\n            <p>Price(YakID)</p>\r\n          </Col>\r\n          <Col sm md={3}>\r\n            <p>MyShares</p>\r\n          </Col>\r\n\r\n        </Row>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <div\r\n            key={outcome.title}\r\n            className={[\r\n              styles.outcome,\r\n              marketInfo.payoutDenominator > 0 && outcome.payoutNumerator > 0 && styles.rightOutcome,\r\n              marketInfo.payoutDenominator > 0 &&\r\n              !(outcome.payoutNumerator > 0) &&\r\n              styles.wrongOutcome,\r\n            ].join(' ')}\r\n          >\r\n            {/* <FormControlLabel\r\n                value={!isMarketClosed ? outcome.index : 'disabled'}\r\n                control={<Radio color=\"primary\" />}\r\n                label={outcome.title}\r\n              /> */}\r\n            <Row>\r\n              <Col sm md={1}>\r\n                <Form.Check type=\"radio\" id={`checkitem${index}`} name=\"checkitems\" onChange={e => setSelectedOutcomeToken(index)} checked={index == selectedOutcomeToken}>\r\n                </Form.Check>\r\n              </Col>\r\n              <Col sm md={6}>\r\n                <Row className=\"d-inline\">\r\n                  <Form.Label>{outcome.title}</Form.Label>\r\n                </Row>\r\n                <Row>\r\n                  <ProgressBar className=\"pl-0 ml-0\" now={parseFloat(outcome.probability.toString()) * 100} label={`${(parseFloat(outcome.probability.toString()) * 100).toFixed(2)}%`}></ProgressBar>\r\n                </Row>\r\n              </Col>\r\n              <Col sm md={2}>\r\n                <div className={styles.outcomeInfo}>{outcome.probability.toString()}</div>\r\n              </Col>\r\n              <Col sm md={3}>\r\n                <div className={styles.outcomeInfo}>\r\n                  {outcome.balance.toFixed(5).toString()}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ))}\r\n        {/* </RadioGroup> */}\r\n      </Form.Group>\r\n    </Form >\r\n  </>\r\n)\r\n\r\nconst TradingModal: React.FC<TradingModalProps> = ({\r\n  action,\r\n  actionFunc,\r\n  setModalShow,\r\n  modelShow,\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  setSelectedAmount\r\n}) => {\r\n  const onFire = () => {\r\n    actionFunc()\r\n    setModalShow(false)\r\n  }\r\n\r\n  const isDisabled = () => {\r\n    switch (action) {\r\n      case \"buy\":\r\n        return isMarketClosed || !selectedAmount\r\n\r\n      case \"sell\":\r\n        return isMarketClosed || !selectedAmount\r\n\r\n      case \"redeem\":\r\n        return !isMarketClosed || !marketInfo.payoutDenominator\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n\r\n        <Modal.Body>\r\n          {/* <p>Modal body text goes here.</p> */}\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n            <Form.Label>Output Shares</Form.Label>\r\n            <Form.Control type=\"number\" placeholder=\"Enter output shares \" onChange={e => setSelectedAmount(e.target.value)} />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n          <Button variant=\"primary\" onClick={onFire} disabled={isDisabled()}>{action}</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nconst TraderActions: React.FC<TraderActionsProps> = ({\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  redeem,\r\n  buy,\r\n  sell,\r\n  setSelectedAmount\r\n}) => {\r\n  const [buyShow, setBuyShow] = useState(false)\r\n  const [sellShow, setSellShow] = useState(false)\r\n  const [redeemShow, setRedeemShow] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.actions}>\r\n        <Button\r\n          variant=\"outline-dark\"\r\n          onClick={() => setRedeemShow(true)}\r\n          // onClick={redeem}\r\n          disabled={!isMarketClosed || !marketInfo.payoutDenominator}\r\n          className=\"me-0\"\r\n        >\r\n          Redeem\r\n        </Button>\r\n        <Button variant=\"outline-dark\"\r\n          onClick={() => setBuyShow(true)}\r\n          // onClick={buy} \r\n          disabled={isMarketClosed}\r\n          className=\"me-1\"\r\n        >\r\n          Buy\r\n        </Button>\r\n        <Button variant=\"outline-dark\"\r\n          onClick={() => setSellShow(true)}\r\n          // onClick={sell}\r\n          disabled={isMarketClosed}\r\n          className=\"me-1\"\r\n        >\r\n          Sell\r\n        </Button>\r\n\r\n        <TradingModal action=\"buy\" actionFunc={buy} modelShow={buyShow} setModalShow={setBuyShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n        ></TradingModal>\r\n        <TradingModal action=\"sell\" actionFunc={sell} modelShow={sellShow} setModalShow={setSellShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n\r\n        ></TradingModal>\r\n        <TradingModal action=\"redeem\" actionFunc={redeem} modelShow={redeemShow} setModalShow={setRedeemShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n\r\n        ></TradingModal>\r\n\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst OperatorActions: React.FC<OperatorActionsProps> = ({ isMarketClosed, close }) => (\r\n  <>\r\n    <h3>Operator actions:</h3>\r\n    <Button variant=\"danger\" onClick={close} disabled={isMarketClosed}>\r\n      Close\r\n    </Button>\r\n  </>\r\n)\r\n\r\nconst OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => {\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(marketInfo.outcomes.length).fill(false)\r\n  );\r\n\r\n  const handleOnChange = (position: any) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Oracle actions:</h3>\r\n      <div>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <li key={index}>\r\n            <input\r\n              type=\"checkbox\"\r\n              id={`custom-checkbox-${index}`}\r\n              name={outcome.short}\r\n              value={outcome.title}\r\n              checked={checkedState[index]}\r\n              onChange={() => handleOnChange(index)}\r\n            />\r\n            <label htmlFor={`custom-checkbox-${index}`}> {outcome.title} </label>\r\n          </li>\r\n        ))}\r\n        <Button\r\n          onClick={() => resolve(checkedState)}\r\n          variant=\"contained\"\r\n          disabled={!isMarketClosed}\r\n        >Resolve</Button>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst Layout: React.FC<LayoutProps> = ({\r\n  account,\r\n  isConditionLoaded,\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  selectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n  buy,\r\n  sell,\r\n  redeem,\r\n  close,\r\n  resolve,\r\n  oracle,\r\n  creator,\r\n  createTime\r\n}) => {\r\n\r\n  console.log(marketInfo)\r\n  const stage1_duration = marketInfo && marketInfo.questionType == 0 ? (4) : (3)\r\n  const stage2_duration = marketInfo && marketInfo.questionType == 0 ? (7) : (4)\r\n\r\n  var d = createTime\r\n\r\n  let nowDate: Date = new Date(Date.now())\r\n  var diff = nowDate.getTime() - d.getTime();\r\n  diff = diff > 0 ? diff : 0;\r\n  var diffDays = Math.ceil(diff / (1000 * 3600 * 24)) - 1;\r\n  var stage = isMarketClosed ? 1 : 0\r\n  console.log(stage)\r\n\r\n  if (isMarketClosed && marketInfo.payoutDenominator) {\r\n    stage = 2\r\n  }\r\n\r\n  var nowProgress\r\n  if (stage == 1) {\r\n    diffDays = diffDays - stage1_duration\r\n    diffDays = diffDays > 0 ? diffDays : 0\r\n    console.log('diffdays' + diffDays)\r\n    nowProgress = (diffDays / stage2_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration + stage2_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage2_duration + stage2_duration - diffDays\r\n\r\n  } else {\r\n    console.log('diffdays' + diffDays)\r\n    console.log('duration' + stage1_duration)\r\n\r\n    nowProgress = (diffDays / stage1_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage1_duration - diffDays\r\n\r\n  }\r\n  console.log(nowProgress)\r\n  console.log(stage)\r\n  console.log(oracle)\r\n\r\n  return (\r\n    <Container className={[styles.conditon].join(' ')}>\r\n      {isConditionLoaded ? (\r\n        <>\r\n          <Row className=\"justify-content-md-center mt-5\">\r\n            <Col xs sm lg=\"6\">\r\n              <Row>\r\n                <h2 className=\"text-center mb-5\">{marketInfo.title}</h2>\r\n              </Row>\r\n              <Row className=\"mt-2 pt-4 bg-transparent border border-primary\">\r\n                <Row>\r\n                  <Progress now={nowProgress} stage={stage}></Progress>\r\n                </Row>\r\n                <Row>\r\n\r\n                  <Col sm md={3} className=\"justify-content-md-center\">\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.funding}k Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Liqudity</p>\r\n                  </Col>\r\n                  <Col sm md={3}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.totalVolume} Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Total Volume</p>\r\n\r\n                  </Col>\r\n                  <Col sm md={4}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {startDate} </strong></p>\r\n                    <p className=\"mt-0 text-center\">{stage == 0 ? (`Closing Date`) : (`Resolving Date`)}</p>\r\n                  </Col>\r\n                  <Col sm md={2}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {remainDays} days </strong></p>\r\n                    <p className=\"mt-0 text-center\">Remaining</p>\r\n                  </Col>\r\n\r\n                </Row>\r\n              </Row>\r\n              <Row className=\"mt-2 bg-transparent border border-primary\">\r\n                <TradingForm\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                  setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n                  selectedOutcomeToken={selectedOutcomeToken}\r\n                />\r\n              </Row>\r\n              <Row className=\"justify-content-end\">\r\n                <TraderActions\r\n                  marketInfo={marketInfo}\r\n                  isMarketClosed={isMarketClosed}\r\n                  selectedAmount={selectedAmount}\r\n                  redeem={redeem}\r\n                  buy={buy}\r\n                  sell={sell}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                />\r\n              </Row>\r\n              {account && account.toLowerCase() === creator && (\r\n                <OperatorActions isMarketClosed={isMarketClosed} close={close} />\r\n              )}\r\n              {account && account.toLowerCase() === oracle && (\r\n                <OracleActions\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  resolve={resolve}\r\n                />\r\n              )}\r\n            </Col>\r\n          </Row>\r\n\r\n        </>\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"text-center\">Loading...</h1>\r\n        </div>\r\n      )}\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React, { useState, useEffect } from 'react'\r\nimport loadConditionalTokensRepo from 'src/logic/ConditionalTokens'\r\nimport loadMarketMakersRepo from 'src/logic/MarketMakers'\r\nimport { getConditionId, getPositionId } from 'src/utils/markets'\r\nimport BigNumber from 'bignumber.js'\r\nimport Layout from './Layout'\r\nimport { create } from 'ipfs-http-client'\r\nimport Web3 from 'web3'\r\n// import {web3} from 'web3'\r\nconst bs58 = require('bs58')\r\n\r\nBigNumber.config({ EXPONENTIAL_AT: 50 })\r\n\r\nlet utf8decoder = new TextDecoder()\r\n\r\n// const markets = require('src/conf/config.local.json')\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  lmsrAddress: string\r\n  questionId: string\r\n  outcomeCount: number\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n  questionType: number\r\n}\r\n\r\nenum MarketStage {\r\n  Running = 0,\r\n  Paused = 1,\r\n  Closed = 2,\r\n}\r\n\r\nlet conditionalTokensRepo: any\r\nlet marketMakersRepo: any\r\n\r\nfunction getIpfsHashFromBytes32(bytes32Hex: any) {\r\n  // Add our default ipfs values for first 2 bytes:\r\n  // function:0x12=sha2, size:0x20=256 bits\r\n  // and cut off leading \"0x\"\r\n  const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n  const hashBytes = Buffer.from(hashHex, 'hex');\r\n  const hashStr = bs58.encode(hashBytes)\r\n  return hashStr\r\n}\r\n\r\nconst Market: React.FC<MarketProps> = ({ web3, account, lmsrAddress, questionId, outcomeCount, oracle, creator, createTime, questionType }) => {\r\n  const [isConditionLoaded, setIsConditionLoaded] = useState<boolean>(false)\r\n  const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n  const [selectedOutcomeToken, setSelectedOutcomeToken] = useState<number>(0)\r\n  const [marketInfo, setMarketInfo] = useState<any>(undefined)\r\n  //@ts-ignore\r\n  const client = create(process.env.REACT_APP_IPFS_ENDPOINT)\r\n  // const client = create({\r\n  //   host: 'localhost',\r\n  //   port: 5001,\r\n  //   protocol: 'http',\r\n  //   // headers: {\r\n  //   //   authorization: auth\r\n  //   // }\r\n\r\n  // })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        conditionalTokensRepo = await loadConditionalTokensRepo(web3, lmsrAddress, account)\r\n        marketMakersRepo = await loadMarketMakersRepo(web3, lmsrAddress, account)\r\n        await getMarketInfo()\r\n        setIsConditionLoaded(true)\r\n      } catch (err) {\r\n        setIsConditionLoaded(false)\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    init()\r\n  }, [])\r\n\r\n  const getMarketInfo = async () => {\r\n    if (!oracle) return\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const conditionId = getConditionId(\r\n      // process.env.REACT_APP_ORACLE_ADDRESS,\r\n      oracle,\r\n      questionId,\r\n      outcomeCount,\r\n    )\r\n    const payoutDenominator = await conditionalTokensRepo.payoutDenominator(conditionId)\r\n\r\n    // var cid = questionId.slice(0, 46)\r\n    const cid = getIpfsHashFromBytes32(questionId)\r\n    //@ts-ignore\r\n    const stream = client.cat(cid)\r\n    let data = ''\r\n\r\n    for await (const chunk of stream) {\r\n      // data += chunk.toString()\r\n      data += utf8decoder.decode(chunk)\r\n    }\r\n    console.log(data.toString())\r\n\r\n    var markets = JSON.parse(data)\r\n    const funding = await marketMakersRepo.funding()\r\n    const totalSupply = await collateral.contract.totalSupply()\r\n\r\n\r\n    const outcomes = []\r\n    for (let outcomeIndex = 0; outcomeIndex < outcomeCount; outcomeIndex++) {\r\n      const indexSet = (outcomeIndex === 0\r\n        ? 1\r\n        : parseInt(Math.pow(10, outcomeIndex).toString(), 2)\r\n      ).toString()\r\n      const collectionId = await conditionalTokensRepo.getCollectionId(\r\n        `0x${'0'.repeat(64)}`,\r\n        conditionId,\r\n        indexSet,\r\n      )\r\n      const positionId = getPositionId(collateral.address, collectionId)\r\n      const probability = await marketMakersRepo.calcMarginalPrice(outcomeIndex)\r\n      const balance = await conditionalTokensRepo.balanceOf(account, positionId)\r\n      const payoutNumerator = await conditionalTokensRepo.payoutNumerators(\r\n        conditionId,\r\n        outcomeIndex,\r\n      )\r\n\r\n      const outcome = {\r\n        index: outcomeIndex,\r\n        // title: markets.markets[0].outcomes[outcomeIndex].title,\r\n        title: markets[0].outcomes[outcomeIndex].title,\r\n        // title: `outcome ${outcomeIndex}`,\r\n        probability: new BigNumber(probability)\r\n          .dividedBy(Math.pow(2, 64))\r\n          .toFixed(3),\r\n          // .multipliedBy(100)\r\n        balance: new BigNumber(balance).dividedBy(Math.pow(10, collateral.decimals)),\r\n        payoutNumerator: payoutNumerator,\r\n      }\r\n      console.log(outcome)\r\n      outcomes.push(outcome)\r\n    }\r\n\r\n    const marketData = {\r\n      lmsrAddress: lmsrAddress,\r\n      title: markets[0].title,\r\n      outcomes,\r\n      stage: MarketStage[await marketMakersRepo.stage()],\r\n      questionId: questionId,\r\n      conditionId: conditionId,\r\n      payoutDenominator: payoutDenominator,\r\n      funding: new BigNumber(funding).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      totalVolume: new BigNumber(totalSupply).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      questionType: questionType\r\n    }\r\n\r\n    setMarketInfo(marketData)\r\n  }\r\n\r\n  const buy = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // ).toString()\r\n    const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    const collateralBalance = await collateral.contract.allowancePoint(account, marketInfo.lmsrAddress)\r\n    if (cost.gt(collateralBalance)) {\r\n      // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n      await collateral.contract.approvePoint(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n        from: account,\r\n      })\r\n    }\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, cost, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const sell = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // )\r\n    // const formatedAmount = Web3.utils.toBN(0).sub(\r\n    // Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals))))\r\n\r\n    const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n\r\n\r\n\r\n    const isApproved = await conditionalTokensRepo.isApprovedForAll(account, marketInfo.lmsrAddress)\r\n    if (!isApproved) {\r\n      await conditionalTokensRepo.setApprovalForAll(marketInfo.lmsrAddress, true, account)\r\n    }\r\n\r\n    const outcomeTokenAmounts = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === selectedOutcomeToken ? formatedAmount.neg() : Web3.utils.toBN(0),\r\n    )\r\n    const profit = (await marketMakersRepo.calcNetCost(outcomeTokenAmounts)).neg()\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, profit, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const redeem = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n\r\n    const indexSets = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === 0 ? 1 : parseInt(Math.pow(10, i).toString(), 2),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.redeemPositions(\r\n      collateral.address,\r\n      `0x${'0'.repeat(64)}`,\r\n      marketInfo.conditionId,\r\n      indexSets,\r\n      account,\r\n    )\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const close = async () => {\r\n    const tx = await marketMakersRepo.close(account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const resolve = async (resolutionOutcomeIndex: Array<Boolean>) => {\r\n    // const payouts = Array.from(\r\n    //   { length: marketInfo.outcomes.length },\r\n    //   (value: any, index: number) => (index === resolutionOutcomeIndex ? 1 : 0),\r\n    // )\r\n    const payouts = Array.from(\r\n      resolutionOutcomeIndex, (value: any, index: number) => (value === true ? 1 : 0),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.reportPayouts(marketInfo.questionId, payouts, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const isMarketClosed =\r\n    isConditionLoaded && MarketStage[marketInfo.stage].toString() === MarketStage.Closed.toString()\r\n  return (\r\n    <Layout\r\n      account={account}\r\n      isConditionLoaded={isConditionLoaded}\r\n      isMarketClosed={isMarketClosed}\r\n      marketInfo={marketInfo}\r\n      setSelectedAmount={setSelectedAmount}\r\n      selectedAmount={selectedAmount}\r\n      setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n      selectedOutcomeToken={selectedOutcomeToken}\r\n      buy={buy}\r\n      sell={sell}\r\n      redeem={redeem}\r\n      close={close}\r\n      resolve={resolve}\r\n      oracle={oracle}\r\n      creator={creator}\r\n      createTime={createTime}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Market\r\n"],"sourceRoot":""}