{"version":3,"sources":["components/MarketPage/CurrentMarket.tsx","logic/contracts.ts","utils/markets.ts","components/Market/Progress.tsx","components/Market/TradingForm.tsx","components/Market/BuyModel.tsx","components/Market/SellModel.tsx","components/Market/RedeemModel.tsx","components/Market/TradingActions.tsx","components/Market/Layout.tsx","logic/ConditionalTokens/index.ts","logic/ConditionalTokens/ConditionalTokensRepo.ts","logic/MarketMakers/index.ts","logic/MarketMakers/MarketMakersRepo.ts","components/Market/index.tsx"],"names":["CurrentMarket","web3","account","MARKET_QUERY","gql","useQuery","fetchPolicy","loading","error","data","refetch","console","log","lmsrmarketMakers","lmsrmarketMaker","d","Date","now","parseInt","creationTimestamp","lmsrAddress","id","questionId","outcomeCount","outcomeSlotCount","oracle","creator","questionType","createTime","className","CurrentMarketProvider","client","ApolloClient","uri","process","cache","InMemoryCache","contracts","lmsrAddressCache","providerAccountCache","TruffleContract","require","loadLMSRMarketMakerContract","a","LMSRMarketMaker","lmsrMarketMakerContract","setProvider","currentProvider","loadConditionalTokensContract","ConditionalTokens","conditionalTokensContract","loadWETH9Contract","YAKI","weth9Contract","loadContracts","undefined","LMSRMarketMakerContract","ConditionalTokensContract","WETH9Contract","at","lmsrMarketMaker","pmSystem","conditionalTokens","collateralToken","address","contract","name","decimals","symbol","getConditionId","oracleAddress","Web3","utils","soliditySha3","t","v","getPositionId","collectionId","CloseProgress","Container","fluid","Row","Col","md","sm","styles","circleRed","ProgressBar","label","toFixed","circleGray","ResolveProgress","EndProgress","Progress","stage","useState","TradingForm","isMarketClosed","marketInfo","setSelectedOutcomeToken","setSelectedAmount","selectedOutcomeToken","Form","Group","outcomes","map","outcome","index","payoutDenominator","payoutNumerator","rightOutcome","wrongOutcome","join","Check","type","onChange","e","checked","Label","link","href","title","variant","parseFloat","probability","toString","outcomeInfo","balance","BuyingModal","buyFunc","approveFunc","setModalShow","modelShow","selectedAmount","calcCost","useEffect","updateConstInfo","checkInfo","collateralBalance","isEnoughBalance","setIsEnoughBalance","isApproving","setIsApproving","isError","setIsError","errorInfo","setErrorInfo","baseCost","fee","potentialProfit","total","costInfo","setCostInfo","buyAmount","approve","then","catch","parms","cost","resultCount","costInfoDic","checkInput","value","target","Modal","show","onHide","Body","controlId","InputGroup","Control","readOnly","Text","placeholder","Spinner","as","animation","role","Footer","Button","onClick","disabled","SellingModal","sellFunc","isExecuting","setIsExecuting","RedeemModal","redeemFunc","Table","striped","bordered","hover","den","i","length","computeTotal","TraderActions","redeem","buy","sell","calcProfit","buyShow","setBuyShow","sellShow","setSellShow","redeemShow","setRedeemShow","actions","OperatorActions","close","OracleActions","resolve","Array","fill","checkedState","setCheckedState","short","position","updatedCheckedState","item","handleOnChange","htmlFor","Layout","stage1_duration","stage2_duration","isConditionLoaded","closeDelay","resolveDelay","diff","getTime","nowProgress","diffDays","Math","ceil","startDate","getFullYear","getMonth","getDate","getHours","getMinutes","remainDays","conditon","xs","lg","funding","totalVolume","toLowerCase","SpinnerPage","conditionalTokensRepo","assert","ConditionalTokensRepo","balanceOf","positionId","getOutcomeSlotCount","getCollectionId","parentCollectionId","conditionId","indexSet","payoutNumerators","outcomeIndex","isApprovedForAll","lmsrMarketMakerAddress","setApprovalForAll","approved","from","reportPayouts","payouts","redeemPositions","collateralAddress","marketConditionId","indexSets","this","loadConditionalTokensRepo","marketMakersRepo","MarketMakersRepo","getAddress","getCollateralToken","conditionIds","owner","calcNetCost","outcomeTokenAmounts","calcMarginalPrice","trade","tradeAmounts","collateralLimit","loadMarketMakersRepo","bs58","BigNumber","config","EXPONENTIAL_AT","MarketStage","utf8decoder","TextDecoder","getIpfsHashFromBytes32","bytes32Hex","hashHex","slice","hashBytes","Buffer","encode","Market","setIsConditionLoaded","setMarketInfo","create","getMarketInfo","init","collateral","cid","stream","cat","chunk","decode","markets","JSON","parse","totalSupply","allowancePoint","pow","repeat","dividedBy","push","marketData","amount","amount_str","toLocaleString","useGrouping","maximumFractionDigits","formatedAmount","toBN","gt","approvePoint","tx","neg","profit","resolutionOutcomeIndex","Closed"],"mappings":"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","file":"static/js/13.6cd12bff.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\n// import { useParams } from 'react-router-dom';\r\n// import MarketLayout from './MarketLayout'\r\n// const Market = lazy(() => import('src/components/Market/index'))\r\nimport Market from 'src/components/Market'\r\n\r\n\r\n\r\ntype MarketProviderProps = {\r\n    web3: any\r\n    account: string\r\n}\r\n\r\n\r\nconst CurrentMarketProvider: React.FC<MarketProviderProps> = ({ web3, account }) => {\r\n\r\n    //@ts-ignore\r\n    // let { address } = useParams();\r\n\r\n    //@ts-ignore\r\n    const client = new ApolloClient({\r\n        uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n        // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n        cache: new InMemoryCache()\r\n    });\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            {account && web3 ? (\r\n                <CurrentMarket web3={web3} account={account}></CurrentMarket>) : (\r\n                <div> Connect your account first </div>\r\n            )\r\n            }\r\n        </ApolloProvider>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nconst CurrentMarket: React.FC<MarketProviderProps> = ({ web3, account }) => {\r\n\r\n    const MARKET_QUERY = gql`\r\n    query lsmrMarkets($id: String) {\r\n        lmsrmarketMakers(orderBy: creationTimestamp, orderDirection: desc, first:1, where:{questionType: 0}) {\r\n          id\r\n          creator\r\n          creationTimestamp\r\n          collateralToken\r\n          conditions {\r\n            id\r\n            oracle\r\n            questionId\r\n            outcomeSlotCount\r\n          }\r\n          funding\r\n          fee\r\n          condition {\r\n            id\r\n          }\r\n          oracle\r\n          questionId\r\n          outcomeSlotCount\r\n          questionType\r\n        }\r\n   }\r\n  `\r\n    const { loading, error, data, refetch } = useQuery(MARKET_QUERY, {\r\n        fetchPolicy: \"no-cache\"\r\n    }\r\n    )\r\n\r\n    if (loading) return <p>Loading...</p>\r\n\r\n    if (error) return <p>Error :</p>\r\n\r\n    console.log(data.lmsrmarketMakers)\r\n\r\n    const lmsrmarketMaker = data.lmsrmarketMakers[0]\r\n    let d: Date = new Date(Date.now())\r\n    if (lmsrmarketMaker) {\r\n        d = new Date(parseInt(lmsrmarketMaker.creationTimestamp) * 1000);\r\n    }\r\n    // let d: Date = new Date(parseInt(lmsrmarketMaker.creationTimestamp) * 1000);  \r\n    // var datestring = d.getDate()  + \"-\" + (d.getMonth()+1) + \"-\" + d.getFullYear() + \" \" +d.getHours() + \":\" + d.getMinutes()\r\n    // console.log(datestring)\r\n    // console.trace()\r\n\r\n    return (\r\n        <>\r\n            {lmsrmarketMaker ? (\r\n                <>\r\n                    <Market\r\n                        web3={web3}\r\n                        account={account}\r\n                        lmsrAddress={lmsrmarketMaker.id}\r\n                        questionId={lmsrmarketMaker.questionId}\r\n                        outcomeCount={lmsrmarketMaker.outcomeSlotCount}\r\n                        oracle={lmsrmarketMaker.oracle}\r\n                        creator={lmsrmarketMaker.creator}\r\n                        questionType={lmsrmarketMaker.questionType}\r\n                        createTime={d} \r\n                        />\r\n                </>\r\n            ) : (\r\n                <h1 className=\"text-center\">No data found</h1>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CurrentMarketProvider","import React, { lazy } from 'react'\r\n\r\n\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet contracts: Object | undefined\r\nlet lmsrAddressCache: string | undefined\r\nlet providerAccountCache: string | undefined\r\n\r\nconst resetContracts = () => {\r\n  contracts = undefined\r\n  lmsrAddressCache = undefined\r\n  providerAccountCache = undefined\r\n}\r\n\r\nconst loadLMSRMarketMakerContract = async (web3: any) => {\r\n  let lmsrMarketMakerContract\r\n  if (!contracts) {\r\n    const LMSRMarketMaker = require('../abi/LMSRMarketMaker.min.json')\r\n    lmsrMarketMakerContract = TruffleContract(LMSRMarketMaker)\r\n    lmsrMarketMakerContract.setProvider(web3.currentProvider)\r\n  }\r\n  return lmsrMarketMakerContract\r\n}\r\n\r\nconst loadConditionalTokensContract = async (web3: any) => {\r\n  let conditionalTokensContract\r\n  if (!contracts) {\r\n    const ConditionalTokens = require('../abi/ConditionalTokens.min.json')\r\n    conditionalTokensContract = TruffleContract(ConditionalTokens)\r\n    conditionalTokensContract.setProvider(web3.currentProvider)\r\n  }\r\n  return conditionalTokensContract\r\n}\r\n\r\nconst loadWETH9Contract = async (web3: any) => {\r\n  let weth9Contract\r\n  if (!contracts) {\r\n    // weth9Contract = TruffleContract(WETH9)\r\n\r\n    const YAKI = require('../abi/YAKIID.min.json')\r\n    weth9Contract = TruffleContract(YAKI)\r\n    weth9Contract.setProvider(web3.currentProvider)\r\n  }\r\n  return weth9Contract\r\n}\r\n\r\nconst loadContracts = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetContracts()\r\n    }\r\n    if (!contracts) {\r\n      providerAccountCache = account\r\n      lmsrAddressCache = lmsrAddress\r\n\r\n      const LMSRMarketMakerContract = await loadLMSRMarketMakerContract(web3)\r\n      const ConditionalTokensContract = await loadConditionalTokensContract(web3)\r\n      const WETH9Contract = await loadWETH9Contract(web3)\r\n      try {\r\n        const lmsrMarketMaker = await LMSRMarketMakerContract.at(lmsrAddress)\r\n        const conditionalTokens = await ConditionalTokensContract.at(await lmsrMarketMaker.pmSystem())\r\n\r\n        const collateralToken = {\r\n          address: await lmsrMarketMaker.collateralToken(),\r\n          contract: await WETH9Contract.at(await lmsrMarketMaker.collateralToken()),\r\n          name: 'YAKI TOKEN',\r\n          decimals: 18,\r\n          symbol: 'YAKI',\r\n        }\r\n\r\n        contracts = { lmsrMarketMaker, conditionalTokens, collateralToken }\r\n      }\r\n      catch (error) {\r\n        console.log('error')\r\n      }\r\n    }\r\n    return contracts\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadContracts\r\n","import Web3 from 'web3'\r\n\r\nexport const getConditionId = (\r\n  oracleAddress: string,\r\n  questionId: string,\r\n  outcomeSlotCount: number,\r\n) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: oracleAddress },\r\n    { t: 'bytes32', v: questionId },\r\n    { t: 'uint', v: outcomeSlotCount },\r\n  )\r\n}\r\n\r\nexport const getPositionId = (collateralToken: string, collectionId: string) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: collateralToken },\r\n    { t: 'bytes32', v: collectionId },\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport styles from 'src/components/style.module.css'\r\n\r\ntype ProgressProperty = {\r\n    now: number\r\n    stage: number\r\n}\r\n\r\ntype StageProperty = {\r\n    now: number\r\n}\r\n\r\nconst CloseProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={0} label={`${0}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ResolveProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst EndProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Progress: React.FC<ProgressProperty> = ({\r\n    now,\r\n    stage\r\n}) => {\r\n\r\n    const [currentStage, setCurrentStage] = useState<number>(0)\r\n\r\n    const data = () => {\r\n        switch (stage) {\r\n            case 0:\r\n                return (\r\n                    <CloseProgress now={now}></CloseProgress>\r\n                )\r\n            case 1:\r\n                return (\r\n                    <ResolveProgress now={now}></ResolveProgress>\r\n                )\r\n            case 2:\r\n                return (\r\n                    <EndProgress now={now}></EndProgress>\r\n                )\r\n\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div>\r\n            {data()}\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default Progress\r\n","import React, { useState } from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport styles from '../style.module.css'\r\n\r\ntype TradingFormProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n}\r\n\r\nconst TradingForm: React.FC<TradingFormProps> = ({\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n}) => (\r\n  <>\r\n    <Form>\r\n      {/* <div className={styles.inputContainer}>\r\n      <TextField\r\n        variant=\"filled\"\r\n          label=\"Collateral value\"\r\n          type=\"number\"\r\n          onChange={e => setSelectedAmount(e.target.value)}\r\n          disabled={isMarketClosed}\r\n        />\r\n      </div> */}\r\n      {/* <Form.Group className=\"mb-3\" controlId='amount'>\r\n        <Form.Label>Yaki</Form.Label>\r\n      </Form.Group> */}\r\n\r\n      <Form.Group>\r\n        {/* <Form.Check type=\"checkbox\" label\r\n        <RadioGroup\r\n          defaultValue={0}\r\n          onChange={e => setSelectedOutcomeToken(parseInt(e.target.value))}\r\n          value={selectedOutcomeToken}\r\n        > */}\r\n        <Row className=\"mt-4\">\r\n          <Col sm md={7}>\r\n            <p className=\"text-center\">Trend</p>\r\n          </Col>\r\n          <Col sm md={2}>\r\n            <p>Price(YakID)</p>\r\n          </Col>\r\n          <Col sm md={3}>\r\n            <p>MyShares</p>\r\n          </Col>\r\n\r\n        </Row>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <div\r\n            key={outcome.title}\r\n            className={[\r\n              styles.outcome,\r\n              marketInfo.payoutDenominator > 0 && outcome.payoutNumerator > 0 && styles.rightOutcome,\r\n              marketInfo.payoutDenominator > 0 &&\r\n              !(outcome.payoutNumerator > 0) &&\r\n              styles.wrongOutcome,\r\n            ].join(' ')}\r\n          >\r\n            {/* <FormControlLabel\r\n                value={!isMarketClosed ? outcome.index : 'disabled'}\r\n                control={<Radio color=\"primary\" />}\r\n                label={outcome.title}\r\n              /> */}\r\n            <Row>\r\n              <Col sm md={1}>\r\n                <Form.Check type=\"radio\" id={`checkitem${index}`} name=\"checkitems\" onChange={e => setSelectedOutcomeToken(index)} checked={index == selectedOutcomeToken}>\r\n                </Form.Check>\r\n              </Col>\r\n              <Col sm md={6}>\r\n                <Row className=\"d-inline\">\r\n                  <Form.Label>{outcome.link ? (<a href={outcome.link}>{outcome.title}</a>) : (outcome.title)}</Form.Label>\r\n                </Row>\r\n                <Row>\r\n                  <div>\r\n                    <ProgressBar className=\"pl-0 ml-0 pr-0 mr-0\" variant=\"custom\" now={parseFloat(outcome.probability.toString()) * 100} label={`${(parseFloat(outcome.probability.toString()) * 100).toFixed(2)}%`}></ProgressBar>\r\n                  </div>\r\n                </Row>\r\n              </Col>\r\n              <Col sm md={2}>\r\n                <div className={styles.outcomeInfo}>{outcome.probability.toString()}</div>\r\n              </Col>\r\n              <Col sm md={3}>\r\n                <div className={styles.outcomeInfo}>\r\n                  {outcome.balance.toFixed(5).toString()}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ))}\r\n        {/* </RadioGroup> */}\r\n      </Form.Group>\r\n    </Form >\r\n  </>\r\n)\r\n\r\nexport default TradingForm","import React, { useState, useEffect } from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\n\r\ntype BuyingModalProps = {\r\n    buyFunc: any\r\n    approveFunc: any\r\n    setModalShow: any\r\n    modelShow: boolean\r\n    marketInfo: any\r\n    isMarketClosed: boolean\r\n    selectedAmount: string\r\n    setSelectedAmount: any\r\n    calcCost: any\r\n}\r\n\r\nconst BuyingModal: React.FC<BuyingModalProps> = ({\r\n    buyFunc,\r\n    approveFunc,\r\n    setModalShow,\r\n    modelShow,\r\n    marketInfo,\r\n    isMarketClosed,\r\n    selectedAmount,\r\n    setSelectedAmount,\r\n    calcCost\r\n}) => {\r\n\r\n    useEffect(() => {\r\n        updateConstInfo(selectedAmount)\r\n        checkInfo()\r\n    }, [])\r\n\r\n    const [isEnoughBalance, setIsEnoughBalance] = useState<boolean>(parseFloat(selectedAmount) < parseFloat(marketInfo.collateralBalance))\r\n    const [isApproving, setIsApproving] = useState<boolean>(false)\r\n    const [isError, setIsError] = useState<boolean>(false)\r\n    const [errorInfo, setErrorInfo] = useState<string>(\"\")\r\n    const min_buy = 1\r\n    const [costInfo, setCostInfo] = useState<any>({\r\n        baseCost: 0,\r\n        fee: 0,\r\n        potentialProfit: 0,\r\n        total: 0\r\n    })\r\n\r\n    const checkInfo = () => {\r\n        var buyAmount = parseFloat(selectedAmount)\r\n        var balance = parseFloat(marketInfo.collateralBalance)\r\n        if (balance < buyAmount) {\r\n            setIsEnoughBalance(false)\r\n        }\r\n    }\r\n    // checkInfo()\r\n\r\n    const buy = () => {\r\n        var buyAmount = parseFloat(selectedAmount)\r\n        var balance = parseFloat(marketInfo.collateralBalance)\r\n        setIsApproving(true)\r\n        buyFunc().then(() => {\r\n            if (balance < buyAmount) {\r\n                setIsEnoughBalance(false)\r\n            }\r\n        }).catch(() => { console.log(\"something is wrong\") })\r\n            .then(() => setIsApproving(false))\r\n    }\r\n\r\n    const approve = async () => {\r\n        var buyAmount = parseFloat(selectedAmount)\r\n        var balance = parseFloat(marketInfo.collateralBalance)\r\n        if (balance >= buyAmount) {\r\n            console.log('bigger')\r\n            setIsEnoughBalance(true)\r\n        } else {\r\n            console.log('approving')\r\n            setIsApproving(true)\r\n            approveFunc()\r\n                .then(() => setIsEnoughBalance(true), () => setIsEnoughBalance(false))\r\n                .catch(() => { console.log(\"something is wrong\") })\r\n                .then(() => setIsApproving(false))\r\n        }\r\n        console.log('isApproving :' + isApproving)\r\n        console.log('balance :' + balance)\r\n        console.log('buyAmount : ' + buyAmount)\r\n\r\n    }\r\n\r\n\r\n    const updateConstInfo = async (parms: string) => {\r\n        if (parms != \"\") {\r\n            const cost = await calcCost(parms)\r\n            const resultCount = marketInfo.resultCount ? (parseFloat(marketInfo.resultCount)) : 1\r\n            const costInfoDic = {\r\n                baseCost: cost,\r\n                fee: 0,\r\n                potentialProfit: parseFloat(parms) / resultCount - parseFloat(cost),\r\n                total: parms\r\n            }\r\n\r\n            setCostInfo(costInfoDic)\r\n\r\n            console.log(costInfo)\r\n        }\r\n\r\n    }\r\n\r\n    const checkInput = async (e: any) => {\r\n        var value = e.target.value\r\n        value = parseFloat(value)\r\n\r\n        if (value < min_buy) {\r\n            setIsError(true)\r\n            setErrorInfo(`The output share should bigger than ${min_buy}`)\r\n        } else {\r\n            setIsError(false)\r\n            setSelectedAmount(e.target.value)\r\n            updateConstInfo(e.target.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n\r\n                <Modal.Body>\r\n                    {/* <p>Modal body text goes here.</p> */}\r\n                    <Row>\r\n                        <Col md={5}>\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n                                <Form.Label>Approved Tokens</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"number\" readOnly value={marketInfo.collateralBalance} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>I Want：</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"number\" placeholder=\"Enter output shares \" onChange={e => checkInput(e)} value={selectedAmount} readOnly={isApproving} />\r\n                                    <InputGroup.Text>{isEnoughBalance ? ('Shares') : ('YAKID')} </InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={7}>\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n\r\n                                <Form.Label>Base Cost</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={isEnoughBalance? (`${costInfo.baseCost}`) :(\"*\")} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Fee</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control placeholder=\"Enter output shares \" readOnly value={isEnoughBalance? (`${costInfo.fee}`) : (\"*\")} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n                                <Form.Label>Potential Profit</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={isEnoughBalance? (`${costInfo.potentialProfit.toFixed(2)}`) : (\"*\")} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Total</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={isEnoughBalance? (`${costInfo.total}`) : (\"*\")} />\r\n                                    <InputGroup.Text>Shares</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <div className={isError ? ('d-block') : ('d-none')}>\r\n                            <span>{errorInfo}</span>\r\n                        </div>\r\n                        <div className={isApproving ? ('d-block') : ('d-none')}>\r\n                            <Spinner as=\"span\" animation=\"border\" role=\"status\">\r\n                            </Spinner>\r\n                            <span>Executing... Please dont close this window</span>\r\n                        </div>\r\n                    </Row>\r\n                </Modal.Body>\r\n\r\n\r\n                <Modal.Footer className=\"d-flex justify-content-between\">\r\n                    <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n                    <Button variant=\"primary\" onClick={() => { approve() }} className={isEnoughBalance ? ('d-none') : ('d-block')} disabled={isApproving}>Approve</Button>\r\n\r\n\r\n                    <Button variant=\"primary\" onClick={buy} className={isEnoughBalance ? ('d-block') : ('d-none')} disabled={isApproving}>Buy</Button>\r\n\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default BuyingModal","import React, { useState, useEffect } from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\n\r\ntype SellingModalProps = {\r\n    sellFunc: any\r\n    setModalShow: any\r\n    modelShow: boolean\r\n    marketInfo: any\r\n    isMarketClosed: boolean\r\n    selectedAmount: string\r\n    setSelectedAmount: any\r\n    calcCost: any\r\n    selectedOutcomeToken: number\r\n}\r\n\r\n\r\nconst SellingModal: React.FC<SellingModalProps> = ({\r\n    sellFunc,\r\n    setModalShow,\r\n    modelShow,\r\n    marketInfo,\r\n    isMarketClosed,\r\n    selectedAmount,\r\n    setSelectedAmount,\r\n    calcCost,\r\n    selectedOutcomeToken\r\n}) => {\r\n    const [isExecuting, setIsExecuting] = useState<boolean>(false)\r\n    const [isError, setIsError] = useState<boolean>(false)\r\n    const [errorInfo, setErrorInfo] = useState<string>(\"\")\r\n    const [costInfo, setCostInfo] = useState<any>({\r\n        baseCost: 0,\r\n        fee: 0,\r\n        total: 0\r\n    })\r\n    const min_buy = 1\r\n        useEffect(() => {\r\n        updateConstInfo(selectedAmount)\r\n    }, [])\r\n\r\n    const sell = () => {\r\n        var buyAmount = parseFloat(selectedAmount)\r\n        var balance = parseFloat(marketInfo.collateralBalance)\r\n        setIsExecuting(true)\r\n        sellFunc().then(\r\n            ()=>{console.log('selling')}).catch(() => {console.log('something wrong')}).then(() => setIsExecuting(false))\r\n    }\r\n\r\n    const updateConstInfo = async (parms: string) => {\r\n        if (parms != \"\") {\r\n            const cost = await calcCost(parms)\r\n\r\n            const costInfoDic = {\r\n                baseCost: parms,\r\n                fee: 0,\r\n                total: cost\r\n            }\r\n\r\n            setCostInfo(costInfoDic)\r\n\r\n            console.log(costInfo)\r\n        }\r\n\r\n    }\r\n    const checkInput = async (e: any) => {\r\n        var value = e.target.value\r\n        value = parseFloat(value)\r\n\r\n        if (value < min_buy) {\r\n            setIsError(true)\r\n            setErrorInfo(`The output share should bigger than ${min_buy}`)\r\n        } else if(value > marketInfo.outcomes[selectedOutcomeToken].balance){\r\n            setIsError(true)\r\n            setErrorInfo(`The output share should lower than balance`)\r\n        }else\r\n        {\r\n            setIsError(false)\r\n            setSelectedAmount(e.target.value)\r\n            updateConstInfo(e.target.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n\r\n                <Modal.Body>\r\n                    {/* <p>Modal body text goes here.</p> */}\r\n                    <Row>\r\n                        <Col md={5}>\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n                                <Form.Label>Shell Balance</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"number\" readOnly value={marketInfo.outcomes[selectedOutcomeToken].balance.toFixed(2).toString()} />\r\n                                    <InputGroup.Text>Shares</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Sell Shares</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control type=\"number\" placeholder=\"Enter output shares \" onChange={e => checkInput(e)} value={selectedAmount} readOnly={isExecuting} />\r\n                                    <InputGroup.Text>Shares</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={7}>\r\n                            <Form.Group className=\"mb-3 d-line\" controlId=\"formApproveBalance\">\r\n\r\n                                <Form.Label>Base Cost</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={`${costInfo.baseCost}`} />\r\n                                    <InputGroup.Text>Shares</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Fee</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control placeholder=\"Enter output shares \" readOnly value={`${costInfo.fee}`} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Label>Total</Form.Label>\r\n                                <InputGroup>\r\n                                    <Form.Control readOnly value={`${costInfo.total}`} />\r\n                                    <InputGroup.Text>YAKID</InputGroup.Text>\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <div className={isError ? ('d-block') : ('d-none')}>\r\n                            <span>{errorInfo}</span>\r\n                        </div>\r\n                        <div className={isExecuting ? ('d-block') : ('d-none')}>\r\n                            <Spinner as=\"span\" animation=\"border\" role=\"status\">\r\n                            </Spinner>\r\n                            <span>Executing... Please dont close this window</span>\r\n                        </div>\r\n                    </Row>\r\n                </Modal.Body>\r\n\r\n\r\n                <Modal.Footer className=\"d-flex justify-content-between\">\r\n                    <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n                    <Button variant=\"primary\" onClick={sell} disabled={isExecuting}>Sell</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SellingModal","import React, { useState, useEffect } from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner, Table } from \"react-bootstrap\"\r\n\r\ntype RedeemModalProps = {\r\n    redeemFunc: any\r\n    setModalShow: any\r\n    modelShow: boolean\r\n    marketInfo: any\r\n}\r\n\r\nconst RedeemModal: React.FC<RedeemModalProps> = ({\r\n    redeemFunc,\r\n    setModalShow,\r\n    modelShow,\r\n    marketInfo\r\n}) => {\r\n    const [isExecuting, setIsExecuting] = useState<boolean>(false)\r\n\r\n    const redeem = () => {\r\n        setIsExecuting(true)\r\n        redeemFunc().then(() => {\r\n            console.log('redeeming')\r\n        }).catch(\r\n            () => {\r\n                console.log('something is wrong')\r\n            }\r\n        ).then(() => setIsExecuting(false))\r\n    }\r\n\r\n    const computeTotal = () => {\r\n        let total = 0\r\n        let den = parseFloat(marketInfo.payoutDenominator.toString())\r\n        for (let i = 0; i < marketInfo.outcomes.length; i++) {\r\n            let outcome = marketInfo.outcomes[i]\r\n            let numerator = parseFloat(outcome.payoutNumerator.toString())\r\n            let balance = parseFloat(outcome.balance.toFixed(5).toString())\r\n            total = total + (numerator / den) * balance\r\n        }\r\n        return total.toFixed(2)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n                <Modal.Body>\r\n                    <Row>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Choice</th>\r\n                                    <th>Payouts</th>\r\n                                    <th>Balances</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n\r\n                                    marketInfo.outcomes.map((outcome: any, index: number) => (\r\n                                        <tr>\r\n                                            <td>{index}</td>\r\n                                            <td>{outcome.payoutNumerator.toString() != '0' ? (`${outcome.payoutNumerator.toString()} / ${marketInfo.payoutDenominator.toString()}`) : (`${outcome.payoutNumerator.toString()}`)} YAKID/Share</td>\r\n                                            <td>{outcome.balance.toFixed(2).toString()} Shares</td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Row>\r\n                    <Row>\r\n                                <p>In total: {computeTotal()} YAKID</p>\r\n                    </Row>\r\n                    <Row>\r\n                        <div className={isExecuting ? ('d-block') : ('d-none')}>\r\n                            <Spinner as=\"span\" animation=\"border\" role=\"status\">\r\n                            </Spinner>\r\n                            <span>Executing... Please dont close this window</span>\r\n                        </div>\r\n                    </Row>\r\n\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer className=\"d-flex justify-content-between\">\r\n                    <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n                    <Button variant=\"primary\" onClick={redeem} disabled={isExecuting}>Redeem</Button>\r\n                </Modal.Footer>\r\n\r\n            </Modal>\r\n\r\n        </>)\r\n}\r\n\r\nexport default RedeemModal","import React, { useState } from 'react'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport styles from '../style.module.css'\r\nimport BuyingModal from 'src/components/Market/BuyModel'\r\nimport TradingModal from './TradingModel'\r\nimport SellingModal from 'src/components/Market/SellModel'\r\nimport RedeemModal from 'src/components/Market/RedeemModel'\r\n\r\ntype TraderActionsProps = {\r\n    marketInfo: any\r\n    isMarketClosed: boolean\r\n    selectedAmount: string\r\n    redeem: any\r\n    approve: any\r\n    buy: any\r\n    sell: any\r\n    setSelectedAmount: any\r\n    calcCost: any\r\n    selectedOutcomeToken: number\r\n    calcProfit: any\r\n}\r\n\r\nconst TraderActions: React.FC<TraderActionsProps> = ({\r\n    marketInfo,\r\n    isMarketClosed,\r\n    selectedAmount,\r\n    redeem,\r\n    approve,\r\n    buy,\r\n    sell,\r\n    setSelectedAmount,\r\n    calcCost,\r\n    selectedOutcomeToken,\r\n    calcProfit\r\n}) => {\r\n    const [buyShow, setBuyShow] = useState(false)\r\n    const [sellShow, setSellShow] = useState(false)\r\n    const [redeemShow, setRedeemShow] = useState(false)\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.actions}>\r\n                <Button\r\n                    variant=\"outline-dark\"\r\n                    onClick={() => setRedeemShow(true)}\r\n                    // onClick={redeem}\r\n                    disabled={!isMarketClosed || !marketInfo.payoutDenominator}\r\n                    className=\"align-self-start\"\r\n                >\r\n                    Redeem\r\n                </Button>\r\n                <Button variant=\"outline-dark\"\r\n                    onClick={() => setBuyShow(true)}\r\n                    // onClick={buy} \r\n                    disabled={isMarketClosed}\r\n                    className=\"justify-content-end\"\r\n                >\r\n                    Buy\r\n                </Button>\r\n                <Button variant=\"outline-dark\"\r\n                    onClick={() => setSellShow(true)}\r\n                    // onClick={sell}\r\n                    disabled={isMarketClosed}\r\n                    className=\"justify-content-start\"\r\n                >\r\n                    Sell\r\n                </Button>\r\n\r\n                <BuyingModal buyFunc={buy} approveFunc={approve} modelShow={buyShow}\r\n                    setModalShow={setBuyShow}\r\n                    marketInfo={marketInfo}\r\n                    isMarketClosed={isMarketClosed}\r\n                    selectedAmount={selectedAmount}\r\n                    setSelectedAmount={setSelectedAmount}\r\n                    calcCost={calcCost}\r\n                >\r\n                </BuyingModal>\r\n\r\n                <SellingModal sellFunc={sell} modelShow={sellShow} setModalShow={setSellShow}\r\n                    marketInfo={marketInfo}\r\n                    isMarketClosed={isMarketClosed}\r\n                    selectedAmount={selectedAmount}\r\n                    setSelectedAmount={setSelectedAmount}\r\n                    calcCost={calcProfit}\r\n                    selectedOutcomeToken={selectedOutcomeToken}\r\n                ></SellingModal>\r\n                <RedeemModal redeemFunc={redeem} modelShow={redeemShow} setModalShow={setRedeemShow}\r\n                    marketInfo={marketInfo}\r\n                ></RedeemModal>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TraderActions","import React from 'react'\r\n// import { Paper, Button, TextField, RadioGroup, FormControlLabel, Radio} from '@material-ui/core'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport { Link, NavLink } from 'react-router-dom'\r\n\r\nimport styles from '../style.module.css'\r\nimport { useState, useEffect } from \"react\"\r\n//@ts-ignore\r\nimport Progress from 'src/components/Market/Progress'\r\nimport SpinnerPage from 'src/components/SpinnerPage'\r\nimport TradingForm from './TradingForm'\r\nimport TraderActions from './TradingActions'\r\n\r\n\r\ntype OperatorActionsProps = {\r\n  isMarketClosed: boolean\r\n  close: any\r\n}\r\n\r\ntype OracleActionsProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  resolve: any\r\n}\r\n\r\n\r\n\r\n\r\ntype LayoutProps = {\r\n  account: string\r\n  isConditionLoaded: boolean\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  selectedAmount: string\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n  approve: any\r\n  buy: any\r\n  sell: any\r\n  redeem: any\r\n  close: any\r\n  resolve: any\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n  calcCost: any\r\n  calcProfit: any\r\n}\r\n\r\n\r\nconst OperatorActions: React.FC<OperatorActionsProps> = ({ isMarketClosed, close }) => (\r\n  <>\r\n    <h3>Operator actions:</h3>\r\n    <Button variant=\"danger\" onClick={close} disabled={isMarketClosed}>\r\n      Close\r\n    </Button>\r\n  </>\r\n)\r\n\r\nconst OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => {\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(marketInfo.outcomes.length).fill(false)\r\n  );\r\n\r\n  const handleOnChange = (position: any) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Oracle actions:</h3>\r\n      <div>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <li key={index}>\r\n            <input\r\n              type=\"checkbox\"\r\n              id={`custom-checkbox-${index}`}\r\n              name={outcome.short}\r\n              value={outcome.title}\r\n              checked={checkedState[index]}\r\n              onChange={() => handleOnChange(index)}\r\n            />\r\n            <label htmlFor={`custom-checkbox-${index}`}> {outcome.title} </label>\r\n          </li>\r\n        ))}\r\n        <Button\r\n          onClick={() => resolve(checkedState)}\r\n          variant=\"contained\"\r\n          disabled={!isMarketClosed}\r\n        >Resolve</Button>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst Layout: React.FC<LayoutProps> = ({\r\n  account,\r\n  isConditionLoaded,\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  selectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n  approve,\r\n  buy,\r\n  sell,\r\n  redeem,\r\n  close,\r\n  resolve,\r\n  oracle,\r\n  creator,\r\n  createTime,\r\n  calcCost,\r\n  calcProfit\r\n}) => {\r\n\r\n  console.log(marketInfo)\r\n  var stage1_duration\r\n  var stage2_duration\r\n  if (marketInfo && marketInfo.closeDelay) {\r\n    stage1_duration = parseInt(marketInfo.closeDelay)\r\n\r\n  } else {\r\n    stage1_duration = marketInfo && marketInfo.questionType == 0 ? (4) : (3)\r\n  }\r\n\r\n  if (marketInfo && marketInfo.resolveDelay) {\r\n    stage2_duration = parseInt(marketInfo.resolveDelay)\r\n  } else {\r\n    stage2_duration = marketInfo && marketInfo.questionType == 0 ? (7) : (4)\r\n  }\r\n\r\n\r\n  var d = createTime\r\n\r\n  let nowDate: Date = new Date(Date.now())\r\n  var diff = nowDate.getTime() - d.getTime();\r\n  diff = diff > 0 ? diff : 0;\r\n  var diffDays = Math.ceil(diff / (1000 * 3600 * 24)) - 1;\r\n  var stage = isMarketClosed ? 1 : 0\r\n  console.log(stage)\r\n\r\n  if (isMarketClosed && marketInfo.payoutDenominator) {\r\n    stage = 2\r\n  }\r\n\r\n  var nowProgress\r\n  if (stage == 1) {\r\n    diffDays = diffDays - stage1_duration\r\n    diffDays = diffDays > 0 ? diffDays : 0\r\n    console.log('diffdays' + diffDays)\r\n    nowProgress = (diffDays / stage2_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration + stage2_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage2_duration + stage2_duration - diffDays\r\n\r\n  } else {\r\n    console.log('diffdays' + diffDays)\r\n    console.log('duration' + stage1_duration)\r\n\r\n    nowProgress = (diffDays / stage1_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage1_duration - diffDays\r\n\r\n  }\r\n  console.log(nowProgress)\r\n  console.log(stage)\r\n  console.log(oracle)\r\n\r\n  return (\r\n    <Container className={[styles.conditon].join(' ')}>\r\n      {isConditionLoaded ? (\r\n        <>\r\n          <Row className=\"justify-content-md-center mt-5\">\r\n            <Col xs sm lg=\"6\">\r\n              <Row>\r\n                <h2 className=\"text-center mb-5\">{marketInfo.title}</h2>\r\n              </Row>\r\n              <Row className=\"mt-2 pt-4 bg-transparent border border-primary\">\r\n                <Row>\r\n                  <Progress now={nowProgress} stage={stage}></Progress>\r\n                </Row>\r\n                <Row>\r\n\r\n                  <Col sm md={3} className=\"justify-content-md-center\">\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.funding}k Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Liqudity</p>\r\n                  </Col>\r\n                  <Col sm md={3}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.totalVolume}k Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Total Volume</p>\r\n\r\n                  </Col>\r\n                  <Col sm md={4}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {startDate} </strong></p>\r\n                    <p className=\"mt-0 text-center\">{stage == 0 ? (`Closing Date`) : (`Resolving Date`)}</p>\r\n                  </Col>\r\n                  <Col sm md={2}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {remainDays} days </strong></p>\r\n                    <p className=\"mt-0 text-center\">Remaining</p>\r\n                  </Col>\r\n\r\n                </Row>\r\n              </Row>\r\n              <Row className=\"mt-2 bg-transparent border border-primary\">\r\n                <TradingForm\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                  setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n                  selectedOutcomeToken={selectedOutcomeToken}\r\n                />\r\n              </Row>\r\n              <Row className=\"justify-content-end\">\r\n                <TraderActions\r\n                  marketInfo={marketInfo}\r\n                  isMarketClosed={isMarketClosed}\r\n                  selectedAmount={selectedAmount}\r\n                  redeem={redeem}\r\n                  approve={approve}\r\n                  buy={buy}\r\n                  sell={sell}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                  calcCost={calcCost}\r\n                  selectedOutcomeToken={selectedOutcomeToken}\r\n                  calcProfit={calcProfit}\r\n                />\r\n              </Row>\r\n              {account && account.toLowerCase() === creator && (\r\n                <OperatorActions isMarketClosed={isMarketClosed} close={close} />\r\n              )}\r\n              {account && account.toLowerCase() === oracle && (\r\n                <OracleActions\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  resolve={resolve}\r\n                />\r\n              )}\r\n            </Col>\r\n          </Row>\r\n\r\n        </>\r\n      ) : (\r\n        <div>\r\n          <SpinnerPage />\r\n        </div>\r\n      )}\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import ConditionalTokensRepo from './ConditionalTokensRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet conditionalTokensRepo: ConditionalTokensRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetConditionalTokensRepo = () => {\r\n  conditionalTokensRepo = undefined\r\n}\r\n\r\nconst loadConditionalTokensRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetConditionalTokensRepo()\r\n    }\r\n    if (!conditionalTokensRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      conditionalTokensRepo = new ConditionalTokensRepo(contracts)\r\n    }\r\n    return conditionalTokensRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadConditionalTokensRepo\r\n","const assert = require('assert')\r\n\r\nclass ConditionalTokensRepo {\r\n  conditionalTokens: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.conditionalTokens = contracts.conditionalTokens\r\n  }\r\n\r\n  balanceOf = async (account: string, positionId: number) => {\r\n    return this.conditionalTokens.balanceOf(account, positionId)\r\n  }\r\n\r\n  getOutcomeSlotCount = async (id: string) => {\r\n    return this.conditionalTokens.getOutcomeSlotCount(id)\r\n  }\r\n\r\n  getCollectionId = async (parentCollectionId: string, conditionId: string, indexSet: number[]) => {\r\n    return this.conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet)\r\n  }\r\n\r\n  payoutDenominator = async (conditionId: string) => {\r\n    return this.conditionalTokens.payoutDenominator(conditionId)\r\n  }\r\n\r\n  payoutNumerators = async (conditionId: string, outcomeIndex: number) => {\r\n    return this.conditionalTokens.payoutNumerators(conditionId, outcomeIndex)\r\n  }\r\n\r\n  isApprovedForAll = async (account: string, lmsrMarketMakerAddress: string) => {\r\n    return this.conditionalTokens.isApprovedForAll(account, lmsrMarketMakerAddress)\r\n  }\r\n\r\n  setApprovalForAll = async (lmsrMarketMakerAddress: string, approved: boolean, from: string) => {\r\n    return this.conditionalTokens.setApprovalForAll(lmsrMarketMakerAddress, approved, { from })\r\n  }\r\n\r\n  reportPayouts = async (questionId: string, payouts: number[], from: string) => {\r\n    return this.conditionalTokens.reportPayouts(questionId, payouts, { from })\r\n  }\r\n\r\n  redeemPositions = async (\r\n    collateralAddress: string,\r\n    parentCollectionId: string,\r\n    marketConditionId: string,\r\n    indexSets: number[],\r\n    from: string,\r\n  ) => {\r\n    return this.conditionalTokens.redeemPositions(\r\n      collateralAddress,\r\n      parentCollectionId,\r\n      marketConditionId,\r\n      indexSets,\r\n      { from },\r\n    )\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default ConditionalTokensRepo\r\n","import MarketMakersRepo from './MarketMakersRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet marketMakersRepo: MarketMakersRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetMarketMakersRepo = () => {\r\n  marketMakersRepo = undefined\r\n}\r\n\r\nconst loadMarketMakersRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetMarketMakersRepo()\r\n    }\r\n    if (!marketMakersRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      marketMakersRepo = new MarketMakersRepo(contracts)\r\n    }\r\n    return marketMakersRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadMarketMakersRepo\r\n","const assert = require('assert')\r\n\r\nclass MarketMakersRepo {\r\n  lmsrMarketMaker: any\r\n  collateralToken: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.lmsrMarketMaker = contracts.lmsrMarketMaker\r\n    this.collateralToken = contracts.collateralToken\r\n  }\r\n\r\n  getAddress = async () => {\r\n    return this.lmsrMarketMaker.address\r\n  }\r\n\r\n  getCollateralToken = async () => {\r\n    return this.collateralToken\r\n  }\r\n\r\n  conditionIds = async (index: number) => {\r\n    return this.lmsrMarketMaker.conditionIds(index)\r\n  }\r\n\r\n  owner = async () => {\r\n    return this.lmsrMarketMaker.owner()\r\n  }\r\n\r\n  funding = async () => {\r\n    return this.lmsrMarketMaker.funding()\r\n  }\r\n\r\n  stage = async () => {\r\n    return this.lmsrMarketMaker.stage()\r\n  }\r\n\r\n  close = async (from: string) => {\r\n    return this.lmsrMarketMaker.close({ from })\r\n  }\r\n\r\n  calcNetCost = async (outcomeTokenAmounts: number[]) => {\r\n    return this.lmsrMarketMaker.calcNetCost(outcomeTokenAmounts)\r\n  }\r\n\r\n  calcMarginalPrice = async (outcomeIndex: number) => {\r\n    return this.lmsrMarketMaker.calcMarginalPrice(outcomeIndex)\r\n  }\r\n\r\n  trade = async (tradeAmounts: number[], collateralLimit: number, from: string) => {\r\n    return this.lmsrMarketMaker.trade(tradeAmounts, collateralLimit, { from })\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default MarketMakersRepo\r\n","import React, { useState, useEffect } from 'react'\r\nimport loadConditionalTokensRepo from 'src/logic/ConditionalTokens'\r\nimport loadMarketMakersRepo from 'src/logic/MarketMakers'\r\nimport { getConditionId, getPositionId } from 'src/utils/markets'\r\nimport BigNumber from 'bignumber.js'\r\nimport Layout from './Layout'\r\nimport { create } from 'ipfs-http-client'\r\nimport Web3 from 'web3'\r\n// import {web3} from 'web3'\r\nconst bs58 = require('bs58')\r\n\r\nBigNumber.config({ EXPONENTIAL_AT: 50 })\r\n\r\nlet utf8decoder = new TextDecoder()\r\n\r\n// const markets = require('src/conf/config.local.json')\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  lmsrAddress: string\r\n  questionId: string\r\n  outcomeCount: number\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n  questionType: number\r\n}\r\n\r\nenum MarketStage {\r\n  Running = 0,\r\n  Paused = 1,\r\n  Closed = 2,\r\n}\r\n\r\nlet conditionalTokensRepo: any\r\nlet marketMakersRepo: any\r\n\r\nfunction getIpfsHashFromBytes32(bytes32Hex: any) {\r\n  // Add our default ipfs values for first 2 bytes:\r\n  // function:0x12=sha2, size:0x20=256 bits\r\n  // and cut off leading \"0x\"\r\n  const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n  const hashBytes = Buffer.from(hashHex, 'hex');\r\n  const hashStr = bs58.encode(hashBytes)\r\n  return hashStr\r\n}\r\n\r\nconst Market: React.FC<MarketProps> = ({ web3, account, lmsrAddress, questionId, outcomeCount, oracle, creator, createTime, questionType }) => {\r\n  const [isConditionLoaded, setIsConditionLoaded] = useState<boolean>(false)\r\n  const [isEnoughBalance, setIsEnoughBalance] = useState<boolean>(false)\r\n  const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n  const [selectedOutcomeToken, setSelectedOutcomeToken] = useState<number>(0)\r\n  const [marketInfo, setMarketInfo] = useState<any>(undefined)\r\n  //@ts-ignore\r\n  const client = create(process.env.REACT_APP_IPFS_ENDPOINT)\r\n  // const client = create({\r\n  //   host: 'localhost',\r\n  //   port: 5001,\r\n  //   protocol: 'http',\r\n  //   // headers: {\r\n  //   //   authorization: auth\r\n  //   // }\r\n\r\n  // })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        conditionalTokensRepo = await loadConditionalTokensRepo(web3, lmsrAddress, account)\r\n        marketMakersRepo = await loadMarketMakersRepo(web3, lmsrAddress, account)\r\n        await getMarketInfo()\r\n        setIsConditionLoaded(true)\r\n      } catch (err) {\r\n        setIsConditionLoaded(false)\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    init()\r\n  }, [])\r\n\r\n  const getMarketInfo = async () => {\r\n    if (!oracle) return\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const conditionId = getConditionId(\r\n      // process.env.REACT_APP_ORACLE_ADDRESS,\r\n      oracle,\r\n      questionId,\r\n      outcomeCount,\r\n    )\r\n    const payoutDenominator = await conditionalTokensRepo.payoutDenominator(conditionId)\r\n\r\n    // var cid = questionId.slice(0, 46)\r\n    const cid = getIpfsHashFromBytes32(questionId)\r\n    //@ts-ignore\r\n    const stream = client.cat(cid)\r\n    let data = ''\r\n\r\n    for await (const chunk of stream) {\r\n      // data += chunk.toString()\r\n      data += utf8decoder.decode(chunk)\r\n    }\r\n    console.log(data.toString())\r\n\r\n    var markets = JSON.parse(data)\r\n    const funding = await marketMakersRepo.funding()\r\n    const totalSupply = await collateral.contract.totalSupply()\r\n    const collateralBalance = await collateral.contract.allowancePoint(account, lmsrAddress)\r\n\r\n\r\n\r\n    const outcomes = []\r\n    for (let outcomeIndex = 0; outcomeIndex < outcomeCount; outcomeIndex++) {\r\n      const indexSet = (outcomeIndex === 0\r\n        ? 1\r\n        : parseInt(Math.pow(10, outcomeIndex).toString(), 2)\r\n      ).toString()\r\n      const collectionId = await conditionalTokensRepo.getCollectionId(\r\n        `0x${'0'.repeat(64)}`,\r\n        conditionId,\r\n        indexSet,\r\n      )\r\n      const positionId = getPositionId(collateral.address, collectionId)\r\n      const probability = await marketMakersRepo.calcMarginalPrice(outcomeIndex)\r\n      const balance = await conditionalTokensRepo.balanceOf(account, positionId)\r\n      const payoutNumerator = await conditionalTokensRepo.payoutNumerators(\r\n        conditionId,\r\n        outcomeIndex,\r\n      )\r\n\r\n      const outcome = {\r\n        index: outcomeIndex,\r\n        // title: markets.markets[0].outcomes[outcomeIndex].title,\r\n        title: markets[0].outcomes[outcomeIndex].title,\r\n        link: markets[0].outcomes[outcomeIndex].link,\r\n        probability: new BigNumber(probability)\r\n          .dividedBy(Math.pow(2, 64))\r\n          .toFixed(3),\r\n        // .multipliedBy(100)\r\n        balance: new BigNumber(balance).dividedBy(Math.pow(10, collateral.decimals)),\r\n        payoutNumerator: payoutNumerator\r\n      }\r\n      console.log(outcome)\r\n      outcomes.push(outcome)\r\n    }\r\n\r\n    const marketData = {\r\n      lmsrAddress: lmsrAddress,\r\n      title: markets[0].title,\r\n      link: markets[0].link,\r\n      resultCount: markets[0].resultCount,\r\n      outcomes,\r\n      stage: MarketStage[await marketMakersRepo.stage()],\r\n      questionId: questionId,\r\n      conditionId: conditionId,\r\n      payoutDenominator: payoutDenominator,\r\n      funding: new BigNumber(funding).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      totalVolume: new BigNumber(totalSupply).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      collateralBalance: new BigNumber(collateralBalance).dividedBy(Math.pow(10, collateral.decimals)).toFixed(2),\r\n      questionType: questionType,\r\n      closeDelay: markets[0].closeDelay,\r\n      resolveDelay: markets[0].resolveDelay\r\n    }\r\n\r\n    setMarketInfo(marketData)\r\n  }\r\n\r\n  const approve = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // ).toString()\r\n    // const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n    // const formatedAmount = Web3.utils.toBN(String(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)))\r\n    var amount = parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    const collateralBalance = await collateral.contract.allowancePoint(account, marketInfo.lmsrAddress)\r\n\r\n    if (cost.gt(collateralBalance)) {\r\n      // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n      await collateral.contract.approvePoint(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n        from: account,\r\n      })\r\n      setIsEnoughBalance(true)\r\n    } else {\r\n      setIsEnoughBalance(true)\r\n    }\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const buy = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // ).toString()\r\n    // const formatedAmount = Web3.utils.toBN(String(parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)))\r\n    var amount = parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    // const collateralBalance = await collateral.contract.allowancePoint(account, marketInfo.lmsrAddress)\r\n    // if (cost.gt(collateralBalance)) {\r\n    //   // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n    //   await collateral.contract.approvePoint(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n    //     from: account,\r\n    //   })\r\n    // }\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, cost, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const calcCost = async (parms: string) => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // console.log(selectedAmount)\r\n    var amount = parseFloat(parms) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n    return new BigNumber(cost).dividedBy(Math.pow(10, collateral.decimals)).toFixed(2)\r\n  }\r\n\r\n  const calcProfit = async (parms: string) => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // console.log(selectedAmount)\r\n    var amount = parseFloat(parms) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n    const outcomeTokenAmounts = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === selectedOutcomeToken ? formatedAmount.neg() : Web3.utils.toBN(0),\r\n    )\r\n    const profit = (await marketMakersRepo.calcNetCost(outcomeTokenAmounts)).neg()\r\n    return new BigNumber(profit).dividedBy(Math.pow(10, collateral.decimals)).toFixed(2)\r\n\r\n  }\r\n\r\n  const sell = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    var amount = parseFloat(selectedAmount) * Math.pow(10, collateral.decimals)\r\n    var amount_str = amount.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })\r\n\r\n    const formatedAmount = Web3.utils.toBN(amount_str)\r\n\r\n    const isApproved = await conditionalTokensRepo.isApprovedForAll(account, marketInfo.lmsrAddress)\r\n    if (!isApproved) {\r\n      await conditionalTokensRepo.setApprovalForAll(marketInfo.lmsrAddress, true, account)\r\n    }\r\n\r\n    const outcomeTokenAmounts = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === selectedOutcomeToken ? formatedAmount.neg() : Web3.utils.toBN(0),\r\n    )\r\n    const profit = (await marketMakersRepo.calcNetCost(outcomeTokenAmounts)).neg()\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, profit, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const redeem = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n\r\n    const indexSets = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === 0 ? 1 : parseInt(Math.pow(10, i).toString(), 2),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.redeemPositions(\r\n      collateral.address,\r\n      `0x${'0'.repeat(64)}`,\r\n      marketInfo.conditionId,\r\n      indexSets,\r\n      account,\r\n    )\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const close = async () => {\r\n    const tx = await marketMakersRepo.close(account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const resolve = async (resolutionOutcomeIndex: Array<Boolean>) => {\r\n    // const payouts = Array.from(\r\n    //   { length: marketInfo.outcomes.length },\r\n    //   (value: any, index: number) => (index === resolutionOutcomeIndex ? 1 : 0),\r\n    // )\r\n    const payouts = Array.from(\r\n      resolutionOutcomeIndex, (value: any, index: number) => (value === true ? 1 : 0),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.reportPayouts(marketInfo.questionId, payouts, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const isMarketClosed =\r\n    isConditionLoaded && MarketStage[marketInfo.stage].toString() === MarketStage.Closed.toString()\r\n  return (\r\n    <Layout\r\n      account={account}\r\n      isConditionLoaded={isConditionLoaded}\r\n      isMarketClosed={isMarketClosed}\r\n      marketInfo={marketInfo}\r\n      setSelectedAmount={setSelectedAmount}\r\n      selectedAmount={selectedAmount}\r\n      setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n      selectedOutcomeToken={selectedOutcomeToken}\r\n      approve={approve}\r\n      buy={buy}\r\n      sell={sell}\r\n      redeem={redeem}\r\n      close={close}\r\n      resolve={resolve}\r\n      oracle={oracle}\r\n      creator={creator}\r\n      createTime={createTime}\r\n      calcCost={calcCost}\r\n      calcProfit={calcProfit}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Market\r\n"],"sourceRoot":""}