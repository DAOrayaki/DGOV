{"version":3,"sources":["components/style.module.css","components/SpinnerPage.tsx","utils/web3.ts","components/Layout.tsx","images/bg.svg","components/App.tsx","Root.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SpinnerPage","className","animation","as","getWeb3Account","web3","a","defaultAccount","eth","getAccounts","accounts","Header","lazy","YakiWallet","MainPage","MarketPage","HotTrendPage","Layout","account","setProviderData","styles","headerBar","fallback","mainContent","path","yakiAddress","process","setionStyle","backgroundImage","bg","backgroundSize","App","useState","undefined","setWeb3","setAccount","provider","newWeb3","Web3","newAccount","style","client","ApolloClient","uri","cache","InMemoryCache","Root","ApolloProvider","Boolean","window","location","hostname","match","ReactDOM","render","autoConnect","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,UAAY,yBAAyB,WAAa,0BAA0B,eAAiB,8BAA8B,aAAe,4BAA4B,QAAU,uBAAuB,YAAc,2BAA2B,QAAU,uBAAuB,aAAe,4BAA4B,SAAW,wBAAwB,SAAW,wBAAwB,UAAY,yBAAyB,WAAa,0BAA0B,UAAY,yBAAyB,OAAS,sBAAsB,cAAgB,6BAA6B,UAAY,yBAAyB,OAAS,sBAAsB,KAAO,oBAAoB,UAAY,yBAAyB,eAAiB,8BAA8B,QAAU,uBAAuB,YAAc,2BAA2B,aAAe,4BAA4B,aAAe,4BAA4B,KAAO,oBAAoB,IAAM,mBAAmB,sBAAsB,qC,iCCDnhC,0BAeeC,IAXe,WAC1B,OACI,mCACI,qBAAIC,UAAU,cAAd,UACI,cAAC,IAAD,CAASC,UAAU,SAASC,GAAG,SADnC,oB,ofCYCC,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACvBD,EADuB,yCACV,MADU,UAED,MAAvBA,EAAKE,eAFmB,gCAGHF,EAAKG,IAAIC,cAHN,cAGpBC,EAHoB,yBAInBA,EAAS,IAAM,MAJI,gCAKdL,EAAKE,gBALS,4CAAH,sD,oDCTrBI,EAASC,gBAAK,kBAAM,iEACpBC,EAAaD,gBAAK,kBAAM,+EACxBE,EAAWF,gBAAK,kBAAM,mCACtBG,EAAaH,gBAAK,kBAAM,yDACxBI,EAAeJ,gBAAK,kBAAM,yDAuDjBK,EAhD0B,SAAC,GAInC,IAHHZ,EAGE,EAHFA,KACAa,EAEE,EAFFA,QACAC,EACE,EADFA,gBAGA,OACI,eAAC,IAAD,WAEI,qBAAKlB,UAAWmB,IAAOC,UAAvB,SACI,cAAC,WAAD,CAAUC,SAAUtB,IAApB,SACI,cAACW,EAAD,CAAQN,KAAMA,EAAMa,QAASA,EAASC,gBAAiBA,EAAvD,mBAGR,qBAAKlB,UAAWmB,IAAOG,YAAvB,SACI,cAAC,WAAD,CAAUD,SAAUtB,IAApB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOwB,KAAK,2BAAZ,SACI,cAACT,EAAD,CAAYV,KAAMA,EAAMa,QAASA,MAErC,cAAC,IAAD,CAAOM,KAAK,2BAAZ,SACI,cAACR,EAAD,CAAcX,KAAMA,EAAMa,QAASA,MAGvC,cAAC,IAAD,CAAOM,KAAK,UAAZ,SACKN,GAAWb,EAGR,cAACQ,EAAD,CAAYR,KAAMA,EAAMa,QAASA,EAASO,YAAaC,+CAEvD,mCACI,oBAAIzB,UAAU,cAAd,4CAOZ,cAAC,IAAD,CAAOuB,KAAK,IAAZ,SACI,cAACV,EAAD,iBC5Db,MAA0B,+BCOrCa,EAAc,CAChBC,gBAAgB,OAAD,OAASC,EAAT,KACfC,eAAe,aA+BFC,EA5BO,WACpB,MAAwBC,wBAAcC,GAAtC,mBAAO5B,EAAP,KAAa6B,EAAb,KACA,EAA8BF,mBAAiB,IAA/C,mBAAOd,EAAP,KAAgBiB,EAAhB,KAEMhB,EAAe,uCAAG,WAAOiB,GAAP,iBAAA9B,EAAA,0DAElB8B,EAFkB,uBAGpBC,EAAU,IAAIC,IAAKF,GAHC,SAIDhC,EAAeiC,GAJd,OAIpBE,EAJoB,6BAMpBF,EAAU,IAAIC,IACdC,EAAa,KAPO,OAStBL,EAAQG,GACRF,EAAWI,GAVW,4CAAH,sDAerB,OACE,mCACE,qBAAKC,MAAOb,EAAZ,SACE,cAAC,EAAD,CAAQtB,KAAMA,EAAMa,QAASA,EAASC,gBAAiBA,S,2BC7BzDsB,EAAS,IAAIC,IAAa,CAC5BC,IAAKjB,iEAELkB,MAAO,IAAIC,MAaAC,EATQ,WACnB,OACA,cAACC,EAAA,EAAD,CAAgBN,OAAQA,EAAxB,SAEA,cAAC,EAAD,OCJgBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,oBCEnCC,IAASC,OAID,cAAC,IAAD,CAAmBC,aAAa,EAAhC,SACI,cAAC,EAAD,MAINC,SAASC,eAAe,SDwGxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cf21d45a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"firstText\":\"style_firstText__2igjI\",\"circleRed\":\"style_circleRed__2Om2e\",\"circleGray\":\"style_circleGray__1KCar\",\"navbarcollapse\":\"style_navbarcollapse__2BVf_\",\"miniBlankDiv\":\"style_miniBlankDiv__2ywgT\",\"mainBar\":\"style_mainBar__IJfZy\",\"mainContent\":\"style_mainContent__18q9j\",\"actions\":\"style_actions__1MFAd\",\"dropdownMenu\":\"style_dropdownMenu__AWNke\",\"blankDiv\":\"style_blankDiv__3LlyJ\",\"imgStyle\":\"style_imgStyle__2kovx\",\"headerNav\":\"style_headerNav__qftW2\",\"web3Button\":\"style_web3Button__1cHpj\",\"headerBar\":\"style_headerBar__17Nne\",\"subNav\":\"style_subNav__2AZIh\",\"mainContainer\":\"style_mainContainer__zyHkE\",\"container\":\"style_container__wYJgR\",\"header\":\"style_header__1gcJd\",\"card\":\"style_card__2LFl1\",\"condition\":\"style_condition__3CVUg\",\"inputContainer\":\"style_inputContainer__2sEZG\",\"outcome\":\"style_outcome__ixUuY\",\"outcomeInfo\":\"style_outcomeInfo__4dvji\",\"rightOutcome\":\"style_rightOutcome__hnF3c\",\"wrongOutcome\":\"style_wrongOutcome__3XzkB\",\"bold\":\"style_bold__1gTwf\",\"bar\":\"style_bar__3FWUm\",\"progress-bar-custom\":\"style_progress-bar-custom__2kxnT\"};","import React from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\n\r\nconst SpinnerPage: React.FC = () => {\r\n    return (\r\n        <>\r\n            <h1 className=\"text-center\">\r\n                <Spinner animation=\"border\" as=\"span\"></Spinner>Loading...</h1>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default SpinnerPage","export const getCurrentNetworkName = () => {\r\n  // https://ethereum.stackexchange.com/a/17101\r\n  const networkId = process.env.REACT_APP_NETWORK_ID && parseInt(process.env.REACT_APP_NETWORK_ID)\r\n  switch (networkId) {\r\n    case 1:\r\n      return 'mainnet'\r\n    case 3:\r\n      return 'ropsten'\r\n    case 4:\r\n      return 'rinkeby'\r\n    case 5:\r\n      return 'goerli'\r\n    case 42:\r\n      return 'kovan'\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nexport const getWeb3Account = async (web3: any) => {\r\n  if (!web3) return null\r\n  if (web3.defaultAccount == null) {\r\n    const accounts = await web3.eth.getAccounts()\r\n    return accounts[0] || null\r\n  } else return web3.defaultAccount\r\n}\r\n","import React, { useState, Suspense, lazy } from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from 'react-router-dom';\r\n\r\nimport styles from 'src/components/style.module.css'\r\nimport SpinnerPage from 'src/components/SpinnerPage'\r\n\r\nconst Header = lazy(() => import('src/components/Header'))\r\nconst YakiWallet = lazy(() => import('src/components/Yaki/index'))\r\nconst MainPage = lazy(() => import('src/components/MainPage'))\r\nconst MarketPage = lazy(() => import('src/components/MarketPage'))\r\nconst HotTrendPage = lazy(() => import('src/components/HotMarketPage'))\r\n\r\ntype LayoutProperty = {\r\n    web3: any\r\n    account: string\r\n    setProviderData: any\r\n}\r\nconst Layout: React.FC<LayoutProperty> = ({\r\n    web3,\r\n    account,\r\n    setProviderData\r\n}) => {\r\n\r\n    return (\r\n        <Router>\r\n\r\n            <div className={styles.headerBar}>\r\n                <Suspense fallback={SpinnerPage}>\r\n                    <Header web3={web3} account={account} setProviderData={setProviderData}> </Header>\r\n                </Suspense>\r\n            </div>\r\n            <div className={styles.mainContent}>\r\n                <Suspense fallback={SpinnerPage}>\r\n                    <Switch>\r\n                        <Route path=\"/markets/researchmarkets\">\r\n                            <MarketPage web3={web3} account={account}></MarketPage>\r\n                        </Route>\r\n                        <Route path=\"/markets/hottrendmarkets\">\r\n                            <HotTrendPage web3={web3} account={account}></HotTrendPage>\r\n                        </Route>\r\n\r\n                        <Route path=\"/wallet\">\r\n                            {account && web3 ? (\r\n\r\n                                //@ts-ignore\r\n                                <YakiWallet web3={web3} account={account} yakiAddress={process.env.REACT_APP_YAKI_ADDRESS} />\r\n                            ) : (\r\n                                <>\r\n                                    <h1 className=\"text-center\">\r\n                                        Connect your account first</h1>\r\n                                </>\r\n                            )\r\n\r\n                            }\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <MainPage />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                </Suspense>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\nexport default Layout","export default __webpack_public_path__ + \"static/media/bg.00bc97ba.svg\";","import React, { useState, Suspense, lazy } from 'react'\r\nimport Web3 from 'web3'\r\nimport { getWeb3Account } from 'src/utils/web3'\r\n\r\nimport Layout from 'src/components/Layout'\r\nimport bg from 'src/images/bg.svg'\r\n\r\nvar setionStyle = {\r\n  backgroundImage: `url(${bg})`,\r\n  backgroundSize: `100% 100%`\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const [web3, setWeb3] = useState<any>(undefined)\r\n  const [account, setAccount] = useState<string>('')\r\n\r\n  const setProviderData = async (provider: any) => {\r\n    let newWeb3, newAccount\r\n    if (provider) {\r\n      newWeb3 = new Web3(provider)\r\n      newAccount = await getWeb3Account(newWeb3)\r\n    } else {\r\n      newWeb3 = new Web3()\r\n      newAccount = null\r\n    }\r\n    setWeb3(newWeb3)\r\n    setAccount(newAccount)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div style={setionStyle}>\r\n        <Layout web3={web3} account={account} setProviderData={setProviderData} ></Layout>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport App from 'src/components/App'\r\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\"\r\n\r\n\r\nconst client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n    // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n\r\nconst Root: React.FC = () => {\r\n    return (\r\n    <ApolloProvider client={client}>\r\n\r\n    <App />\r\n    </ApolloProvider>\r\n    )\r\n}\r\n\r\nexport default Root\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Root from './Root'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {\r\n    UseWalletProvider,\r\n} from 'use-wallet'\r\nimport \"bootstrap/dist/css/bootstrap.css\"; // Import precompiled Bootstrap css\r\n// import \"@fortawesome/fontawesome-free/css/all.css\";\r\n// import { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\n\r\n\r\n// const client = new ApolloClient({\r\n//     uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n//     // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n//     cache: new InMemoryCache()\r\n// });\r\n\r\n\r\nReactDOM.render(\r\n\r\n    // <ApolloProvider client={client}>\r\n    //@ts-ignore\r\n        <UseWalletProvider autoConnect={true}>\r\n            <Root />\r\n        </UseWalletProvider>\r\n\r\n    // </ApolloProvider>\r\n    , document.getElementById('root'))\r\n\r\n// ReactDOM.render(<Root />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}