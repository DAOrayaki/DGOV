{"version":3,"sources":["components/Market/index.tsx","utils/markets.ts","components/Market/Layout.tsx","components/style.module.css","logic/ConditionalTokens/index.ts","logic/ConditionalTokens/ConditionalTokensRepo.ts","logic/MarketMakers/index.ts","logic/MarketMakers/MarketMakersRepo.ts","components/MarketList/index.tsx","logic/contracts.ts"],"names":["bs58","require","BigNumber","config","EXPONENTIAL_AT","MarketStage","conditionalTokensRepo","marketMakersRepo","utf8decoder","TextDecoder","getIpfsHashFromBytes32","bytes32Hex","hashHex","slice","hashBytes","Buffer","from","encode","Market","web3","account","lmsrAddress","questionId","outcomeCount","oracle","creator","useState","isConditionLoaded","setIsConditionLoaded","selectedAmount","setSelectedAmount","selectedOutcomeToken","setSelectedOutcomeToken","undefined","marketInfo","setMarketInfo","client","create","process","useEffect","a","loadConditionalTokensRepo","loadMarketMakersRepo","getMarketInfo","console","error","init","getCollateralToken","collateral","conditionId","getConditionId","payoutDenominator","cid","stream","cat","data","chunk","decode","log","toString","markets","JSON","parse","outcomes","outcomeIndex","indexSet","parseInt","Math","pow","getCollectionId","repeat","collectionId","positionId","getPositionId","address","calcMarginalPrice","probability","balanceOf","balance","payoutNumerators","payoutNumerator","outcome","index","title","dividedBy","multipliedBy","toFixed","decimals","push","stage","marketData","buy","formatedAmount","outcomeTokenAmounts","Array","length","value","calcNetCost","cost","contract","allowance","collateralBalance","gt","approve","trade","tx","sell","isApprovedForAll","setApprovalForAll","v","i","negated","profit","neg","redeem","indexSets","redeemPositions","close","resolve","resolutionOutcomeIndex","payouts","reportPayouts","isMarketClosed","Closed","oracleAddress","outcomeSlotCount","Web3","utils","soliditySha3","t","collateralToken","TradingForm","className","styles","inputContainer","variant","label","type","onChange","e","target","disabled","defaultValue","map","rightOutcome","wrongOutcome","join","control","color","outcomeInfo","TraderActions","actions","onClick","OperatorActions","OracleActions","fill","checkedState","setCheckedState","id","name","short","checked","position","updatedCheckedState","item","handleOnChange","htmlFor","Layout","condition","toLowerCase","module","exports","lmsrAddressCache","providerAccountCache","assert","ConditionalTokensRepo","contracts","conditionalTokens","getOutcomeSlotCount","parentCollectionId","lmsrMarketMakerAddress","approved","collateralAddress","marketConditionId","this","loadContracts","MarketMakersRepo","lmsrMarketMaker","getAddress","conditionIds","owner","funding","tradeAmounts","collateralLimit","MarketList","MARKET_QUERY","gql","useQuery","variables","fetchPolicy","loading","refetch","lmsrmarketMaker","MarketProvider","useParams","ApolloClient","uri","cache","InMemoryCache","TruffleContract","loadLMSRMarketMakerContract","lmsrMarketMakerContract","LMSRMarketMaker","setProvider","currentProvider","loadConditionalTokensContract","conditionalTokensContract","ConditionalTokens","loadWETH9Contract","weth9Contract","YAKI","LMSRMarketMakerContract","ConditionalTokensContract","WETH9Contract","at","pmSystem","symbol"],"mappings":"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","file":"static/js/8.273e0387.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport loadConditionalTokensRepo from 'src/logic/ConditionalTokens'\r\nimport loadMarketMakersRepo from 'src/logic/MarketMakers'\r\nimport { getConditionId, getPositionId } from 'src/utils/markets'\r\nimport BigNumber from 'bignumber.js'\r\nimport Layout from './Layout'\r\nimport { create } from 'ipfs-http-client'\r\nconst bs58 = require('bs58')\r\n\r\nBigNumber.config({ EXPONENTIAL_AT: 50 })\r\n\r\nlet utf8decoder = new TextDecoder()\r\n\r\n// const markets = require('src/conf/config.local.json')\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  lmsrAddress: string\r\n  questionId: string\r\n  outcomeCount: number\r\n  oracle: string\r\n  creator: string\r\n}\r\n\r\nenum MarketStage {\r\n  Running = 0,\r\n  Paused = 1,\r\n  Closed = 2,\r\n}\r\n\r\nlet conditionalTokensRepo: any\r\nlet marketMakersRepo: any\r\n\r\nfunction getIpfsHashFromBytes32(bytes32Hex: any) {\r\n  // Add our default ipfs values for first 2 bytes:\r\n  // function:0x12=sha2, size:0x20=256 bits\r\n  // and cut off leading \"0x\"\r\n  const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n  const hashBytes = Buffer.from(hashHex, 'hex');\r\n  const hashStr = bs58.encode(hashBytes)\r\n  return hashStr\r\n}\r\n\r\nconst Market: React.FC<MarketProps> = ({ web3, account, lmsrAddress, questionId, outcomeCount, oracle, creator }) => {\r\n  const [isConditionLoaded, setIsConditionLoaded] = useState<boolean>(false)\r\n  const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n  const [selectedOutcomeToken, setSelectedOutcomeToken] = useState<number>(0)\r\n  const [marketInfo, setMarketInfo] = useState<any>(undefined)\r\n  //@ts-ignore\r\n  const client = create(process.env.REACT_APP_IPFS_ENDPOINT)\r\n  // const client = create({\r\n  //   host: 'localhost',\r\n  //   port: 5001,\r\n  //   protocol: 'http',\r\n  //   // headers: {\r\n  //   //   authorization: auth\r\n  //   // }\r\n    \r\n  // })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        conditionalTokensRepo = await loadConditionalTokensRepo(web3, lmsrAddress, account)\r\n        marketMakersRepo = await loadMarketMakersRepo(web3, lmsrAddress, account)\r\n        await getMarketInfo()\r\n        setIsConditionLoaded(true)\r\n      } catch (err) {\r\n        setIsConditionLoaded(false)\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    init()\r\n  }, [])\r\n\r\n  const getMarketInfo = async () => {\r\n    if (!oracle) return\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const conditionId = getConditionId(\r\n      // process.env.REACT_APP_ORACLE_ADDRESS,\r\n      oracle,\r\n      questionId,\r\n      outcomeCount,\r\n    )\r\n    const payoutDenominator = await conditionalTokensRepo.payoutDenominator(conditionId)\r\n\r\n    // var cid = questionId.slice(0, 46)\r\n    const cid = getIpfsHashFromBytes32(questionId)\r\n    //@ts-ignore\r\n    const stream = client.cat(cid)\r\n      let data = ''\r\n\r\n      for await ( const chunk of stream) {\r\n          // data += chunk.toString()\r\n          data += utf8decoder.decode(chunk)\r\n      }\r\n      console.log(data.toString())\r\n\r\n      var markets = JSON.parse(data)\r\n\r\n    const outcomes = []\r\n    for (let outcomeIndex = 0; outcomeIndex < outcomeCount; outcomeIndex++) {\r\n      const indexSet = (outcomeIndex === 0\r\n        ? 1\r\n        : parseInt(Math.pow(10, outcomeIndex).toString(), 2)\r\n      ).toString()\r\n      const collectionId = await conditionalTokensRepo.getCollectionId(\r\n        `0x${'0'.repeat(64)}`,\r\n        conditionId,\r\n        indexSet,\r\n      )\r\n      const positionId = getPositionId(collateral.address, collectionId)\r\n      const probability = await marketMakersRepo.calcMarginalPrice(outcomeIndex)\r\n      const balance = await conditionalTokensRepo.balanceOf(account, positionId)\r\n      const payoutNumerator = await conditionalTokensRepo.payoutNumerators(\r\n        conditionId,\r\n        outcomeIndex,\r\n      )\r\n\r\n      const outcome = {\r\n        index: outcomeIndex,\r\n        // title: markets.markets[0].outcomes[outcomeIndex].title,\r\n        title: markets[0].outcomes[outcomeIndex].title,\r\n        // title: `outcome ${outcomeIndex}`,\r\n        probability: new BigNumber(probability)\r\n          .dividedBy(Math.pow(2, 64))\r\n          .multipliedBy(100)\r\n          .toFixed(2),\r\n        balance: new BigNumber(balance).dividedBy(Math.pow(10, collateral.decimals)),\r\n        payoutNumerator: payoutNumerator,\r\n      }\r\n      outcomes.push(outcome)\r\n    }\r\n\r\n    const marketData = {\r\n      lmsrAddress: lmsrAddress,\r\n      title: markets[0].title,\r\n      outcomes,\r\n      stage: MarketStage[await marketMakersRepo.stage()],\r\n      questionId: questionId,\r\n      conditionId: conditionId,\r\n      payoutDenominator: payoutDenominator,\r\n    }\r\n\r\n    setMarketInfo(marketData)\r\n  }\r\n\r\n  const buy = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n      new BigNumber(Math.pow(10, collateral.decimals)),\r\n    )\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : new BigNumber(0),\r\n    )\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    const collateralBalance = await collateral.contract.allowance(account, marketInfo.lmsrAddress)\r\n    if (cost.gt(collateralBalance)) {\r\n      // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n      await collateral.contract.approve(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n        from: account,\r\n      })\r\n    }\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, cost, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const sell = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n      new BigNumber(Math.pow(10, collateral.decimals)),\r\n    )\r\n\r\n    const isApproved = await conditionalTokensRepo.isApprovedForAll(account, marketInfo.lmsrAddress)\r\n    if (!isApproved) {\r\n      await conditionalTokensRepo.setApprovalForAll(marketInfo.lmsrAddress, true, account)\r\n    }\r\n\r\n    const outcomeTokenAmounts = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === selectedOutcomeToken ? formatedAmount.negated() : new BigNumber(0),\r\n    )\r\n    const profit = (await marketMakersRepo.calcNetCost(outcomeTokenAmounts)).neg()\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, profit, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const redeem = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n\r\n    const indexSets = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === 0 ? 1 : parseInt(Math.pow(10, i).toString(), 2),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.redeemPositions(\r\n      collateral.address,\r\n      `0x${'0'.repeat(64)}`,\r\n      marketInfo.conditionId,\r\n      indexSets,\r\n      account,\r\n    )\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const close = async () => {\r\n    const tx = await marketMakersRepo.close(account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const resolve = async (resolutionOutcomeIndex: Array<Boolean>) => {\r\n    // const payouts = Array.from(\r\n    //   { length: marketInfo.outcomes.length },\r\n    //   (value: any, index: number) => (index === resolutionOutcomeIndex ? 1 : 0),\r\n    // )\r\n    const payouts = Array.from(\r\n      resolutionOutcomeIndex, (value: any, index: number) => (value === true ? 1 : 0),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.reportPayouts(marketInfo.questionId, payouts, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const isMarketClosed =\r\n    isConditionLoaded && MarketStage[marketInfo.stage].toString() === MarketStage.Closed.toString()\r\n  return (\r\n    <Layout\r\n      account={account}\r\n      isConditionLoaded={isConditionLoaded}\r\n      isMarketClosed={isMarketClosed}\r\n      marketInfo={marketInfo}\r\n      setSelectedAmount={setSelectedAmount}\r\n      selectedAmount={selectedAmount}\r\n      setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n      selectedOutcomeToken={selectedOutcomeToken}\r\n      buy={buy}\r\n      sell={sell}\r\n      redeem={redeem}\r\n      close={close}\r\n      resolve={resolve}\r\n      oracle={oracle}\r\n      creator={creator}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Market\r\n","import Web3 from 'web3'\r\n\r\nexport const getConditionId = (\r\n  oracleAddress: string,\r\n  questionId: string,\r\n  outcomeSlotCount: number,\r\n) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: oracleAddress },\r\n    { t: 'bytes32', v: questionId },\r\n    { t: 'uint', v: outcomeSlotCount },\r\n  )\r\n}\r\n\r\nexport const getPositionId = (collateralToken: string, collectionId: string) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: collateralToken },\r\n    { t: 'bytes32', v: collectionId },\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Paper, Button, TextField, RadioGroup, FormControlLabel, Radio} from '@material-ui/core'\r\nimport styles from '../style.module.css'\r\nimport  {useState} from \"react\"\r\n\r\ntype TradingFormProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n}\r\n\r\ntype TraderActionsProps = {\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  redeem: any\r\n  buy: any\r\n  sell: any\r\n}\r\n\r\ntype OperatorActionsProps = {\r\n  isMarketClosed: boolean\r\n  close: any\r\n}\r\n\r\ntype OracleActionsProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  resolve: any\r\n}\r\n\r\ntype LayoutProps = {\r\n  account: string\r\n  isConditionLoaded: boolean\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  selectedAmount: string\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n  buy: any\r\n  sell: any\r\n  redeem: any\r\n  close: any\r\n  resolve: any\r\n  oracle: string\r\n  creator: string\r\n}\r\n\r\nconst TradingForm: React.FC<TradingFormProps> = ({\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n}) => (\r\n  <>\r\n    <div className={styles.inputContainer}>\r\n      <TextField\r\n        variant=\"filled\"\r\n        label=\"Collateral value\"\r\n        type=\"number\"\r\n        onChange={e => setSelectedAmount(e.target.value)}\r\n        disabled={isMarketClosed}\r\n      />\r\n    </div>\r\n    <RadioGroup\r\n      defaultValue={0}\r\n      onChange={e => setSelectedOutcomeToken(parseInt(e.target.value))}\r\n      value={selectedOutcomeToken}\r\n    >\r\n      {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n        <div\r\n          key={outcome.title}\r\n          className={[\r\n            styles.outcome,\r\n            marketInfo.payoutDenominator > 0 && outcome.payoutNumerator > 0 && styles.rightOutcome,\r\n            marketInfo.payoutDenominator > 0 &&\r\n              !(outcome.payoutNumerator > 0) &&\r\n              styles.wrongOutcome,\r\n          ].join(' ')}\r\n        >\r\n          <FormControlLabel\r\n            value={!isMarketClosed ? outcome.index : 'disabled'}\r\n            control={<Radio color=\"primary\" />}\r\n            label={outcome.title}\r\n          />\r\n          <div className={styles.outcomeInfo}>Probability: {outcome.probability.toString()}%</div>\r\n          <div className={styles.outcomeInfo}>\r\n            My balance: {outcome.balance.toFixed(5).toString()}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </RadioGroup>\r\n  </>\r\n)\r\n\r\nconst TraderActions: React.FC<TraderActionsProps> = ({\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  redeem,\r\n  buy,\r\n  sell,\r\n}) => (\r\n  <>\r\n    <h3>Trader actions:</h3>\r\n    <div className={styles.actions}>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={redeem}\r\n        disabled={!isMarketClosed || !marketInfo.payoutDenominator}\r\n      >\r\n        Redeem\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={buy} disabled={isMarketClosed || !selectedAmount}>\r\n        Buy\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={sell} disabled={isMarketClosed || !selectedAmount}>\r\n        Sell\r\n      </Button>\r\n    </div>\r\n  </>\r\n)\r\n\r\nconst OperatorActions: React.FC<OperatorActionsProps> = ({ isMarketClosed, close }) => (\r\n  <>\r\n    <h3>Operator actions:</h3>\r\n    <Button variant=\"contained\" onClick={close} disabled={isMarketClosed}>\r\n      Close\r\n    </Button>\r\n  </>\r\n)\r\n\r\n// const OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => (\r\n//   <>\r\n//     <h3>Oracle actions:</h3>\r\n//     <div className={styles.actions}>\r\n//       {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n//         <Button\r\n//           key={outcome.short}\r\n//           variant=\"contained\"\r\n//           onClick={() => resolve(index)}\r\n//           disabled={!isMarketClosed}\r\n//         >\r\n//           Resolve {outcome.title}\r\n//         </Button>\r\n//       ))}\r\n//     </div>\r\n//   </>\r\n// )\r\nconst OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => {\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(marketInfo.outcomes.length).fill(false)\r\n  );\r\n\r\n  const handleOnChange = (position:any) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n  };\r\n\r\n  return (\r\n  <>\r\n    <h3>Oracle actions:</h3>\r\n    <div>\r\n      {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n        <li key={index}>\r\n        <input\r\n        type=\"checkbox\"\r\n        id={`custom-checkbox-${index}`}\r\n        name={outcome.short}\r\n        value={outcome.title}\r\n        checked={checkedState[index]}\r\n        onChange={() => handleOnChange(index)}\r\n        />\r\n        <label htmlFor={`custom-checkbox-${index}`}> {outcome.title} </label>\r\n        </li>\r\n      ))}\r\n    <Button \r\n          onClick={() => resolve(checkedState)}\r\n          variant=\"contained\"\r\n          disabled={!isMarketClosed}\r\n    >Resolve</Button>\r\n\r\n    </div>\r\n  </>\r\n  )\r\n}\r\n\r\n\r\nconst Layout: React.FC<LayoutProps> = ({\r\n  account,\r\n  isConditionLoaded,\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  selectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n  buy,\r\n  sell,\r\n  redeem,\r\n  close,\r\n  resolve,\r\n  oracle,\r\n  creator\r\n}) => {\r\n  return (\r\n    <Paper className={styles.condition}>\r\n      {isConditionLoaded ? (\r\n        <>\r\n          <h2>{marketInfo.title}</h2>\r\n          <p>State: {marketInfo.stage}</p>\r\n          <TradingForm\r\n            isMarketClosed={isMarketClosed}\r\n            marketInfo={marketInfo}\r\n            setSelectedAmount={setSelectedAmount}\r\n            setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n            selectedOutcomeToken={selectedOutcomeToken}\r\n          />\r\n          <TraderActions\r\n            marketInfo={marketInfo}\r\n            isMarketClosed={isMarketClosed}\r\n            selectedAmount={selectedAmount}\r\n            redeem={redeem}\r\n            buy={buy}\r\n            sell={sell}\r\n          />\r\n          {account && account.toLowerCase() === creator && (\r\n            <OperatorActions isMarketClosed={isMarketClosed} close={close} />\r\n          )}\r\n          {account && account.toLowerCase() === oracle && (\r\n            <OracleActions\r\n              isMarketClosed={isMarketClosed}\r\n              marketInfo={marketInfo}\r\n              resolve={resolve}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>Loading...</div>\r\n      )}\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__CefR7\",\"header\":\"style_header__3XBjb\",\"card\":\"style_card__3dR2m\",\"condition\":\"style_condition__RS0-W\",\"inputContainer\":\"style_inputContainer__e8Zwh\",\"actions\":\"style_actions__1x4sz\",\"outcome\":\"style_outcome__1vCk8\",\"outcomeInfo\":\"style_outcomeInfo__ppntL\",\"rightOutcome\":\"style_rightOutcome__2jTiD\",\"wrongOutcome\":\"style_wrongOutcome__1hXjn\",\"bold\":\"style_bold__2Svah\",\"bar\":\"style_bar__3u1Wd\"};","import ConditionalTokensRepo from './ConditionalTokensRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet conditionalTokensRepo: ConditionalTokensRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetConditionalTokensRepo = () => {\r\n  conditionalTokensRepo = undefined\r\n}\r\n\r\nconst loadConditionalTokensRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetConditionalTokensRepo()\r\n    }\r\n    if (!conditionalTokensRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      conditionalTokensRepo = new ConditionalTokensRepo(contracts)\r\n    }\r\n    return conditionalTokensRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadConditionalTokensRepo\r\n","const assert = require('assert')\r\n\r\nclass ConditionalTokensRepo {\r\n  conditionalTokens: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.conditionalTokens = contracts.conditionalTokens\r\n  }\r\n\r\n  balanceOf = async (account: string, positionId: number) => {\r\n    return this.conditionalTokens.balanceOf(account, positionId)\r\n  }\r\n\r\n  getOutcomeSlotCount = async (id: string) => {\r\n    return this.conditionalTokens.getOutcomeSlotCount(id)\r\n  }\r\n\r\n  getCollectionId = async (parentCollectionId: string, conditionId: string, indexSet: number[]) => {\r\n    return this.conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet)\r\n  }\r\n\r\n  payoutDenominator = async (conditionId: string) => {\r\n    return this.conditionalTokens.payoutDenominator(conditionId)\r\n  }\r\n\r\n  payoutNumerators = async (conditionId: string, outcomeIndex: number) => {\r\n    return this.conditionalTokens.payoutNumerators(conditionId, outcomeIndex)\r\n  }\r\n\r\n  isApprovedForAll = async (account: string, lmsrMarketMakerAddress: string) => {\r\n    return this.conditionalTokens.isApprovedForAll(account, lmsrMarketMakerAddress)\r\n  }\r\n\r\n  setApprovalForAll = async (lmsrMarketMakerAddress: string, approved: boolean, from: string) => {\r\n    return this.conditionalTokens.setApprovalForAll(lmsrMarketMakerAddress, approved, { from })\r\n  }\r\n\r\n  reportPayouts = async (questionId: string, payouts: number[], from: string) => {\r\n    return this.conditionalTokens.reportPayouts(questionId, payouts, { from })\r\n  }\r\n\r\n  redeemPositions = async (\r\n    collateralAddress: string,\r\n    parentCollectionId: string,\r\n    marketConditionId: string,\r\n    indexSets: number[],\r\n    from: string,\r\n  ) => {\r\n    return this.conditionalTokens.redeemPositions(\r\n      collateralAddress,\r\n      parentCollectionId,\r\n      marketConditionId,\r\n      indexSets,\r\n      { from },\r\n    )\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default ConditionalTokensRepo\r\n","import MarketMakersRepo from './MarketMakersRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet marketMakersRepo: MarketMakersRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetMarketMakersRepo = () => {\r\n  marketMakersRepo = undefined\r\n}\r\n\r\nconst loadMarketMakersRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetMarketMakersRepo()\r\n    }\r\n    if (!marketMakersRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      marketMakersRepo = new MarketMakersRepo(contracts)\r\n    }\r\n    return marketMakersRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadMarketMakersRepo\r\n","const assert = require('assert')\r\n\r\nclass MarketMakersRepo {\r\n  lmsrMarketMaker: any\r\n  collateralToken: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.lmsrMarketMaker = contracts.lmsrMarketMaker\r\n    this.collateralToken = contracts.collateralToken\r\n  }\r\n\r\n  getAddress = async () => {\r\n    return this.lmsrMarketMaker.address\r\n  }\r\n\r\n  getCollateralToken = async () => {\r\n    return this.collateralToken\r\n  }\r\n\r\n  conditionIds = async (index: number) => {\r\n    return this.lmsrMarketMaker.conditionIds(index)\r\n  }\r\n\r\n  owner = async () => {\r\n    return this.lmsrMarketMaker.owner()\r\n  }\r\n\r\n  funding = async () => {\r\n    return this.lmsrMarketMaker.funding()\r\n  }\r\n\r\n  stage = async () => {\r\n    return this.lmsrMarketMaker.stage()\r\n  }\r\n\r\n  close = async (from: string) => {\r\n    return this.lmsrMarketMaker.close({ from })\r\n  }\r\n\r\n  calcNetCost = async (outcomeTokenAmounts: number[]) => {\r\n    return this.lmsrMarketMaker.calcNetCost(outcomeTokenAmounts)\r\n  }\r\n\r\n  calcMarginalPrice = async (outcomeIndex: number) => {\r\n    return this.lmsrMarketMaker.calcMarginalPrice(outcomeIndex)\r\n  }\r\n\r\n  trade = async (tradeAmounts: number[], collateralLimit: number, from: string) => {\r\n    return this.lmsrMarketMaker.trade(tradeAmounts, collateralLimit, { from })\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default MarketMakersRepo\r\n","import React from \"react\";\r\n\r\n// import ApolloClient from \"apollo-boost\";\r\n// import { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\r\n// import { ApolloProvider, useQuery} from \"react-apollo\"\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\nimport { useParams } from 'react-router-dom';\r\nimport Market from 'src/components/Market'\r\n\r\n\r\ntype MarketProviderProps = {\r\n  web3: any\r\n  account: string\r\n  // address: string\r\n}\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  address: string\r\n}\r\n\r\n\r\nconst MarketProvider: React.FC<MarketProviderProps> = ({ web3, account }) => {\r\n\r\n  //@ts-ignore\r\n  let { address } = useParams();\r\n\r\n  //@ts-ignore\r\n  const client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n    // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n    cache: new InMemoryCache()\r\n  });\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <MarketList web3={web3} account={account} address={address}></MarketList>\r\n    </ApolloProvider>\r\n  )\r\n\r\n}\r\n\r\nconst MarketList: React.FC<MarketProps> = ({ web3, account, address }) => {\r\n\r\n\r\n\r\n  const MARKET_QUERY = gql`\r\n    query lsmrMarkets($id: String) {\r\n        lmsrmarketMaker(id: $id) {\r\n          id\r\n          creator\r\n          creationTimestamp\r\n          collateralToken\r\n          conditions {\r\n            id\r\n            oracle\r\n            questionId\r\n            outcomeSlotCount\r\n          }\r\n          funding\r\n          fee\r\n          condition {\r\n            id\r\n          }\r\n          oracle\r\n          questionId\r\n          outcomeSlotCount\r\n        }\r\n   }\r\n  `\r\n  const { loading, error, data, refetch } = useQuery(MARKET_QUERY, {\r\n    variables: { 'id': address.toLowerCase() },\r\n    fetchPolicy: \"no-cache\"\r\n  }\r\n  )\r\n  console.log(address)\r\n\r\n  if (loading) return <p>Loading...</p>\r\n\r\n  if (error) return <p>Error :</p>\r\n\r\n  return (\r\n    //@ts-ignore\r\n    <div>\r\n      {data.lmsrmarketMaker ? (\r\n        <>\r\n          <Market\r\n            web3={web3}\r\n            account={account}\r\n            lmsrAddress={address}\r\n            questionId={data.lmsrmarketMaker.questionId}\r\n            outcomeCount={data.lmsrmarketMaker.outcomeSlotCount}\r\n            oracle={data.lmsrmarketMaker.oracle}\r\n            creator={data.lmsrmarketMaker.creator} />\r\n        </>\r\n       ) : ( \r\n         <div>No data found</div> \r\n       )} \r\n      {/* <p>{data.lmsrmarketMaker.id}</p> */}\r\n      {/* <button onClick={() => refetch()}>Refetch!</button> */}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default MarketProvider\r\n","import ConditionalTokens from '../abi/ConditionalTokens.json'\r\nimport LMSRMarketMaker from '../abi/LMSRMarketMaker.json'\r\nimport WETH9 from '../abi/WETH9.json'\r\nimport YAKI from '../abi/YAKI.json'\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet contracts: Object | undefined\r\nlet lmsrAddressCache: string | undefined\r\nlet providerAccountCache: string | undefined\r\n\r\nconst resetContracts = () => {\r\n  contracts = undefined\r\n  lmsrAddressCache = undefined\r\n  providerAccountCache = undefined\r\n}\r\n\r\nconst loadLMSRMarketMakerContract = async (web3: any) => {\r\n  let lmsrMarketMakerContract\r\n  if (!contracts) {\r\n    lmsrMarketMakerContract = TruffleContract(LMSRMarketMaker)\r\n    lmsrMarketMakerContract.setProvider(web3.currentProvider)\r\n  }\r\n  return lmsrMarketMakerContract\r\n}\r\n\r\nconst loadConditionalTokensContract = async (web3: any) => {\r\n  let conditionalTokensContract\r\n  if (!contracts) {\r\n    conditionalTokensContract = TruffleContract(ConditionalTokens)\r\n    conditionalTokensContract.setProvider(web3.currentProvider)\r\n  }\r\n  return conditionalTokensContract\r\n}\r\n\r\nconst loadWETH9Contract = async (web3: any) => {\r\n  let weth9Contract\r\n  if (!contracts) {\r\n    // weth9Contract = TruffleContract(WETH9)\r\n    weth9Contract = TruffleContract(YAKI)\r\n    weth9Contract.setProvider(web3.currentProvider)\r\n  }\r\n  return weth9Contract\r\n}\r\n\r\nconst loadContracts = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetContracts()\r\n    }\r\n    if (!contracts) {\r\n      providerAccountCache = account\r\n      lmsrAddressCache = lmsrAddress\r\n\r\n      const LMSRMarketMakerContract = await loadLMSRMarketMakerContract(web3)\r\n      const ConditionalTokensContract = await loadConditionalTokensContract(web3)\r\n      const WETH9Contract = await loadWETH9Contract(web3)\r\n\r\n      const lmsrMarketMaker = await LMSRMarketMakerContract.at(lmsrAddress)\r\n      const conditionalTokens = await ConditionalTokensContract.at(await lmsrMarketMaker.pmSystem())\r\n      const collateralToken = {\r\n        address: await lmsrMarketMaker.collateralToken(),\r\n        contract: await WETH9Contract.at(await lmsrMarketMaker.collateralToken()),\r\n        name: 'YAKI TOKEN',\r\n        decimals: 18,\r\n        symbol: 'YAKI',\r\n      }\r\n\r\n      contracts = { lmsrMarketMaker, conditionalTokens, collateralToken }\r\n    }\r\n    return contracts\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadContracts\r\n"],"sourceRoot":""}