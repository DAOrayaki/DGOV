{"version":3,"sources":["components/Yaki/index.tsx","components/Yaki/Layout.tsx","logic/YakiToken/index.ts","logic/YakiToken/YAKID.ts"],"names":["yakiTokenRepo","Layout","account","tokenSymbol","tokenAmount","setSelectedAmount","transform","selectedAmount","isYakiTokenLoaded","setRecipient","Container","Form","Group","as","Row","className","controlId","Label","column","sm","Col","Control","plaintext","readOnly","defaultValue","type","onChange","e","target","value","Button","onClick","YakiWallet","web3","yakiAddress","useState","setIsYakiTokenLoaded","undefined","tokenInfo","setTokenInfo","recipient","console","log","useEffect","a","loadYakiTokenRepo","getYakiInfo","error","init","decimals","pointBanlanceOf","balanceAmount","balance","Web3","utils","toBN","div","Math","pow","symbol","name","formatedAmount","mul","transferPoint","tx","yakiAddressCache","providerAccountCache","assert","require","YakiTokenRepo","contracts","yakiToken","getAddress","address","approvePoint","spender","amount","from","pointBalanceOf","transferPointFrom","sender","tranferPointFrom","this","TruffleContract","loadYakiContract","yakiContract","YAKI","setProvider","currentProvider","at"],"mappings":"2GAYIA,E,yGCsEWC,EApE6B,SAAC,GAWxC,EATGC,QASF,IAREC,EAQH,EARGA,YACAC,EAOH,EAPGA,YACAC,EAMH,EANGA,kBAEAC,GAIH,EALGC,eAKH,EAJGD,WACAE,EAGH,EAHGA,kBACAC,EAEH,EAFGA,aAKJ,OACI,mCACKD,EACG,cAACE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAAOC,UAAU,aAAhD,UACI,cAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,wBAGA,cAACC,EAAA,EAAD,CAAKD,GAAG,KAAR,SACI,cAACR,EAAA,EAAKU,QAAN,CAAcC,WAAS,EAACC,UAAQ,EAACC,aAAcrB,SAGvD,eAACQ,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAAOC,UAAU,cAAhD,UACI,cAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,qBAGA,cAACC,EAAA,EAAD,CAAKD,GAAG,KAAR,SACI,cAACR,EAAA,EAAKU,QAAN,CAAcC,WAAS,EAACC,UAAQ,EAACC,aAAcpB,SAIvD,eAACO,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAAOC,UAAU,aAAhD,UACI,cAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,oBAGA,cAACC,EAAA,EAAD,CAAKD,GAAG,KAAR,SACI,cAACR,EAAA,EAAKU,QAAN,CAAcI,KAAK,SAASC,SAAU,SAAAC,GAAC,OAAEtB,EAAkBsB,EAAEC,OAAOC,eAG5E,eAAClB,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAAOC,UAAU,eAAhD,UACI,cAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,6BAGA,cAACC,EAAA,EAAD,CAAKD,GAAG,KAAR,SACI,cAACR,EAAA,EAAKU,QAAN,CAAcI,KAAK,SAASC,SAAU,SAAAC,GAAC,OAAElB,EAAakB,EAAEC,OAAOC,eAIvE,cAACC,EAAA,EAAD,CAAQC,QAAS,SAAAJ,GAAC,OAAErB,KAApB,yBAQR,gD,kBDWD0B,UAxE+B,SAAC,GAExC,IADHC,EACE,EADFA,KAAM/B,EACJ,EADIA,QAASgC,EACb,EADaA,YAEf,EAAkDC,oBAAkB,GAApE,mBAAO3B,EAAP,KAA0B4B,EAA1B,KACA,EAA4CD,mBAAiB,IAA7D,mBAAO5B,EAAP,KAAuBF,EAAvB,KACA,EAAkC8B,wBAAcE,GAAhD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,mBAAiB,IAAnD,mBAAOK,EAAP,KAAkB/B,EAAlB,KAEAgC,QAAQC,IAAIR,GAEZS,qBAAU,YACI,uCAAG,sBAAAC,EAAA,+EAEiBC,YAAkBZ,EAAMC,EAAahC,GAFtD,cAELF,EAFK,gBAGC8C,IAHD,OAILV,GAAqB,GAJhB,gDAMLA,GAAqB,GACrBK,QAAQM,MAAR,MAPK,yDAAH,qDAWVC,KACD,IAEH,IAAMF,EAAW,uCAAG,oCAAAF,EAAA,sEACO5C,EAAciD,WADrB,cACVA,EADU,gBAEYjD,EAAckD,gBAAgBhD,GAF1C,cAEViD,EAFU,OAGVC,EAAUC,IAAKC,MAAMC,KAAKJ,GAAeK,IAC3CH,IAAKC,MAAMC,KAAKE,KAAKC,IAAI,GAAIT,KAJjB,SAMKjD,EAAc2D,SANnB,cAMVA,EANU,iBAOG3D,EAAc4D,OAPjB,QAOVA,EAPU,OAgBhBrB,EAPiB,CACba,QAASA,EACTO,OAAQA,EACRC,KAAMA,EACNX,SAAUA,IAbE,4CAAH,qDAmBX3C,EAAS,uCAAG,8BAAAsC,EAAA,6DACRiB,EAAiBR,IAAKC,MAAMC,KAAKhD,GAAgBuD,IAAIT,IAAKC,MAAMC,KAAKE,KAAKC,IAAI,GAAIpB,EAAUW,YADpF,SAGGjD,EAAc+D,cAAcvB,EAAWqB,EAAgB3D,GAH1D,cAGR8D,EAHQ,OAKdvB,QAAQC,IAAI,CAAEsB,OALA,SAORlB,IAPQ,2CAAH,qDAUf,OACI,mCACKtC,EAAqB,cAAC,EAAD,CAClBN,QAASA,EACTC,YAAamC,EAAUqB,OACvBvD,YAAakC,EAAUc,QACvB/C,kBAAmBA,EACnBE,eAAgBA,EAChBE,aAAcA,EACdH,UAAWA,EACXE,kBAAmBA,IAEnB,iD,qCE3EZR,EACAiE,EACAC,E,gCCPEC,EAASC,EAAQ,IA6CRC,EAxCX,WAAYC,GAAiB,IAAD,gCAF5BC,eAE4B,OAM5BZ,OAN4B,sBAMnB,sBAAAf,EAAA,+EACE,EAAK2B,UAAUZ,UADjB,2CANmB,KAU5BV,SAV4B,sBAUjB,sBAAAL,EAAA,+EACA,EAAK2B,UAAUtB,YADf,2CAViB,KAc5BW,KAd4B,sBAcrB,sBAAAhB,EAAA,+EACI,EAAK2B,UAAUX,QADnB,2CAdqB,KAkB5BY,WAlB4B,sBAkBf,sBAAA5B,EAAA,+EACF,EAAK2B,UAAUE,SADb,2CAlBe,KAsB5BC,aAtB4B,uCAsBb,WAAOC,EAAiBC,EAAgBC,GAAxC,SAAAjC,EAAA,+EACJ,EAAK2B,UAAUG,aAAaC,EAASC,EAAQ,CAAEC,UAD3C,2CAtBa,+DA0B5B3B,gBA1B4B,uCA0BV,WAAOhD,GAAP,SAAA0C,EAAA,+EACP,EAAK2B,UAAUO,eAAe5E,IADvB,2CA1BU,2DA8B5B6D,cA9B4B,uCA8BZ,WAAOvB,EAAmBoC,EAAgBC,GAA1C,SAAAjC,EAAA,+EACL,EAAK2B,UAAUR,cAAcvB,EAAWoC,EAAQ,CAAEC,UAD7C,2CA9BY,+DAkC5BE,kBAlC4B,uCAkCR,WAAOC,EAAgBxC,EAAmBoC,EAAgBC,GAA1D,SAAAjC,EAAA,+EACT,EAAK2B,UAAUU,iBAAiBD,EAAQxC,EAAWoC,EAAQ,CAAEC,UADpD,2CAlCQ,4DACxBV,EAAOG,EAAW,2BAElBY,KAAKX,UAAYD,G,SDLnBa,EAAkBf,EAAQ,KAW1BgB,EAAgB,uCAAG,WAAOnD,GAAP,eAAAW,EAAA,6DAIjByC,EAAeF,EAAgBG,IAClBC,YAAYtD,EAAKuD,iBALb,kBAOdH,GAPc,2CAAH,sDAWhBxC,EAAiB,uCAAG,WAAOZ,EAAWC,EAAqBhC,GAAvC,iBAAA0C,EAAA,mEAGb1C,GAAWA,IAAYgE,GACvBhC,GAAeA,IAAgB+B,KAlBxCjE,OAAgBqC,GAsBPrC,EARa,wBASdiE,EAAmB/B,EACnBgC,EAAuBhE,EAVT,SAYUkF,EAAiBnD,GAZ3B,cAYRqC,EAZQ,iBAaaA,EAAUmB,GAAGvD,GAb1B,QAaRmD,EAbQ,OAcdrF,EAAgB,IAAIqE,EAAcgB,GAdpB,iCAgBXrF,GAhBW,yCAkBlByC,QAAQM,MAAR,MAlBkB,kBAmBX,MAnBW,0DAAH,0DAuBRF","file":"static/js/21.4913bf3f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport loadYakiTokenRepo from \"src/logic/YakiToken\";\r\nimport Layout from './Layout'\r\nimport Web3 from 'web3'\r\n\r\n\r\ntype YakiWalletProps = {\r\n    web3: any\r\n    account: string\r\n    yakiAddress: string\r\n}\r\n\r\nlet yakiTokenRepo: any\r\n\r\nconst YakiWallet: React.FC<YakiWalletProps> = ({\r\n    web3, account, yakiAddress\r\n}) => {\r\n    const [isYakiTokenLoaded, setIsYakiTokenLoaded] = useState<boolean>(false)\r\n    const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n    const [tokenInfo, setTokenInfo] = useState<any>(undefined)\r\n    const [recipient, setRecipient] = useState<string>('')\r\n\r\n    console.log(yakiAddress)\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            try {\r\n                yakiTokenRepo = await loadYakiTokenRepo(web3, yakiAddress, account)\r\n                await getYakiInfo()\r\n                setIsYakiTokenLoaded(true)\r\n            } catch (err) {\r\n                setIsYakiTokenLoaded(false)\r\n                console.error(err)\r\n            }\r\n        }\r\n\r\n        init()\r\n    }, [])\r\n\r\n    const getYakiInfo = async () => {\r\n        const decimals = await yakiTokenRepo.decimals()\r\n        const balanceAmount = await yakiTokenRepo.pointBanlanceOf(account)\r\n        const balance = Web3.utils.toBN(balanceAmount).div(\r\n            Web3.utils.toBN(Math.pow(10, decimals))\r\n        )\r\n        const symbol = await yakiTokenRepo.symbol()\r\n        const name = await yakiTokenRepo.name()\r\n\r\n        const yakiData = {\r\n            balance: balance,\r\n            symbol: symbol,\r\n            name: name,\r\n            decimals: decimals\r\n        }\r\n\r\n        setTokenInfo(yakiData)\r\n    }\r\n\r\n    const transform = async () => {\r\n        const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, tokenInfo.decimals)))\r\n\r\n        const tx = await yakiTokenRepo.transferPoint(recipient, formatedAmount, account)\r\n\r\n        console.log({ tx })\r\n\r\n        await getYakiInfo()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isYakiTokenLoaded ? (<Layout\r\n                account={account}\r\n                tokenSymbol={tokenInfo.symbol}\r\n                tokenAmount={tokenInfo.balance}\r\n                setSelectedAmount={setSelectedAmount}\r\n                selectedAmount={selectedAmount}\r\n                setRecipient={setRecipient}\r\n                transform={transform}\r\n                isYakiTokenLoaded={isYakiTokenLoaded}\r\n            />) : (\r\n                <div>Loading...</div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default YakiWallet","import React from 'react'\r\nimport { Form, Row, Col, Container, Button } from \"react-bootstrap\"\r\n\r\ntype TokenAccountProps = {\r\n    account: string\r\n    tokenSymbol: string\r\n    tokenAmount: string\r\n    setSelectedAmount: any\r\n    selectedAmount: string\r\n    transform: any\r\n    isYakiTokenLoaded: boolean\r\n    setRecipient: any\r\n}\r\n\r\nconst Layout: React.FC<TokenAccountProps> = (\r\n    {\r\n        account,\r\n        tokenSymbol,\r\n        tokenAmount,\r\n        setSelectedAmount,\r\n        selectedAmount,\r\n        transform,\r\n        isYakiTokenLoaded,\r\n        setRecipient\r\n    }\r\n) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            {isYakiTokenLoaded ? (\r\n                <Container>\r\n                    <Form>\r\n                        <Form.Group as={Row} className=\"mb-3\" controlId=\"yakiSymbol\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Token Name\r\n                            </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control plaintext readOnly defaultValue={tokenSymbol}></Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} className=\"mb-3\" controlId=\"yakiBalance\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Balance\r\n                            </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control plaintext readOnly defaultValue={tokenAmount} />\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Row} className=\"mb-3\" controlId=\"yakiAmount\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Amount\r\n                            </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control type=\"string\" onChange={e=>setSelectedAmount(e.target.value)}/>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} className=\"mb-3\" controlId=\"tradeAccount\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Account address\r\n                            </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control type=\"string\" onChange={e=>setRecipient(e.target.value)}/>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Button onClick={e=>transform()}>\r\n                            Submit\r\n                        </Button>\r\n\r\n                    </Form>\r\n                </Container>\r\n\r\n            ) : (\r\n                <div>Loading...</div>\r\n            )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Layout","import YakiTokenRepo from \"./YAKID\";\r\nimport YAKI from '../../abi/YAKIID.json'\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet yakiTokenRepo: YakiTokenRepo | undefined\r\nlet yakiAddressCache: string\r\nlet providerAccountCache: string\r\nlet contract: object | undefined\r\n\r\nconst resetYakiTokenRepo = () => {\r\n    yakiTokenRepo = undefined\r\n}\r\n\r\nconst loadYakiContract = async (web3: any) => {\r\n    let yakiContract\r\n    if (!contract) {\r\n        // weth9Contract = TruffleContract(WETH9)\r\n        yakiContract = TruffleContract(YAKI)\r\n        yakiContract.setProvider(web3.currentProvider)\r\n    }\r\n    return yakiContract\r\n}\r\n\r\n\r\nconst loadYakiTokenRepo = async (web3: any, yakiAddress: string, account: string) => {\r\n    try {\r\n        if (\r\n            (account && account !== providerAccountCache) ||\r\n            (yakiAddress && yakiAddress !== yakiAddressCache)\r\n        ) {\r\n            resetYakiTokenRepo()\r\n        }\r\n        if (!yakiTokenRepo) {\r\n            yakiAddressCache = yakiAddress\r\n            providerAccountCache = account\r\n\r\n            const contracts = await loadYakiContract(web3)\r\n            const yakiContract = await contracts.at(yakiAddress)\r\n            yakiTokenRepo = new YakiTokenRepo(yakiContract)\r\n        }\r\n        return yakiTokenRepo\r\n    } catch (err) {\r\n        console.error(err)\r\n        return null\r\n    }\r\n}\r\n\r\nexport default loadYakiTokenRepo\r\n","const assert = require('assert')\r\n\r\nclass YakiTokenRepo {\r\n    yakiToken: any\r\n\r\n    constructor(contracts: any) {\r\n        assert(contracts, '\"contracts\" is required')\r\n\r\n        this.yakiToken = contracts\r\n    }\r\n\r\n    symbol = async () => {\r\n        return this.yakiToken.symbol()\r\n    }\r\n\r\n    decimals = async () => {\r\n        return this.yakiToken.decimals()\r\n    }\r\n\r\n    name = async () => {\r\n        return this.yakiToken.name()\r\n    }\r\n\r\n    getAddress = async () => {\r\n        return this.yakiToken.address\r\n    }\r\n\r\n    approvePoint = async (spender: string, amount: number, from: string) => {\r\n        return this.yakiToken.approvePoint(spender, amount, { from })\r\n    }\r\n\r\n    pointBanlanceOf = async (account: string) => {\r\n        return this.yakiToken.pointBalanceOf(account)\r\n    }\r\n\r\n    transferPoint = async (recipient: string, amount: number, from: string) => {\r\n        return this.yakiToken.transferPoint(recipient, amount, { from })\r\n    }\r\n\r\n    transferPointFrom = async (sender: string, recipient: string, amount: number, from: string) => {\r\n        return this.yakiToken.tranferPointFrom(sender, recipient, amount, { from })\r\n    }\r\n\r\n}\r\n\r\nexport default YakiTokenRepo"],"sourceRoot":""}