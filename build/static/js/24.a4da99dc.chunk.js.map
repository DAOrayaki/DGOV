{"version":3,"sources":["components/HotMarketPage/MarketLayout.tsx","components/HotMarketPage/MarketProvider.tsx"],"names":["Market","lazy","MarketLayout","web3","account","address","MARKET_QUERY","gql","useQuery","variables","toLowerCase","fetchPolicy","loading","error","data","refetch","console","log","SpinnerPage","lmsrmarketMaker","lmsrmarketMakers","d","Date","now","parseInt","creationTimestamp","fallback","lmsrAddress","questionId","outcomeCount","outcomeSlotCount","oracle","creator","createTime","questionType","className","MarketProvider","useParams","client","ApolloClient","uri","process","cache","InMemoryCache","ApolloProvider"],"mappings":"wMAIMA,EAASC,gBAAK,kBAAM,qEAsFXC,EA7E6B,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAIpDC,EAAeC,YAAH,mgBAyBlB,EAA0CC,YAASF,EAAc,CAC7DG,UAAW,CAAE,GAAMJ,EAAQK,eAC3BC,YAAa,aAFTC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAxB,EAA8BC,QAO9B,GAFAC,QAAQC,IAAIZ,GAERO,EAAS,OAAO,cAACM,EAAA,EAAD,IAEpB,GAAIL,EAAO,OAAO,wCAClB,IAAMM,EAAkBL,EAAKM,iBACzBC,EAAU,IAAIC,KAAKA,KAAKC,OAK5B,OAJIJ,IACAE,EAAI,IAAIC,KAAmD,IAA9CE,SAASL,EAAgBM,qBAKtC,aADA,CACA,gBACKX,EAAKK,gBACF,mCACI,cAAC,WAAD,CAAUO,SAAU,cAACR,EAAA,EAAD,IAApB,SACI,cAAClB,EAAD,CACIG,KAAMA,EACNC,QAASA,EACTuB,YAAatB,EACbuB,WAAYd,EAAKK,gBAAgBS,WACjCC,aAAcf,EAAKK,gBAAgBW,iBACnCC,OAAQjB,EAAKK,gBAAgBY,OAC7BC,QAASlB,EAAKK,gBAAgBa,QAC9BC,WAAYZ,EACZa,aAAcpB,EAAKoB,mBAOD,oBAAIC,UAAU,cAAd,8BC1C/BC,UApBuC,SAAC,GAAuB,IAArBjC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAGvDC,EAAYgC,cAAZhC,QAGAiC,EAAS,IAAIC,IAAa,CAC9BC,IAAKC,oEAELC,MAAO,IAAIC,MAEb,OAEE,aADA,CACCC,EAAA,EAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,EAAD,CAAcnC,KAAMA,EAAMC,QAASA,EAASC,QAASA","file":"static/js/24.a4da99dc.chunk.js","sourcesContent":["import React, { useState, Suspense, lazy } from \"react\";\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\nimport SpinnerPage from \"../SpinnerPage\";\r\n// import Market from 'src/components/Market'\r\nconst Market = lazy(() => import('src/components/Market/index'))\r\n\r\ntype MarketProps = {\r\n    web3: any\r\n    account: string\r\n    address: string\r\n}\r\n\r\n\r\nconst MarketLayout: React.FC<MarketProps> = ({ web3, account, address }) => {\r\n\r\n\r\n\r\n    const MARKET_QUERY = gql`\r\n    query lsmrMarkets($id: String) {\r\n        lmsrmarketMaker(id: $id) {\r\n          id\r\n          creator\r\n          creationTimestamp\r\n          collateralToken\r\n          conditions {\r\n            id\r\n            oracle\r\n            questionId\r\n            outcomeSlotCount\r\n          }\r\n          funding\r\n          fee\r\n          condition {\r\n            id\r\n          }\r\n          oracle\r\n          questionId\r\n          questionType\r\n          outcomeSlotCount\r\n        }\r\n   }\r\n  `\r\n    const { loading, error, data, refetch } = useQuery(MARKET_QUERY, {\r\n        variables: { 'id': address.toLowerCase() },\r\n        fetchPolicy: \"no-cache\"\r\n    }\r\n    )\r\n    console.log(address)\r\n\r\n    if (loading) return <SpinnerPage />\r\n\r\n    if (error) return <p>Error :</p>\r\n    const lmsrmarketMaker = data.lmsrmarketMakers\r\n    let d: Date = new Date(Date.now())\r\n    if (lmsrmarketMaker) {\r\n        d = new Date(parseInt(lmsrmarketMaker.creationTimestamp) * 1000);\r\n    }\r\n    \r\n    return (\r\n        //@ts-ignore\r\n        <div>\r\n            {data.lmsrmarketMaker ? (\r\n                <>\r\n                    <Suspense fallback={<SpinnerPage />}>\r\n                        <Market\r\n                            web3={web3}\r\n                            account={account}\r\n                            lmsrAddress={address}\r\n                            questionId={data.lmsrmarketMaker.questionId}\r\n                            outcomeCount={data.lmsrmarketMaker.outcomeSlotCount}\r\n                            oracle={data.lmsrmarketMaker.oracle}\r\n                            creator={data.lmsrmarketMaker.creator} \r\n                            createTime={d}\r\n                            questionType={data.questionType}\r\n                            />\r\n\r\n                    </Suspense>\r\n                </>\r\n            ) : (\r\n                // <div>No data found</div>\r\n                                              <h1 className=\"text-center\">\r\n                                        No data found</h1>\r\n            )}\r\n            {/* <p>{data.lmsrmarketMaker.id}</p> */}\r\n            {/* <button onClick={() => refetch()}>Refetch!</button> */}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MarketLayout\r\n","import React from \"react\";\r\n\r\n// import ApolloClient from \"apollo-boost\";\r\n// import { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\r\n// import { ApolloProvider, useQuery} from \"react-apollo\"\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\nimport { useParams } from 'react-router-dom';\r\n// import Market from 'src/components/Market'\r\nimport MarketLayout from './MarketLayout'\r\n\r\n\r\ntype MarketProviderProps = {\r\n  web3: any\r\n  account: string\r\n  // address: string\r\n}\r\n\r\n\r\nconst MarketProvider: React.FC<MarketProviderProps> = ({ web3, account }) => {\r\n\r\n  //@ts-ignore\r\n  let { address } = useParams();\r\n\r\n  //@ts-ignore\r\n  const client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n    // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n    cache: new InMemoryCache()\r\n  });\r\n  return (\r\n    //@ts-ignore\r\n    <ApolloProvider client={client}>\r\n      <MarketLayout web3={web3} account={account} address={address}></MarketLayout>\r\n    </ApolloProvider>\r\n  )\r\n\r\n}\r\n\r\nexport default MarketProvider"],"sourceRoot":""}