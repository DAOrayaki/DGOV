{"version":3,"sources":["logic/contracts.ts","utils/markets.ts","logic/ConditionalTokens/index.ts","logic/ConditionalTokens/ConditionalTokensRepo.ts","logic/MarketMakers/index.ts","logic/MarketMakers/MarketMakersRepo.ts","components/Market/Progress.tsx","components/Market/Layout.tsx","components/Market/index.tsx"],"names":["contracts","lmsrAddressCache","providerAccountCache","TruffleContract","require","loadLMSRMarketMakerContract","web3","a","lmsrMarketMakerContract","LMSRMarketMaker","setProvider","currentProvider","loadConditionalTokensContract","conditionalTokensContract","ConditionalTokens","loadWETH9Contract","weth9Contract","YAKI","loadContracts","lmsrAddress","account","undefined","LMSRMarketMakerContract","ConditionalTokensContract","WETH9Contract","at","lmsrMarketMaker","pmSystem","conditionalTokens","collateralToken","address","contract","name","decimals","symbol","console","error","getConditionId","oracleAddress","questionId","outcomeSlotCount","Web3","utils","soliditySha3","t","v","getPositionId","collectionId","conditionalTokensRepo","assert","ConditionalTokensRepo","balanceOf","positionId","getOutcomeSlotCount","id","getCollectionId","parentCollectionId","conditionId","indexSet","payoutDenominator","payoutNumerators","outcomeIndex","isApprovedForAll","lmsrMarketMakerAddress","setApprovalForAll","approved","from","reportPayouts","payouts","redeemPositions","collateralAddress","marketConditionId","indexSets","this","loadConditionalTokensRepo","marketMakersRepo","MarketMakersRepo","getAddress","getCollateralToken","conditionIds","index","owner","funding","stage","close","calcNetCost","outcomeTokenAmounts","calcMarginalPrice","trade","tradeAmounts","collateralLimit","loadMarketMakersRepo","CloseProgress","now","Container","fluid","Row","Col","md","sm","className","styles","circleRed","ProgressBar","label","toFixed","circleGray","ResolveProgress","EndProgress","Progress","useState","data","TradingForm","isMarketClosed","marketInfo","setSelectedOutcomeToken","setSelectedAmount","selectedOutcomeToken","Form","Group","outcomes","map","outcome","payoutNumerator","rightOutcome","wrongOutcome","join","Check","type","onChange","e","checked","Label","title","parseFloat","probability","toString","outcomeInfo","balance","TradingModal","action","actionFunc","setModalShow","modelShow","selectedAmount","Modal","show","onHide","Body","controlId","Control","placeholder","target","value","Footer","Button","variant","onClick","disabled","isDisabled","TraderActions","redeem","buy","sell","buyShow","setBuyShow","sellShow","setSellShow","redeemShow","setRedeemShow","actions","OperatorActions","OracleActions","resolve","Array","length","fill","checkedState","setCheckedState","short","position","updatedCheckedState","item","handleOnChange","htmlFor","Layout","isConditionLoaded","oracle","creator","createTime","log","stage1_duration","questionType","stage2_duration","d","diff","Date","getTime","nowProgress","diffDays","Math","ceil","startDate","getFullYear","getMonth","getDate","getHours","getMinutes","remainDays","conditon","xs","lg","totalVolume","toLowerCase","bs58","BigNumber","config","EXPONENTIAL_AT","MarketStage","utf8decoder","TextDecoder","getIpfsHashFromBytes32","bytes32Hex","hashHex","slice","hashBytes","Buffer","encode","Market","outcomeCount","setIsConditionLoaded","setMarketInfo","client","create","process","useEffect","getMarketInfo","init","collateral","cid","stream","cat","chunk","decode","markets","JSON","parse","totalSupply","parseInt","pow","repeat","dividedBy","push","marketData","formatedAmount","toBN","mul","cost","allowancePoint","collateralBalance","gt","approvePoint","tx","i","neg","profit","resolutionOutcomeIndex","Closed"],"mappings":"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","file":"static/js/6.80fccef9.chunk.js","sourcesContent":["import ConditionalTokens from '../abi/ConditionalTokens.json'\r\nimport LMSRMarketMaker from '../abi/LMSRMarketMaker.json'\r\nimport YAKI from '../abi/YAKIID.json'\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet contracts: Object | undefined\r\nlet lmsrAddressCache: string | undefined\r\nlet providerAccountCache: string | undefined\r\n\r\nconst resetContracts = () => {\r\n  contracts = undefined\r\n  lmsrAddressCache = undefined\r\n  providerAccountCache = undefined\r\n}\r\n\r\nconst loadLMSRMarketMakerContract = async (web3: any) => {\r\n  let lmsrMarketMakerContract\r\n  if (!contracts) {\r\n    lmsrMarketMakerContract = TruffleContract(LMSRMarketMaker)\r\n    lmsrMarketMakerContract.setProvider(web3.currentProvider)\r\n  }\r\n  return lmsrMarketMakerContract\r\n}\r\n\r\nconst loadConditionalTokensContract = async (web3: any) => {\r\n  let conditionalTokensContract\r\n  if (!contracts) {\r\n    conditionalTokensContract = TruffleContract(ConditionalTokens)\r\n    conditionalTokensContract.setProvider(web3.currentProvider)\r\n  }\r\n  return conditionalTokensContract\r\n}\r\n\r\nconst loadWETH9Contract = async (web3: any) => {\r\n  let weth9Contract\r\n  if (!contracts) {\r\n    // weth9Contract = TruffleContract(WETH9)\r\n    weth9Contract = TruffleContract(YAKI)\r\n    weth9Contract.setProvider(web3.currentProvider)\r\n  }\r\n  return weth9Contract\r\n}\r\n\r\nconst loadContracts = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetContracts()\r\n    }\r\n    if (!contracts) {\r\n      providerAccountCache = account\r\n      lmsrAddressCache = lmsrAddress\r\n\r\n      const LMSRMarketMakerContract = await loadLMSRMarketMakerContract(web3)\r\n      const ConditionalTokensContract = await loadConditionalTokensContract(web3)\r\n      const WETH9Contract = await loadWETH9Contract(web3)\r\n\r\n      const lmsrMarketMaker = await LMSRMarketMakerContract.at(lmsrAddress)\r\n      const conditionalTokens = await ConditionalTokensContract.at(await lmsrMarketMaker.pmSystem())\r\n      const collateralToken = {\r\n        address: await lmsrMarketMaker.collateralToken(),\r\n        contract: await WETH9Contract.at(await lmsrMarketMaker.collateralToken()),\r\n        name: 'YAKI TOKEN',\r\n        decimals: 18,\r\n        symbol: 'YAKI',\r\n      }\r\n\r\n      contracts = { lmsrMarketMaker, conditionalTokens, collateralToken }\r\n    }\r\n    return contracts\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadContracts\r\n","import Web3 from 'web3'\r\n\r\nexport const getConditionId = (\r\n  oracleAddress: string,\r\n  questionId: string,\r\n  outcomeSlotCount: number,\r\n) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: oracleAddress },\r\n    { t: 'bytes32', v: questionId },\r\n    { t: 'uint', v: outcomeSlotCount },\r\n  )\r\n}\r\n\r\nexport const getPositionId = (collateralToken: string, collectionId: string) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: collateralToken },\r\n    { t: 'bytes32', v: collectionId },\r\n  )\r\n}\r\n","import ConditionalTokensRepo from './ConditionalTokensRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet conditionalTokensRepo: ConditionalTokensRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetConditionalTokensRepo = () => {\r\n  conditionalTokensRepo = undefined\r\n}\r\n\r\nconst loadConditionalTokensRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetConditionalTokensRepo()\r\n    }\r\n    if (!conditionalTokensRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      conditionalTokensRepo = new ConditionalTokensRepo(contracts)\r\n    }\r\n    return conditionalTokensRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadConditionalTokensRepo\r\n","const assert = require('assert')\r\n\r\nclass ConditionalTokensRepo {\r\n  conditionalTokens: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.conditionalTokens = contracts.conditionalTokens\r\n  }\r\n\r\n  balanceOf = async (account: string, positionId: number) => {\r\n    return this.conditionalTokens.balanceOf(account, positionId)\r\n  }\r\n\r\n  getOutcomeSlotCount = async (id: string) => {\r\n    return this.conditionalTokens.getOutcomeSlotCount(id)\r\n  }\r\n\r\n  getCollectionId = async (parentCollectionId: string, conditionId: string, indexSet: number[]) => {\r\n    return this.conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet)\r\n  }\r\n\r\n  payoutDenominator = async (conditionId: string) => {\r\n    return this.conditionalTokens.payoutDenominator(conditionId)\r\n  }\r\n\r\n  payoutNumerators = async (conditionId: string, outcomeIndex: number) => {\r\n    return this.conditionalTokens.payoutNumerators(conditionId, outcomeIndex)\r\n  }\r\n\r\n  isApprovedForAll = async (account: string, lmsrMarketMakerAddress: string) => {\r\n    return this.conditionalTokens.isApprovedForAll(account, lmsrMarketMakerAddress)\r\n  }\r\n\r\n  setApprovalForAll = async (lmsrMarketMakerAddress: string, approved: boolean, from: string) => {\r\n    return this.conditionalTokens.setApprovalForAll(lmsrMarketMakerAddress, approved, { from })\r\n  }\r\n\r\n  reportPayouts = async (questionId: string, payouts: number[], from: string) => {\r\n    return this.conditionalTokens.reportPayouts(questionId, payouts, { from })\r\n  }\r\n\r\n  redeemPositions = async (\r\n    collateralAddress: string,\r\n    parentCollectionId: string,\r\n    marketConditionId: string,\r\n    indexSets: number[],\r\n    from: string,\r\n  ) => {\r\n    return this.conditionalTokens.redeemPositions(\r\n      collateralAddress,\r\n      parentCollectionId,\r\n      marketConditionId,\r\n      indexSets,\r\n      { from },\r\n    )\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default ConditionalTokensRepo\r\n","import MarketMakersRepo from './MarketMakersRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet marketMakersRepo: MarketMakersRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetMarketMakersRepo = () => {\r\n  marketMakersRepo = undefined\r\n}\r\n\r\nconst loadMarketMakersRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetMarketMakersRepo()\r\n    }\r\n    if (!marketMakersRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      marketMakersRepo = new MarketMakersRepo(contracts)\r\n    }\r\n    return marketMakersRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadMarketMakersRepo\r\n","const assert = require('assert')\r\n\r\nclass MarketMakersRepo {\r\n  lmsrMarketMaker: any\r\n  collateralToken: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.lmsrMarketMaker = contracts.lmsrMarketMaker\r\n    this.collateralToken = contracts.collateralToken\r\n  }\r\n\r\n  getAddress = async () => {\r\n    return this.lmsrMarketMaker.address\r\n  }\r\n\r\n  getCollateralToken = async () => {\r\n    return this.collateralToken\r\n  }\r\n\r\n  conditionIds = async (index: number) => {\r\n    return this.lmsrMarketMaker.conditionIds(index)\r\n  }\r\n\r\n  owner = async () => {\r\n    return this.lmsrMarketMaker.owner()\r\n  }\r\n\r\n  funding = async () => {\r\n    return this.lmsrMarketMaker.funding()\r\n  }\r\n\r\n  stage = async () => {\r\n    return this.lmsrMarketMaker.stage()\r\n  }\r\n\r\n  close = async (from: string) => {\r\n    return this.lmsrMarketMaker.close({ from })\r\n  }\r\n\r\n  calcNetCost = async (outcomeTokenAmounts: number[]) => {\r\n    return this.lmsrMarketMaker.calcNetCost(outcomeTokenAmounts)\r\n  }\r\n\r\n  calcMarginalPrice = async (outcomeIndex: number) => {\r\n    return this.lmsrMarketMaker.calcMarginalPrice(outcomeIndex)\r\n  }\r\n\r\n  trade = async (tradeAmounts: number[], collateralLimit: number, from: string) => {\r\n    return this.lmsrMarketMaker.trade(tradeAmounts, collateralLimit, { from })\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default MarketMakersRepo\r\n","import React, { useState } from 'react'\r\nimport { Container, Row, Col, ProgressBar } from 'react-bootstrap'\r\nimport styles from 'src/components/style.module.css'\r\n\r\ntype ProgressProperty = {\r\n    now: number\r\n    stage: number\r\n}\r\n\r\ntype StageProperty = {\r\n    now: number\r\n}\r\n\r\nconst CloseProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={0} label={`${0}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ResolveProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={now} label={`${now.toFixed(2)}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleGray}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst EndProgress: React.FC<StageProperty> = ({\r\n    now\r\n}) => {\r\n    return (\r\n        <>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                        <ProgressBar now={100} label={`${100}%`}></ProgressBar >\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <div className={styles.circleRed}></div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col md={1} sm={1} className=\"justify-content-center\">\r\n                        <p className=\"text-left\">Start</p>\r\n                    </Col>\r\n\r\n                    <Col md={4} sm={4}>\r\n                        <p> ... </p>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Close</p>\r\n                    </Col>\r\n                    <Col md={4} sm={4}>\r\n                    </Col>\r\n                    <Col md={1} sm={1}>\r\n                        <p className=\"text-left\">Resolve</p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Progress: React.FC<ProgressProperty> = ({\r\n    now,\r\n    stage\r\n}) => {\r\n\r\n    const [currentStage, setCurrentStage] = useState<number>(0)\r\n\r\n    const data = () => {\r\n        switch (stage) {\r\n            case 0:\r\n                return (\r\n                    <CloseProgress now={now}></CloseProgress>\r\n                )\r\n            case 1:\r\n                return (\r\n                    <ResolveProgress now={now}></ResolveProgress>\r\n                )\r\n            case 2:\r\n                return (\r\n                    <EndProgress now={now}></EndProgress>\r\n                )\r\n\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div>\r\n            {data()}\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default Progress\r\n","import React from 'react'\r\n// import { Paper, Button, TextField, RadioGroup, FormControlLabel, Radio} from '@material-ui/core'\r\nimport { Container, Button, Form, Row, Col, ProgressBar, Modal, InputGroup, FormControl, Spinner } from \"react-bootstrap\"\r\nimport styles from '../style.module.css'\r\nimport { useState } from \"react\"\r\n//@ts-ignore\r\nimport Progress from 'src/components/Market/Progress'\r\n\r\n\r\ntype TradingFormProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n}\r\n\r\ntype TraderActionsProps = {\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  redeem: any\r\n  buy: any\r\n  sell: any\r\n  setSelectedAmount: any\r\n\r\n}\r\n\r\ntype OperatorActionsProps = {\r\n  isMarketClosed: boolean\r\n  close: any\r\n}\r\n\r\ntype OracleActionsProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  resolve: any\r\n}\r\n\r\ntype TradingModalProps = {\r\n  action: string\r\n  actionFunc: any\r\n  setModalShow: any\r\n  modelShow: boolean\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  setSelectedAmount: any\r\n}\r\n\r\ntype LayoutProps = {\r\n  account: string\r\n  isConditionLoaded: boolean\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  selectedAmount: string\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n  buy: any\r\n  sell: any\r\n  redeem: any\r\n  close: any\r\n  resolve: any\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n}\r\n\r\nconst TradingForm: React.FC<TradingFormProps> = ({\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n}) => (\r\n  <>\r\n    <Form>\r\n      {/* <div className={styles.inputContainer}>\r\n      <TextField\r\n        variant=\"filled\"\r\n          label=\"Collateral value\"\r\n          type=\"number\"\r\n          onChange={e => setSelectedAmount(e.target.value)}\r\n          disabled={isMarketClosed}\r\n        />\r\n      </div> */}\r\n      {/* <Form.Group className=\"mb-3\" controlId='amount'>\r\n        <Form.Label>Yaki</Form.Label>\r\n      </Form.Group> */}\r\n\r\n      <Form.Group>\r\n        {/* <Form.Check type=\"checkbox\" label\r\n        <RadioGroup\r\n          defaultValue={0}\r\n          onChange={e => setSelectedOutcomeToken(parseInt(e.target.value))}\r\n          value={selectedOutcomeToken}\r\n        > */}\r\n        <Row className=\"mt-4\">\r\n          <Col sm md={7}>\r\n            <p className=\"text-center\">Trend</p>\r\n          </Col>\r\n          <Col sm md={2}>\r\n            <p>Price(YakID)</p>\r\n          </Col>\r\n          <Col sm md={3}>\r\n            <p>MyShares</p>\r\n          </Col>\r\n\r\n        </Row>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <div\r\n            key={outcome.title}\r\n            className={[\r\n              styles.outcome,\r\n              marketInfo.payoutDenominator > 0 && outcome.payoutNumerator > 0 && styles.rightOutcome,\r\n              marketInfo.payoutDenominator > 0 &&\r\n              !(outcome.payoutNumerator > 0) &&\r\n              styles.wrongOutcome,\r\n            ].join(' ')}\r\n          >\r\n            {/* <FormControlLabel\r\n                value={!isMarketClosed ? outcome.index : 'disabled'}\r\n                control={<Radio color=\"primary\" />}\r\n                label={outcome.title}\r\n              /> */}\r\n            <Row>\r\n              <Col sm md={1}>\r\n                <Form.Check type=\"radio\" id={`checkitem${index}`} name=\"checkitems\" onChange={e => setSelectedOutcomeToken(index)} checked={index == selectedOutcomeToken}>\r\n                </Form.Check>\r\n              </Col>\r\n              <Col sm md={6}>\r\n                <Row className=\"d-inline\">\r\n                  <Form.Label>{outcome.title}</Form.Label>\r\n                </Row>\r\n                <Row>\r\n                  <ProgressBar className=\"pl-0 ml-0\" now={parseFloat(outcome.probability.toString()) * 100} label={`${(parseFloat(outcome.probability.toString()) * 100).toFixed(2)}%`}></ProgressBar>\r\n                </Row>\r\n              </Col>\r\n              <Col sm md={2}>\r\n                <div className={styles.outcomeInfo}>{outcome.probability.toString()}</div>\r\n              </Col>\r\n              <Col sm md={3}>\r\n                <div className={styles.outcomeInfo}>\r\n                  {outcome.balance.toFixed(5).toString()}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        ))}\r\n        {/* </RadioGroup> */}\r\n      </Form.Group>\r\n    </Form >\r\n  </>\r\n)\r\n\r\nconst TradingModal: React.FC<TradingModalProps> = ({\r\n  action,\r\n  actionFunc,\r\n  setModalShow,\r\n  modelShow,\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  setSelectedAmount\r\n}) => {\r\n  const onFire = () => {\r\n    actionFunc()\r\n    setModalShow(false)\r\n  }\r\n\r\n  const isDisabled = () => {\r\n    switch (action) {\r\n      case \"buy\":\r\n        return isMarketClosed || !selectedAmount\r\n\r\n      case \"sell\":\r\n        return isMarketClosed || !selectedAmount\r\n\r\n      case \"redeem\":\r\n        return !isMarketClosed || !marketInfo.payoutDenominator\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Modal show={modelShow} onHide={() => setModalShow(false)}>\r\n\r\n        <Modal.Body>\r\n          {/* <p>Modal body text goes here.</p> */}\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n            <Form.Label>Output Shares</Form.Label>\r\n            <Form.Control type=\"number\" placeholder=\"Enter output shares \" onChange={e => setSelectedAmount(e.target.value)} />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setModalShow(false)}>Close</Button>\r\n          <Button variant=\"primary\" onClick={onFire} disabled={isDisabled()}>{action}</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nconst TraderActions: React.FC<TraderActionsProps> = ({\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  redeem,\r\n  buy,\r\n  sell,\r\n  setSelectedAmount\r\n}) => {\r\n  const [buyShow, setBuyShow] = useState(false)\r\n  const [sellShow, setSellShow] = useState(false)\r\n  const [redeemShow, setRedeemShow] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.actions}>\r\n        <Button\r\n          variant=\"outline-dark\"\r\n          onClick={() => setRedeemShow(true)}\r\n          // onClick={redeem}\r\n          disabled={!isMarketClosed || !marketInfo.payoutDenominator}\r\n          className=\"me-0\"\r\n        >\r\n          Redeem\r\n        </Button>\r\n        <Button variant=\"outline-dark\"\r\n          onClick={() => setBuyShow(true)}\r\n          // onClick={buy} \r\n          disabled={isMarketClosed}\r\n          className=\"me-1\"\r\n        >\r\n          Buy\r\n        </Button>\r\n        <Button variant=\"outline-dark\"\r\n          onClick={() => setSellShow(true)}\r\n          // onClick={sell}\r\n          disabled={isMarketClosed}\r\n          className=\"me-1\"\r\n        >\r\n          Sell\r\n        </Button>\r\n\r\n        <TradingModal action=\"buy\" actionFunc={buy} modelShow={buyShow} setModalShow={setBuyShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n        ></TradingModal>\r\n        <TradingModal action=\"sell\" actionFunc={sell} modelShow={sellShow} setModalShow={setSellShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n\r\n        ></TradingModal>\r\n        <TradingModal action=\"redeem\" actionFunc={redeem} modelShow={redeemShow} setModalShow={setRedeemShow}\r\n          marketInfo={marketInfo}\r\n          isMarketClosed={isMarketClosed}\r\n          selectedAmount={selectedAmount}\r\n          setSelectedAmount={setSelectedAmount}\r\n\r\n        ></TradingModal>\r\n\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst OperatorActions: React.FC<OperatorActionsProps> = ({ isMarketClosed, close }) => (\r\n  <>\r\n    <h3>Operator actions:</h3>\r\n    <Button variant=\"danger\" onClick={close} disabled={isMarketClosed}>\r\n      Close\r\n    </Button>\r\n  </>\r\n)\r\n\r\nconst OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => {\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(marketInfo.outcomes.length).fill(false)\r\n  );\r\n\r\n  const handleOnChange = (position: any) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Oracle actions:</h3>\r\n      <div>\r\n        {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n          <li key={index}>\r\n            <input\r\n              type=\"checkbox\"\r\n              id={`custom-checkbox-${index}`}\r\n              name={outcome.short}\r\n              value={outcome.title}\r\n              checked={checkedState[index]}\r\n              onChange={() => handleOnChange(index)}\r\n            />\r\n            <label htmlFor={`custom-checkbox-${index}`}> {outcome.title} </label>\r\n          </li>\r\n        ))}\r\n        <Button\r\n          onClick={() => resolve(checkedState)}\r\n          variant=\"contained\"\r\n          disabled={!isMarketClosed}\r\n        >Resolve</Button>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst Layout: React.FC<LayoutProps> = ({\r\n  account,\r\n  isConditionLoaded,\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  selectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n  buy,\r\n  sell,\r\n  redeem,\r\n  close,\r\n  resolve,\r\n  oracle,\r\n  creator,\r\n  createTime\r\n}) => {\r\n\r\n  console.log(marketInfo)\r\n  const stage1_duration = marketInfo && marketInfo.questionType == 0 ? (4) : (3)\r\n  const stage2_duration = marketInfo && marketInfo.questionType == 0 ? (7) : (4)\r\n\r\n  var d = createTime\r\n\r\n  let nowDate: Date = new Date(Date.now())\r\n  var diff = nowDate.getTime() - d.getTime();\r\n  diff = diff > 0 ? diff : 0;\r\n  var diffDays = Math.ceil(diff / (1000 * 3600 * 24)) - 1;\r\n  var stage = isMarketClosed ? 1 : 0\r\n  console.log(stage)\r\n\r\n  if (isMarketClosed && marketInfo.payoutDenominator) {\r\n    stage = 2\r\n  }\r\n\r\n  var nowProgress\r\n  if (stage == 1) {\r\n    diffDays = diffDays - stage1_duration\r\n    diffDays = diffDays > 0 ? diffDays : 0\r\n    console.log('diffdays' + diffDays)\r\n    nowProgress = (diffDays / stage2_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration + stage2_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage2_duration + stage2_duration - diffDays\r\n\r\n  } else {\r\n    console.log('diffdays' + diffDays)\r\n    console.log('duration' + stage1_duration)\r\n\r\n    nowProgress = (diffDays / stage1_duration) * 100\r\n    var startDate = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + (d.getDate() + stage1_duration) + \" \" + d.getHours() + \":\" + d.getMinutes()\r\n    var remainDays = stage1_duration - diffDays\r\n\r\n  }\r\n  console.log(nowProgress)\r\n  console.log(stage)\r\n  console.log(oracle)\r\n\r\n  return (\r\n    <Container className={[styles.conditon].join(' ')}>\r\n      {isConditionLoaded ? (\r\n        <>\r\n          <Row className=\"justify-content-md-center mt-5\">\r\n            <Col xs sm lg=\"6\">\r\n              <Row>\r\n                <h2 className=\"text-center mb-5\">{marketInfo.title}</h2>\r\n              </Row>\r\n              <Row className=\"mt-2 pt-4 bg-transparent border border-primary\">\r\n                <Row>\r\n                  <Progress now={nowProgress} stage={stage}></Progress>\r\n                </Row>\r\n                <Row>\r\n\r\n                  <Col sm md={3} className=\"justify-content-md-center\">\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.funding} Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Liqudity</p>\r\n                  </Col>\r\n                  <Col sm md={3}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {marketInfo.totalVolume} Yakid </strong></p>\r\n                    <p className=\"mt-0 text-center\">Total Volume</p>\r\n\r\n                  </Col>\r\n                  <Col sm md={4}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {startDate} </strong></p>\r\n                    <p className=\"mt-0 text-center\">{stage == 0 ? (`Closing Date`) : (`Resolving Date`)}</p>\r\n                  </Col>\r\n                  <Col sm md={2}>\r\n                    <p className=\"mb-0 text-center\"> <strong> {remainDays} days </strong></p>\r\n                    <p className=\"mt-0 text-center\">Remaining</p>\r\n                  </Col>\r\n\r\n                </Row>\r\n              </Row>\r\n              <Row className=\"mt-2 bg-transparent border border-primary\">\r\n                <TradingForm\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                  setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n                  selectedOutcomeToken={selectedOutcomeToken}\r\n                />\r\n              </Row>\r\n              <Row className=\"justify-content-end\">\r\n                <TraderActions\r\n                  marketInfo={marketInfo}\r\n                  isMarketClosed={isMarketClosed}\r\n                  selectedAmount={selectedAmount}\r\n                  redeem={redeem}\r\n                  buy={buy}\r\n                  sell={sell}\r\n                  setSelectedAmount={setSelectedAmount}\r\n                />\r\n              </Row>\r\n              {account && account.toLowerCase() === creator && (\r\n                <OperatorActions isMarketClosed={isMarketClosed} close={close} />\r\n              )}\r\n              {account && account.toLowerCase() === oracle && (\r\n                <OracleActions\r\n                  isMarketClosed={isMarketClosed}\r\n                  marketInfo={marketInfo}\r\n                  resolve={resolve}\r\n                />\r\n              )}\r\n            </Col>\r\n          </Row>\r\n\r\n        </>\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"text-center\">Loading...</h1>\r\n        </div>\r\n      )}\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React, { useState, useEffect } from 'react'\r\nimport loadConditionalTokensRepo from 'src/logic/ConditionalTokens'\r\nimport loadMarketMakersRepo from 'src/logic/MarketMakers'\r\nimport { getConditionId, getPositionId } from 'src/utils/markets'\r\nimport BigNumber from 'bignumber.js'\r\nimport Layout from './Layout'\r\nimport { create } from 'ipfs-http-client'\r\nimport Web3 from 'web3'\r\n// import {web3} from 'web3'\r\nconst bs58 = require('bs58')\r\n\r\nBigNumber.config({ EXPONENTIAL_AT: 50 })\r\n\r\nlet utf8decoder = new TextDecoder()\r\n\r\n// const markets = require('src/conf/config.local.json')\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  lmsrAddress: string\r\n  questionId: string\r\n  outcomeCount: number\r\n  oracle: string\r\n  creator: string\r\n  createTime: any\r\n  questionType: number\r\n}\r\n\r\nenum MarketStage {\r\n  Running = 0,\r\n  Paused = 1,\r\n  Closed = 2,\r\n}\r\n\r\nlet conditionalTokensRepo: any\r\nlet marketMakersRepo: any\r\n\r\nfunction getIpfsHashFromBytes32(bytes32Hex: any) {\r\n  // Add our default ipfs values for first 2 bytes:\r\n  // function:0x12=sha2, size:0x20=256 bits\r\n  // and cut off leading \"0x\"\r\n  const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n  const hashBytes = Buffer.from(hashHex, 'hex');\r\n  const hashStr = bs58.encode(hashBytes)\r\n  return hashStr\r\n}\r\n\r\nconst Market: React.FC<MarketProps> = ({ web3, account, lmsrAddress, questionId, outcomeCount, oracle, creator, createTime, questionType }) => {\r\n  const [isConditionLoaded, setIsConditionLoaded] = useState<boolean>(false)\r\n  const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n  const [selectedOutcomeToken, setSelectedOutcomeToken] = useState<number>(0)\r\n  const [marketInfo, setMarketInfo] = useState<any>(undefined)\r\n  //@ts-ignore\r\n  const client = create(process.env.REACT_APP_IPFS_ENDPOINT)\r\n  // const client = create({\r\n  //   host: 'localhost',\r\n  //   port: 5001,\r\n  //   protocol: 'http',\r\n  //   // headers: {\r\n  //   //   authorization: auth\r\n  //   // }\r\n\r\n  // })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        conditionalTokensRepo = await loadConditionalTokensRepo(web3, lmsrAddress, account)\r\n        marketMakersRepo = await loadMarketMakersRepo(web3, lmsrAddress, account)\r\n        await getMarketInfo()\r\n        setIsConditionLoaded(true)\r\n      } catch (err) {\r\n        setIsConditionLoaded(false)\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    init()\r\n  }, [])\r\n\r\n  const getMarketInfo = async () => {\r\n    if (!oracle) return\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const conditionId = getConditionId(\r\n      // process.env.REACT_APP_ORACLE_ADDRESS,\r\n      oracle,\r\n      questionId,\r\n      outcomeCount,\r\n    )\r\n    const payoutDenominator = await conditionalTokensRepo.payoutDenominator(conditionId)\r\n\r\n    // var cid = questionId.slice(0, 46)\r\n    const cid = getIpfsHashFromBytes32(questionId)\r\n    //@ts-ignore\r\n    const stream = client.cat(cid)\r\n    let data = ''\r\n\r\n    for await (const chunk of stream) {\r\n      // data += chunk.toString()\r\n      data += utf8decoder.decode(chunk)\r\n    }\r\n    console.log(data.toString())\r\n\r\n    var markets = JSON.parse(data)\r\n    const funding = await marketMakersRepo.funding()\r\n    const totalSupply = await collateral.contract.totalSupply()\r\n\r\n\r\n    const outcomes = []\r\n    for (let outcomeIndex = 0; outcomeIndex < outcomeCount; outcomeIndex++) {\r\n      const indexSet = (outcomeIndex === 0\r\n        ? 1\r\n        : parseInt(Math.pow(10, outcomeIndex).toString(), 2)\r\n      ).toString()\r\n      const collectionId = await conditionalTokensRepo.getCollectionId(\r\n        `0x${'0'.repeat(64)}`,\r\n        conditionId,\r\n        indexSet,\r\n      )\r\n      const positionId = getPositionId(collateral.address, collectionId)\r\n      const probability = await marketMakersRepo.calcMarginalPrice(outcomeIndex)\r\n      const balance = await conditionalTokensRepo.balanceOf(account, positionId)\r\n      const payoutNumerator = await conditionalTokensRepo.payoutNumerators(\r\n        conditionId,\r\n        outcomeIndex,\r\n      )\r\n\r\n      const outcome = {\r\n        index: outcomeIndex,\r\n        // title: markets.markets[0].outcomes[outcomeIndex].title,\r\n        title: markets[0].outcomes[outcomeIndex].title,\r\n        // title: `outcome ${outcomeIndex}`,\r\n        probability: new BigNumber(probability)\r\n          .dividedBy(Math.pow(2, 64))\r\n          .toFixed(3),\r\n          // .multipliedBy(100)\r\n        balance: new BigNumber(balance).dividedBy(Math.pow(10, collateral.decimals)),\r\n        payoutNumerator: payoutNumerator,\r\n      }\r\n      console.log(outcome)\r\n      outcomes.push(outcome)\r\n    }\r\n\r\n    const marketData = {\r\n      lmsrAddress: lmsrAddress,\r\n      title: markets[0].title,\r\n      outcomes,\r\n      stage: MarketStage[await marketMakersRepo.stage()],\r\n      questionId: questionId,\r\n      conditionId: conditionId,\r\n      payoutDenominator: payoutDenominator,\r\n      funding: new BigNumber(funding).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      totalVolume: new BigNumber(totalSupply).dividedBy(Math.pow(10, collateral.decimals)).dividedBy(1000).toFixed(2),\r\n      questionType: questionType\r\n    }\r\n\r\n    setMarketInfo(marketData)\r\n  }\r\n\r\n  const buy = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // ).toString()\r\n    const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : Web3.utils.toBN(0),\r\n    )\r\n\r\n    console.log(\"Bignumber Created\")\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    const collateralBalance = await collateral.contract.allowancePoint(account, marketInfo.lmsrAddress)\r\n    if (cost.gt(collateralBalance)) {\r\n      // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n      await collateral.contract.approvePoint(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n        from: account,\r\n      })\r\n    }\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, cost, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const sell = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    // const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n    //   new BigNumber(Math.pow(10, collateral.decimals)),\r\n    // )\r\n    // const formatedAmount = Web3.utils.toBN(0).sub(\r\n    // Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals))))\r\n\r\n    const formatedAmount = Web3.utils.toBN(selectedAmount).mul(Web3.utils.toBN(Math.pow(10, collateral.decimals)))\r\n\r\n\r\n\r\n    const isApproved = await conditionalTokensRepo.isApprovedForAll(account, marketInfo.lmsrAddress)\r\n    if (!isApproved) {\r\n      await conditionalTokensRepo.setApprovalForAll(marketInfo.lmsrAddress, true, account)\r\n    }\r\n\r\n    const outcomeTokenAmounts = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === selectedOutcomeToken ? formatedAmount.neg() : Web3.utils.toBN(0),\r\n    )\r\n    const profit = (await marketMakersRepo.calcNetCost(outcomeTokenAmounts)).neg()\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, profit, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const redeem = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n\r\n    const indexSets = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === 0 ? 1 : parseInt(Math.pow(10, i).toString(), 2),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.redeemPositions(\r\n      collateral.address,\r\n      `0x${'0'.repeat(64)}`,\r\n      marketInfo.conditionId,\r\n      indexSets,\r\n      account,\r\n    )\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const close = async () => {\r\n    const tx = await marketMakersRepo.close(account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const resolve = async (resolutionOutcomeIndex: Array<Boolean>) => {\r\n    // const payouts = Array.from(\r\n    //   { length: marketInfo.outcomes.length },\r\n    //   (value: any, index: number) => (index === resolutionOutcomeIndex ? 1 : 0),\r\n    // )\r\n    const payouts = Array.from(\r\n      resolutionOutcomeIndex, (value: any, index: number) => (value === true ? 1 : 0),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.reportPayouts(marketInfo.questionId, payouts, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const isMarketClosed =\r\n    isConditionLoaded && MarketStage[marketInfo.stage].toString() === MarketStage.Closed.toString()\r\n  return (\r\n    <Layout\r\n      account={account}\r\n      isConditionLoaded={isConditionLoaded}\r\n      isMarketClosed={isMarketClosed}\r\n      marketInfo={marketInfo}\r\n      setSelectedAmount={setSelectedAmount}\r\n      selectedAmount={selectedAmount}\r\n      setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n      selectedOutcomeToken={selectedOutcomeToken}\r\n      buy={buy}\r\n      sell={sell}\r\n      redeem={redeem}\r\n      close={close}\r\n      resolve={resolve}\r\n      oracle={oracle}\r\n      creator={creator}\r\n      createTime={createTime}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Market\r\n"],"sourceRoot":""}