{"version":3,"sources":["components/style.module.css","utils/web3.ts","components/MarketList/index.tsx","components/Web3Connect/index.tsx","components/Header.tsx","components/childs/About.tsx","components/childs/Home.tsx","components/App.tsx","Root.tsx","serviceWorker.ts","index.tsx","logic/contracts.ts","utils/markets.ts","components/Market/index.tsx","components/Market/Layout.tsx","logic/ConditionalTokens/index.ts","logic/ConditionalTokens/ConditionalTokensRepo.ts","logic/MarketMakers/index.ts","logic/MarketMakers/MarketMakersRepo.ts"],"names":["module","exports","getWeb3Account","web3","a","defaultAccount","eth","getAccounts","accounts","MarketList","account","address","MARKET_QUERY","gql","useQuery","variables","toLowerCase","fetchPolicy","loading","error","data","refetch","console","log","lmsrmarketMaker","Market","lmsrAddress","questionId","outcomeCount","outcomeSlotCount","oracle","creator","MarketProvider","useParams","client","ApolloClient","uri","process","cache","InMemoryCache","ApolloProvider","web3ConnectListenersAdded","Web3ConnectButton","account1","setProviderData","connectProvider","provider","useWallet","connect","reset","status","useEffect","resetMetamask","connectMetamask","detectEthereumProvider","className","styles","header","bold","Button","variant","onClick","Header","Navbar","Container","Brand","href","as","Nav","Link","Web3Connect","About","children","remarkPlugins","remarkGfm","Home","MarketRoutes","match","useRouteMatch","lmsrmarketMakers","marketlist","map","to","url","id","path","App","useState","undefined","setWeb3","setAccount","newWeb3","Web3","newAccount","Row","Col","Root","Boolean","window","location","hostname","ReactDOM","render","connectors","bsc","web3ReactConnector","BscConnector","supportedChainIds","handleActivationError","err","UserRejectedRequestError","ConnectionRejectedError","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","contracts","lmsrAddressCache","providerAccountCache","TruffleContract","require","loadLMSRMarketMakerContract","lmsrMarketMakerContract","LMSRMarketMaker","setProvider","currentProvider","loadConditionalTokensContract","conditionalTokensContract","ConditionalTokens","loadWETH9Contract","weth9Contract","YAKI","loadContracts","LMSRMarketMakerContract","ConditionalTokensContract","WETH9Contract","at","lmsrMarketMaker","pmSystem","conditionalTokens","collateralToken","contract","name","decimals","symbol","getConditionId","oracleAddress","utils","soliditySha3","t","v","getPositionId","collectionId","bs58","BigNumber","config","EXPONENTIAL_AT","MarketStage","conditionalTokensRepo","marketMakersRepo","utf8decoder","TextDecoder","getIpfsHashFromBytes32","bytes32Hex","hashHex","slice","hashBytes","Buffer","from","encode","isConditionLoaded","setIsConditionLoaded","selectedAmount","setSelectedAmount","selectedOutcomeToken","setSelectedOutcomeToken","marketInfo","setMarketInfo","create","loadConditionalTokensRepo","loadMarketMakersRepo","getMarketInfo","init","getCollateralToken","collateral","conditionId","payoutDenominator","cid","stream","cat","chunk","decode","toString","markets","JSON","parse","outcomes","outcomeIndex","indexSet","parseInt","Math","pow","getCollectionId","repeat","positionId","calcMarginalPrice","probability","balanceOf","balance","payoutNumerators","payoutNumerator","outcome","index","title","dividedBy","multipliedBy","toFixed","push","stage","marketData","buy","formatedAmount","outcomeTokenAmounts","Array","length","value","calcNetCost","cost","allowance","collateralBalance","gt","approve","trade","tx","sell","isApprovedForAll","setApprovalForAll","i","negated","profit","neg","redeem","indexSets","redeemPositions","close","resolve","resolutionOutcomeIndex","payouts","reportPayouts","isMarketClosed","Closed","TradingForm","inputContainer","label","type","onChange","e","target","disabled","defaultValue","rightOutcome","wrongOutcome","join","control","color","outcomeInfo","TraderActions","actions","OperatorActions","OracleActions","fill","checkedState","setCheckedState","short","checked","position","updatedCheckedState","item","handleOnChange","htmlFor","Layout","condition","assert","ConditionalTokensRepo","getOutcomeSlotCount","parentCollectionId","lmsrMarketMakerAddress","approved","collateralAddress","marketConditionId","this","MarketMakersRepo","getAddress","conditionIds","owner","funding","tradeAmounts","collateralLimit"],"mappings":"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","file":"static/js/main.4778b241.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__CefR7\",\"header\":\"style_header__3XBjb\",\"condition\":\"style_condition__RS0-W\",\"inputContainer\":\"style_inputContainer__e8Zwh\",\"actions\":\"style_actions__1x4sz\",\"outcome\":\"style_outcome__1vCk8\",\"outcomeInfo\":\"style_outcomeInfo__ppntL\",\"rightOutcome\":\"style_rightOutcome__2jTiD\",\"wrongOutcome\":\"style_wrongOutcome__1hXjn\",\"bold\":\"style_bold__2Svah\",\"bar\":\"style_bar__3u1Wd\"};","export const getCurrentNetworkName = () => {\r\n  // https://ethereum.stackexchange.com/a/17101\r\n  const networkId = process.env.REACT_APP_NETWORK_ID && parseInt(process.env.REACT_APP_NETWORK_ID)\r\n  switch (networkId) {\r\n    case 1:\r\n      return 'mainnet'\r\n    case 3:\r\n      return 'ropsten'\r\n    case 4:\r\n      return 'rinkeby'\r\n    case 5:\r\n      return 'goerli'\r\n    case 42:\r\n      return 'kovan'\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nexport const getWeb3Account = async (web3: any) => {\r\n  if (!web3) return null\r\n  if (web3.defaultAccount == null) {\r\n    const accounts = await web3.eth.getAccounts()\r\n    return accounts[0] || null\r\n  } else return web3.defaultAccount\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\n// import ApolloClient from \"apollo-boost\";\r\n// import { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\r\n// import { ApolloProvider, useQuery} from \"react-apollo\"\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\nimport { useParams } from 'react-router-dom';\r\nimport Market from 'src/components/Market'\r\n\r\n\r\ntype MarketProviderProps = {\r\n  web3: any\r\n  account: string\r\n  // address: string\r\n}\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  address: string\r\n}\r\n\r\n\r\nconst MarketProvider: React.FC<MarketProviderProps> = ({ web3, account }) => {\r\n\r\n  //@ts-ignore\r\n  let { address } = useParams();\r\n\r\n  //@ts-ignore\r\n  const client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n    // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n    cache: new InMemoryCache()\r\n  });\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <MarketList web3={web3} account={account} address={address}></MarketList>\r\n    </ApolloProvider>\r\n  )\r\n\r\n}\r\n\r\nconst MarketList: React.FC<MarketProps> = ({ web3, account, address }) => {\r\n\r\n\r\n\r\n  const MARKET_QUERY = gql`\r\n    query lsmrMarkets($id: String) {\r\n        lmsrmarketMaker(id: $id) {\r\n          id\r\n          creator\r\n          creationTimestamp\r\n          collateralToken\r\n          conditions {\r\n            id\r\n            oracle\r\n            questionId\r\n            outcomeSlotCount\r\n          }\r\n          funding\r\n          fee\r\n          condition {\r\n            id\r\n          }\r\n          oracle\r\n          questionId\r\n          outcomeSlotCount\r\n        }\r\n   }\r\n  `\r\n  const { loading, error, data, refetch } = useQuery(MARKET_QUERY, {\r\n    variables: { 'id': address.toLowerCase() },\r\n    fetchPolicy: \"no-cache\"\r\n  }\r\n  )\r\n  console.log(address)\r\n\r\n  if (loading) return <p>Loading...</p>\r\n\r\n  if (error) return <p>Error :</p>\r\n\r\n  return (\r\n    //@ts-ignore\r\n    <div>\r\n      {data.lmsrmarketMaker ? (\r\n        <>\r\n          <Market\r\n            web3={web3}\r\n            account={account}\r\n            lmsrAddress={address}\r\n            questionId={data.lmsrmarketMaker.questionId}\r\n            outcomeCount={data.lmsrmarketMaker.outcomeSlotCount}\r\n            oracle={data.lmsrmarketMaker.oracle}\r\n            creator={data.lmsrmarketMaker.creator} />\r\n        </>\r\n       ) : ( \r\n         <div>No data found</div> \r\n       )} \r\n      {/* <p>{data.lmsrmarketMaker.id}</p> */}\r\n      {/* <button onClick={() => refetch()}>Refetch!</button> */}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default MarketProvider\r\n","import React, { useEffect } from 'react'\r\nimport Web3Connect from 'web3connect'\r\nimport Button from '@material-ui/core/Button'\r\nimport WalletConnectProvider from '@walletconnect/web3-provider'\r\nimport { getCurrentNetworkName } from 'src/utils/web3'\r\nimport styles from '../style.module.css'\r\nimport Fortmatic from \"fortmatic\"\r\nimport Web3 from 'web3';\r\nimport detectEthereumProvider from '@metamask/detect-provider'\r\nimport {\r\n  BscConnector,\r\n  UserRejectedRequestError\r\n} from '@binance-chain/bsc-connector'\r\nimport {\r\n  ConnectionRejectedError,\r\n  useWallet,\r\n  UseWalletProvider\r\n} from 'use-wallet'\r\n// import detectEthereumProvider from '@metamask/detect-provider';\r\n\r\n\r\ntype Props = {\r\n  account1: string\r\n  setProviderData: Function\r\n}\r\n\r\nlet web3ConnectListenersAdded = false\r\n\r\n\r\nconst Web3ConnectButton: React.FC<Props> = ({ account1, setProviderData }) => {\r\n  const connectProvider = (provider: any) => setProviderData(provider)\r\n  const disconnectProvider = () => setProviderData()\r\n  const { account, connect, reset, status } = useWallet()\r\n\r\n  useEffect(() => {\r\n    if (!web3ConnectListenersAdded) {\r\n      web3ConnectListenersAdded = true\r\n    }\r\n  })\r\n\r\n  const resetMetamask = async () => {\r\n    reset()\r\n    disconnectProvider()\r\n  }\r\n\r\n  const connectMetamask = async () => {\r\n    //@ts-ignore\r\n    // connect('bsc')\r\n    connect()\r\n    // const provider = await detectEthereumProvider()\r\n    // const provider = <window className=\"bin</window>\r\n\r\n    //this is only for bsc\r\n    //@ts-ignore\r\n    // const provider = window.BinanceChain\r\n\r\n    const provider = await detectEthereumProvider();\r\n\r\n    if (provider) {\r\n      // if (provider !== window.ethereum) {\r\n        // console.log('Do you have multiple wallets installed?')\r\n      // }\r\n      connectProvider(provider)\r\n    }\r\n\r\n  }\r\n\r\n  const getTypeOfAccount = () => {\r\n    let type: string\r\n    if (account1 === process.env.REACT_APP_OPERATOR_ADDRESS) {\r\n      type = 'Operator'\r\n    } else if (account1 === process.env.REACT_APP_ORACLE_ADDRESS) {\r\n      type = 'Oracle'\r\n    } else {\r\n      type = 'Trader'\r\n    }\r\n    return type\r\n  }\r\n\r\n  return account1 ? (\r\n    // <UseWalletProvider\r\n    //   connectors={{\r\n    //     //@ts-ignore\r\n    //     bsc: {\r\n    //       web3ReactConnector() {\r\n    //         return new BscConnector({ supportedChainIds: [56, 97] })\r\n    //       },\r\n    //       //@ts-ignore\r\n    //       handleActivationError(err: Error) {\r\n    //         if (err instanceof UserRejectedRequestError) {\r\n    //           return new ConnectionRejectedError()\r\n    //         }\r\n    //       },\r\n    //     },\r\n    //   }}\r\n    // >\r\n      <div className={styles.header}>\r\n        <div className={styles.bold}>{getTypeOfAccount()}:</div>\r\n        <div>{account1}</div>\r\n        <div>\r\n          <Button variant=\"contained\" onClick={() => resetMetamask()}>\r\n            Disconnect\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    // </UseWalletProvider>\r\n  ) : (\r\n    // <UseWalletProvider\r\n    //   connectors={{\r\n    //     //@ts-ignore\r\n    //     bsc: {\r\n    //       web3ReactConnector() {\r\n    //         return new BscConnector({ supportedChainIds: [56, 97] })\r\n    //       },\r\n    //       //@ts-ignore\r\n    //       handleActivationError(err) {\r\n    //         if (err instanceof UserRejectedRequestError) {\r\n    //           return new ConnectionRejectedError()\r\n    //         }\r\n    //       },\r\n    //     },\r\n    //   }}\r\n    // >\r\n      <Button variant=\"contained\" onClick={connectMetamask}>\r\n        Connect\r\n      </Button>\r\n    // </UseWalletProvider>\r\n  )\r\n}\r\n\r\nexport default Web3ConnectButton\r\n","import React from \"react\";\r\nimport {\r\n    Container,\r\n    Navbar,\r\n    Nav,\r\n    NavDropdown\r\n    // Form,\r\n    // FormControl,\r\n    // Button\r\n} from \"react-bootstrap\";\r\nimport Web3ConnectButton from 'src/components/Web3Connect'\r\n\r\n\r\nconst navBarStyles = {\r\n    backgroundColor: \"#fff\",\r\n    backgroundImage: \"linear-gradient(0deg, #D2D2D2 0%, #97D9E1 100%);\",\r\n    boxShadow: \"0 0 6px 0 rgba(0, 0, 0, 0.3)\"\r\n};\r\n\r\ntype HeaderProps = {\r\n    account: any\r\n    setProviderData: any\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({account, setProviderData}) => {\r\n    return (\r\n        <Navbar>\r\n        <Container>\r\n            \r\n            <Navbar.Brand href=\"/\" as={Nav.Link}>\r\n                DGOV 2.0\r\n            </Navbar.Brand>\r\n\r\n            <Navbar.Brand href=\"/markets\" as={Nav.Link}>\r\n                Markets\r\n            </Navbar.Brand>\r\n                <Nav>\r\n                    <Nav.Link href=\"/about\"> About</Nav.Link>\r\n               </Nav>\r\n               <Nav>\r\n                               <Web3ConnectButton account1={account} setProviderData={setProviderData} />\r\n               </Nav>\r\n\r\n\r\n        </Container>\r\n        </Navbar>\r\n\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport remarkGfm from 'remark-gfm'\r\n\r\n\r\nexport default function About() {\r\n    const markdown = `\r\n## DAOrayaki 简介 \r\n   \r\n   **一个民主治理和所有人都可以利用的公共媒体系统**\r\n\r\n   **To empower people，we must decentralization information**\r\n\r\n**DAOrayaki** 是一个去中心化的研究者组织和去中心化媒体，通过 DAO的形式去中心化地资助世界各地的研究者进行研究、翻译、分析等工作。**DAOrayaki** 由早期的 DAO 组织 DAOONE 核心成员发起，得到了Dora Factory基础设施的支持。自 2021 年 1 月以来，**DAOrayaki** 的贡献者网络已经深入覆盖了二次方资助、Futarchy、dGov、Moloch、算法治理、可回溯公共物品融资、奥斯特罗姆公共事务治理方法等数十个话题和以太坊生态研究成果。目前，我们已追踪研究53个DAO项目，发表 131 篇文章，普及了去中心化治理的知识和最新进展。\r\n\r\n通过 DAO，研究组织和媒体可以打破地域的限制，以社区的方式资助和生产内容。**DAOrayaki**将会通过DAO的形式，构建一个满足人们需求，一个民主治理和所有人都可以利用的公共媒体系统，从而实现真正意义上的去中心化。\r\n\r\n\r\n## 联系方式\r\n官网：https://daorayaki.org     \r\n    \r\nDiscord: 点击[链接](https://discord.gg/hR7v3H8K)加入discord社区讨论  \r\n    \r\nTwitter: @orayakida  \r\n    \r\n微信公众号：Dorafactory    \r\n    \r\n微信助手：DAOrayaki-media  \r\n       \r\n    `\r\n\r\n    return (\r\n        <ReactMarkdown children={markdown} remarkPlugins={[remarkGfm]}></ReactMarkdown>\r\n        )\r\n}","import React from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport remarkGfm from 'remark-gfm'\r\n\r\nexport default function Home() {\r\n    const markdown = `\r\n## DAOrayaki 内容治理\r\n\r\n通过内容治理，社区贡献者可以自发策划研究主题并申请研究资助。内容治理共分为四个阶段：预提案、审核、投票、验收。\r\n\r\n### 预提案\r\n\r\n在提案正式被提出前，提案人员需要按照社区模板撰写提案内容，明确研究主题/问题、背景、意义、需求、产出、任务时间及申请资助金额。并发起一个线下投票（线下投票工具待定），投票中必须存含有“不资助”（反对票）的选项。如果有至少1人投票，并且投赞成票人数多于投反对票人数，则进入下一个阶段。\r\n\r\n### 审核\r\n\r\n 社区编辑对其进行格式审核和内容的初步审核，对具有明显攻击意图、敏感话题等内容的提案进行过滤，如果审核通过，赋予正式的 DAOrayaki Content Proposal 编号(DCP-N)，进入投票阶段。如果提案者对审核结果不满意，可以向委员会发起申诉。\r\n\r\n### 投票\r\n\r\n社区编辑协助提案者在预测市场(预测市场初步选择为Omen)中，开设问题为“如果DCP-N通过，那么提案人员可以在预定时间内完成预定指标” 的预测市场，并提供流动性。投票时间为7天，预测市场开设总时长为(7 + 任务时长 -1)天。并在第7天时，根据预测市场中Yes Token和No Token的价格来决提案是否通过。此时，分为两种情况：\r\n1) 第7天时，No Token的价格高于Yes Token, 提案不通过，并且预测市场解析为No。\r\n2) 第7天时，Yes Token的价格高于No Token，提案通过，此时预测市场依然开放，预测结果会在任务验收后进行解析。\r\n\r\n### 验收\r\n\r\n提案者需要在预定时间结束前通过共享文档方式，提交研究成果交给评审组进行投票，如果逾期未提供相应的文档，则任务失败，预测市场解析为No。\r\n\r\n评审组采用基于Moloch协议的相对多数投票机制对文章进行投票，如果投票通过，则任务成功，此时第三步中设立的预测市场解析为Yes，否则的话，预测市场解析为No。\r\n \r\n    `\r\n\r\n    return (\r\n        <ReactMarkdown children={markdown} remarkPlugins={[remarkGfm]}></ReactMarkdown>\r\n        )\r\n}","import React, { useState } from 'react'\r\nimport Web3 from 'web3'\r\nimport Web3ConnectButton from 'src/components/Web3Connect'\r\n// import MarketProvider from 'src/components/Market'\r\nimport { getWeb3Account } from 'src/utils/web3'\r\nimport styles from './style.module.css'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from 'react-router-dom';\r\nimport MarketProvider from 'src/components/MarketList'\r\nimport Header from 'src/components/Header'\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\nimport About from 'src/components/childs/About'\r\nimport Home from 'src/components/childs/Home'\r\n\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const [web3, setWeb3] = useState<any>(undefined)\r\n  const [account, setAccount] = useState<string>('')\r\n\r\n  const setProviderData = async (provider: any) => {\r\n    let newWeb3, newAccount\r\n    if (provider) {\r\n      newWeb3 = new Web3(provider)\r\n      // newWeb3 = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_NETWORK!));\r\n      // newWeb3 = new Web3(process.env.REACT_APP_NETWORK!)\r\n      newAccount = await getWeb3Account(newWeb3)\r\n    } else {\r\n      // newWeb3 = null\r\n      // newWeb3 = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_NETWORK!));\r\n      // newWeb3 = new Web3(process.env.REACT_APP_NETWORK!)\r\n      // newWeb3 = new Web3('https://data-seed-prebsc-1-s1.binance.org:8545');\r\n      newWeb3 = new Web3()\r\n      newAccount = null\r\n    }\r\n    setWeb3(newWeb3)\r\n    setAccount(newAccount)\r\n  }\r\n  const client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n    // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <Header account={account} setProviderData={setProviderData}> </Header>\r\n      <br></br>\r\n      <Container >\r\n        <Row className=\"align-items-center\">\r\n          <Col className=\"text-center\">\r\n            <h1>DAOrayaki Governance 2.0: Futarchy based governance tool</h1>\r\n          </Col>\r\n        </Row>\r\n        <br></br>\r\n        <Row>\r\n          {/* <Col className=\"text-center\">\r\n            <Web3ConnectButton account1={account} setProviderData={setProviderData} />\r\n          </Col> */}\r\n\r\n        </Row>\r\n        <br></br>\r\n\r\n        <Row>\r\n          {/* <Container> */}\r\n          <Col className=\"text-center\">\r\n\r\n            <Switch>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/markets\">\r\n                {account && web3 ? (\r\n                  <ApolloProvider client={client}>\r\n                    <MarketRoutes web3={web3} account={account} />\r\n                  </ApolloProvider>\r\n                ) : (\r\n                  <div> Connect your account first </div>\r\n                )\r\n                }\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Home />\r\n              </Route>\r\n            </Switch>\r\n          </Col>\r\n          {/* </Container> */}\r\n        </Row>\r\n\r\n      </Container>\r\n\r\n    </Router>\r\n  )\r\n}\r\n\r\n// function Home() {\r\n//   return <h2>Home</h2>\r\n// }\r\n\r\n// function About() {\r\n//   return <h2>About</h2>\r\n// }\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  // address: string\r\n}\r\n\r\nconst MarketRoutes: React.FC<MarketProps> = ({ web3, account }) => {\r\n  // function MarketRoutes() {\r\n  let match = useRouteMatch();\r\n\r\n  const MARKET_QUERY = gql`\r\n    query lsmrMarkets($id: String) {\r\n        lmsrmarketMakers(orderBy: creationTimestamp, orderDirection: desc, first:5) {\r\n          id\r\n          creator\r\n          creationTimestamp\r\n          collateralToken\r\n          conditions {\r\n            id\r\n            oracle\r\n            questionId\r\n            outcomeSlotCount\r\n          }\r\n          funding\r\n          fee\r\n          condition {\r\n            id\r\n          }\r\n          oracle\r\n          questionId\r\n          outcomeSlotCount\r\n        }\r\n   }\r\n  `\r\n  const { loading, error, data, refetch } = useQuery(MARKET_QUERY, {\r\n    fetchPolicy: \"no-cache\"\r\n  }\r\n  )\r\n\r\n  if (loading) return <p>Loading...</p>\r\n\r\n  if (error) return <p>Error :</p>\r\n\r\n  console.log(data.lmsrmarketMakers)\r\n\r\n  const marketlist = data.lmsrmarketMakers.map(\r\n    (data: any) =>\r\n      <li key={data.id}>\r\n        <Link to={`${match.url}/${data.id}`} key={data.id}>\r\n          {data.id}\r\n        </Link>\r\n      </li>\r\n\r\n  )\r\n\r\n  console.log(marketlist)\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Most Recently Created Markets</h2>\r\n      <ul>\r\n        {marketlist}\r\n      </ul>\r\n\r\n      <Switch>\r\n        <Route path={`${match.path}/:address`}>\r\n          <MarketProvider web3={web3} account={account} />\r\n        </Route>\r\n        <Route path={match.path}>\r\n          <h3>Please select a markets.</h3>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport App from 'src/components/App'\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\n\r\n\r\nconst client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n    // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n\r\nconst Root: React.FC = () => {\r\n    return (\r\n    <ApolloProvider client={client}>\r\n\r\n    <App />\r\n    </ApolloProvider>\r\n    )\r\n}\r\n\r\nexport default Root\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Root from './Root'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {\r\n    BscConnector,\r\n    UserRejectedRequestError,\r\n} from '@binance-chain/bsc-connector'\r\n\r\nimport {\r\n    ConnectionRejectedError,\r\n    useWallet,\r\n    UseWalletProvider,\r\n} from 'use-wallet'\r\nimport \"bootstrap/dist/css/bootstrap.css\"; // Import precompiled Bootstrap css\r\nimport \"@fortawesome/fontawesome-free/css/all.css\";\r\n// import { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\n\r\n\r\n// const client = new ApolloClient({\r\n//     uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n//     // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n//     cache: new InMemoryCache()\r\n// });\r\n\r\n\r\nReactDOM.render(\r\n\r\n    // <ApolloProvider client={client}>\r\n        <UseWalletProvider\r\n\r\n            connectors={{\r\n                //@ts-ignore\r\n                bsc: {\r\n                    web3ReactConnector() {\r\n                        return new BscConnector({ supportedChainIds: [56, 97] })\r\n                    },\r\n                    //@ts-ignore\r\n                    handleActivationError(err) {\r\n                        if (err instanceof UserRejectedRequestError) {\r\n                            return new ConnectionRejectedError()\r\n                        }\r\n                    },\r\n                },\r\n            }}\r\n        >\r\n\r\n            <Root />\r\n        </UseWalletProvider>\r\n\r\n    // </ApolloProvider>\r\n    , document.getElementById('root'))\r\n\r\n// ReactDOM.render(<Root />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import ConditionalTokens from '../abi/ConditionalTokens.json'\r\nimport LMSRMarketMaker from '../abi/LMSRMarketMaker.json'\r\nimport WETH9 from '../abi/WETH9.json'\r\nimport YAKI from '../abi/YAKI.json'\r\n\r\nconst TruffleContract = require('@truffle/contract')\r\n\r\nlet contracts: Object | undefined\r\nlet lmsrAddressCache: string | undefined\r\nlet providerAccountCache: string | undefined\r\n\r\nconst resetContracts = () => {\r\n  contracts = undefined\r\n  lmsrAddressCache = undefined\r\n  providerAccountCache = undefined\r\n}\r\n\r\nconst loadLMSRMarketMakerContract = async (web3: any) => {\r\n  let lmsrMarketMakerContract\r\n  if (!contracts) {\r\n    lmsrMarketMakerContract = TruffleContract(LMSRMarketMaker)\r\n    lmsrMarketMakerContract.setProvider(web3.currentProvider)\r\n  }\r\n  return lmsrMarketMakerContract\r\n}\r\n\r\nconst loadConditionalTokensContract = async (web3: any) => {\r\n  let conditionalTokensContract\r\n  if (!contracts) {\r\n    conditionalTokensContract = TruffleContract(ConditionalTokens)\r\n    conditionalTokensContract.setProvider(web3.currentProvider)\r\n  }\r\n  return conditionalTokensContract\r\n}\r\n\r\nconst loadWETH9Contract = async (web3: any) => {\r\n  let weth9Contract\r\n  if (!contracts) {\r\n    // weth9Contract = TruffleContract(WETH9)\r\n    weth9Contract = TruffleContract(YAKI)\r\n    weth9Contract.setProvider(web3.currentProvider)\r\n  }\r\n  return weth9Contract\r\n}\r\n\r\nconst loadContracts = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetContracts()\r\n    }\r\n    if (!contracts) {\r\n      providerAccountCache = account\r\n      lmsrAddressCache = lmsrAddress\r\n\r\n      const LMSRMarketMakerContract = await loadLMSRMarketMakerContract(web3)\r\n      const ConditionalTokensContract = await loadConditionalTokensContract(web3)\r\n      const WETH9Contract = await loadWETH9Contract(web3)\r\n\r\n      const lmsrMarketMaker = await LMSRMarketMakerContract.at(lmsrAddress)\r\n      const conditionalTokens = await ConditionalTokensContract.at(await lmsrMarketMaker.pmSystem())\r\n      const collateralToken = {\r\n        address: await lmsrMarketMaker.collateralToken(),\r\n        contract: await WETH9Contract.at(await lmsrMarketMaker.collateralToken()),\r\n        name: 'YAKI TOKEN',\r\n        decimals: 18,\r\n        symbol: 'YAKI',\r\n      }\r\n\r\n      contracts = { lmsrMarketMaker, conditionalTokens, collateralToken }\r\n    }\r\n    return contracts\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadContracts\r\n","import Web3 from 'web3'\r\n\r\nexport const getConditionId = (\r\n  oracleAddress: string,\r\n  questionId: string,\r\n  outcomeSlotCount: number,\r\n) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: oracleAddress },\r\n    { t: 'bytes32', v: questionId },\r\n    { t: 'uint', v: outcomeSlotCount },\r\n  )\r\n}\r\n\r\nexport const getPositionId = (collateralToken: string, collectionId: string) => {\r\n  return Web3.utils.soliditySha3(\r\n    { t: 'address', v: collateralToken },\r\n    { t: 'bytes32', v: collectionId },\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport loadConditionalTokensRepo from 'src/logic/ConditionalTokens'\r\nimport loadMarketMakersRepo from 'src/logic/MarketMakers'\r\nimport { getConditionId, getPositionId } from 'src/utils/markets'\r\nimport BigNumber from 'bignumber.js'\r\nimport Layout from './Layout'\r\nimport { create } from 'ipfs-http-client'\r\nconst bs58 = require('bs58')\r\n\r\nBigNumber.config({ EXPONENTIAL_AT: 50 })\r\n\r\nlet utf8decoder = new TextDecoder()\r\n\r\n// const markets = require('src/conf/config.local.json')\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  lmsrAddress: string\r\n  questionId: string\r\n  outcomeCount: number\r\n  oracle: string\r\n  creator: string\r\n}\r\n\r\nenum MarketStage {\r\n  Running = 0,\r\n  Paused = 1,\r\n  Closed = 2,\r\n}\r\n\r\nlet conditionalTokensRepo: any\r\nlet marketMakersRepo: any\r\n\r\nfunction getIpfsHashFromBytes32(bytes32Hex: any) {\r\n  // Add our default ipfs values for first 2 bytes:\r\n  // function:0x12=sha2, size:0x20=256 bits\r\n  // and cut off leading \"0x\"\r\n  const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n  const hashBytes = Buffer.from(hashHex, 'hex');\r\n  const hashStr = bs58.encode(hashBytes)\r\n  return hashStr\r\n}\r\n\r\nconst Market: React.FC<MarketProps> = ({ web3, account, lmsrAddress, questionId, outcomeCount, oracle, creator }) => {\r\n  const [isConditionLoaded, setIsConditionLoaded] = useState<boolean>(false)\r\n  const [selectedAmount, setSelectedAmount] = useState<string>('')\r\n  const [selectedOutcomeToken, setSelectedOutcomeToken] = useState<number>(0)\r\n  const [marketInfo, setMarketInfo] = useState<any>(undefined)\r\n  //@ts-ignore\r\n  const client = create(process.env.REACT_APP_IPFS_ENDPOINT)\r\n  // const client = create({\r\n  //   host: 'localhost',\r\n  //   port: 5001,\r\n  //   protocol: 'http',\r\n  //   // headers: {\r\n  //   //   authorization: auth\r\n  //   // }\r\n    \r\n  // })\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        conditionalTokensRepo = await loadConditionalTokensRepo(web3, lmsrAddress, account)\r\n        marketMakersRepo = await loadMarketMakersRepo(web3, lmsrAddress, account)\r\n        await getMarketInfo()\r\n        setIsConditionLoaded(true)\r\n      } catch (err) {\r\n        setIsConditionLoaded(false)\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    init()\r\n  }, [])\r\n\r\n  const getMarketInfo = async () => {\r\n    if (!oracle) return\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const conditionId = getConditionId(\r\n      // process.env.REACT_APP_ORACLE_ADDRESS,\r\n      oracle,\r\n      questionId,\r\n      outcomeCount,\r\n    )\r\n    const payoutDenominator = await conditionalTokensRepo.payoutDenominator(conditionId)\r\n\r\n    // var cid = questionId.slice(0, 46)\r\n    const cid = getIpfsHashFromBytes32(questionId)\r\n    //@ts-ignore\r\n    const stream = client.cat(cid)\r\n      let data = ''\r\n\r\n      for await ( const chunk of stream) {\r\n          // data += chunk.toString()\r\n          data += utf8decoder.decode(chunk)\r\n      }\r\n      console.log(data.toString())\r\n\r\n      var markets = JSON.parse(data)\r\n\r\n    const outcomes = []\r\n    for (let outcomeIndex = 0; outcomeIndex < outcomeCount; outcomeIndex++) {\r\n      const indexSet = (outcomeIndex === 0\r\n        ? 1\r\n        : parseInt(Math.pow(10, outcomeIndex).toString(), 2)\r\n      ).toString()\r\n      const collectionId = await conditionalTokensRepo.getCollectionId(\r\n        `0x${'0'.repeat(64)}`,\r\n        conditionId,\r\n        indexSet,\r\n      )\r\n      const positionId = getPositionId(collateral.address, collectionId)\r\n      const probability = await marketMakersRepo.calcMarginalPrice(outcomeIndex)\r\n      const balance = await conditionalTokensRepo.balanceOf(account, positionId)\r\n      const payoutNumerator = await conditionalTokensRepo.payoutNumerators(\r\n        conditionId,\r\n        outcomeIndex,\r\n      )\r\n\r\n      const outcome = {\r\n        index: outcomeIndex,\r\n        // title: markets.markets[0].outcomes[outcomeIndex].title,\r\n        title: markets[0].outcomes[outcomeIndex].title,\r\n        // title: `outcome ${outcomeIndex}`,\r\n        probability: new BigNumber(probability)\r\n          .dividedBy(Math.pow(2, 64))\r\n          .multipliedBy(100)\r\n          .toFixed(2),\r\n        balance: new BigNumber(balance).dividedBy(Math.pow(10, collateral.decimals)),\r\n        payoutNumerator: payoutNumerator,\r\n      }\r\n      outcomes.push(outcome)\r\n    }\r\n\r\n    const marketData = {\r\n      lmsrAddress: lmsrAddress,\r\n      title: markets[0].title,\r\n      outcomes,\r\n      stage: MarketStage[await marketMakersRepo.stage()],\r\n      questionId: questionId,\r\n      conditionId: conditionId,\r\n      payoutDenominator: payoutDenominator,\r\n    }\r\n\r\n    setMarketInfo(marketData)\r\n  }\r\n\r\n  const buy = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n      new BigNumber(Math.pow(10, collateral.decimals)),\r\n    )\r\n\r\n    const outcomeTokenAmounts = Array.from(\r\n      { length: marketInfo.outcomes.length },\r\n      (value: any, index: number) =>\r\n        index === selectedOutcomeToken ? formatedAmount : new BigNumber(0),\r\n    )\r\n\r\n    const cost = await marketMakersRepo.calcNetCost(outcomeTokenAmounts)\r\n\r\n    // const collateralBalance = await collateral.contract.balanceOf(account)\r\n    const collateralBalance = await collateral.contract.allowance(account, marketInfo.lmsrAddress)\r\n    if (cost.gt(collateralBalance)) {\r\n      // await collateral.contract.deposit({ value: formatedAmount.toString(), from: account })\r\n      await collateral.contract.approve(marketInfo.lmsrAddress, formatedAmount.toString(), {\r\n        from: account,\r\n      })\r\n    }\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, cost, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const sell = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n    const formatedAmount = new BigNumber(selectedAmount).multipliedBy(\r\n      new BigNumber(Math.pow(10, collateral.decimals)),\r\n    )\r\n\r\n    const isApproved = await conditionalTokensRepo.isApprovedForAll(account, marketInfo.lmsrAddress)\r\n    if (!isApproved) {\r\n      await conditionalTokensRepo.setApprovalForAll(marketInfo.lmsrAddress, true, account)\r\n    }\r\n\r\n    const outcomeTokenAmounts = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === selectedOutcomeToken ? formatedAmount.negated() : new BigNumber(0),\r\n    )\r\n    const profit = (await marketMakersRepo.calcNetCost(outcomeTokenAmounts)).neg()\r\n\r\n    const tx = await marketMakersRepo.trade(outcomeTokenAmounts, profit, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const redeem = async () => {\r\n    const collateral = await marketMakersRepo.getCollateralToken()\r\n\r\n    const indexSets = Array.from({ length: marketInfo.outcomes.length }, (v, i) =>\r\n      i === 0 ? 1 : parseInt(Math.pow(10, i).toString(), 2),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.redeemPositions(\r\n      collateral.address,\r\n      `0x${'0'.repeat(64)}`,\r\n      marketInfo.conditionId,\r\n      indexSets,\r\n      account,\r\n    )\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const close = async () => {\r\n    const tx = await marketMakersRepo.close(account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const resolve = async (resolutionOutcomeIndex: Array<Boolean>) => {\r\n    // const payouts = Array.from(\r\n    //   { length: marketInfo.outcomes.length },\r\n    //   (value: any, index: number) => (index === resolutionOutcomeIndex ? 1 : 0),\r\n    // )\r\n    const payouts = Array.from(\r\n      resolutionOutcomeIndex, (value: any, index: number) => (value === true ? 1 : 0),\r\n    )\r\n\r\n    const tx = await conditionalTokensRepo.reportPayouts(marketInfo.questionId, payouts, account)\r\n    console.log({ tx })\r\n\r\n    await getMarketInfo()\r\n  }\r\n\r\n  const isMarketClosed =\r\n    isConditionLoaded && MarketStage[marketInfo.stage].toString() === MarketStage.Closed.toString()\r\n  return (\r\n    <Layout\r\n      account={account}\r\n      isConditionLoaded={isConditionLoaded}\r\n      isMarketClosed={isMarketClosed}\r\n      marketInfo={marketInfo}\r\n      setSelectedAmount={setSelectedAmount}\r\n      selectedAmount={selectedAmount}\r\n      setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n      selectedOutcomeToken={selectedOutcomeToken}\r\n      buy={buy}\r\n      sell={sell}\r\n      redeem={redeem}\r\n      close={close}\r\n      resolve={resolve}\r\n      oracle={oracle}\r\n      creator={creator}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Market\r\n","import React from 'react'\r\nimport { Paper, Button, TextField, RadioGroup, FormControlLabel, Radio, Checkbox } from '@material-ui/core'\r\nimport styles from '../style.module.css'\r\nimport  {useState} from \"react\"\r\n\r\ntype TradingFormProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n}\r\n\r\ntype TraderActionsProps = {\r\n  marketInfo: any\r\n  isMarketClosed: boolean\r\n  selectedAmount: string\r\n  redeem: any\r\n  buy: any\r\n  sell: any\r\n}\r\n\r\ntype OperatorActionsProps = {\r\n  isMarketClosed: boolean\r\n  close: any\r\n}\r\n\r\ntype OracleActionsProps = {\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  resolve: any\r\n}\r\n\r\ntype LayoutProps = {\r\n  account: string\r\n  isConditionLoaded: boolean\r\n  isMarketClosed: boolean\r\n  marketInfo: any\r\n  setSelectedAmount: any\r\n  selectedAmount: string\r\n  setSelectedOutcomeToken: any\r\n  selectedOutcomeToken: number\r\n  buy: any\r\n  sell: any\r\n  redeem: any\r\n  close: any\r\n  resolve: any\r\n  oracle: string\r\n  creator: string\r\n}\r\n\r\nconst TradingForm: React.FC<TradingFormProps> = ({\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n}) => (\r\n  <>\r\n    <div className={styles.inputContainer}>\r\n      <TextField\r\n        variant=\"filled\"\r\n        label=\"Collateral value\"\r\n        type=\"number\"\r\n        onChange={e => setSelectedAmount(e.target.value)}\r\n        disabled={isMarketClosed}\r\n      />\r\n    </div>\r\n    <RadioGroup\r\n      defaultValue={0}\r\n      onChange={e => setSelectedOutcomeToken(parseInt(e.target.value))}\r\n      value={selectedOutcomeToken}\r\n    >\r\n      {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n        <div\r\n          key={outcome.title}\r\n          className={[\r\n            styles.outcome,\r\n            marketInfo.payoutDenominator > 0 && outcome.payoutNumerator > 0 && styles.rightOutcome,\r\n            marketInfo.payoutDenominator > 0 &&\r\n              !(outcome.payoutNumerator > 0) &&\r\n              styles.wrongOutcome,\r\n          ].join(' ')}\r\n        >\r\n          <FormControlLabel\r\n            value={!isMarketClosed ? outcome.index : 'disabled'}\r\n            control={<Radio color=\"primary\" />}\r\n            label={outcome.title}\r\n          />\r\n          <div className={styles.outcomeInfo}>Probability: {outcome.probability.toString()}%</div>\r\n          <div className={styles.outcomeInfo}>\r\n            My balance: {outcome.balance.toFixed(5).toString()}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </RadioGroup>\r\n  </>\r\n)\r\n\r\nconst TraderActions: React.FC<TraderActionsProps> = ({\r\n  marketInfo,\r\n  isMarketClosed,\r\n  selectedAmount,\r\n  redeem,\r\n  buy,\r\n  sell,\r\n}) => (\r\n  <>\r\n    <h3>Trader actions:</h3>\r\n    <div className={styles.actions}>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={redeem}\r\n        disabled={!isMarketClosed || !marketInfo.payoutDenominator}\r\n      >\r\n        Redeem\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={buy} disabled={isMarketClosed || !selectedAmount}>\r\n        Buy\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={sell} disabled={isMarketClosed || !selectedAmount}>\r\n        Sell\r\n      </Button>\r\n    </div>\r\n  </>\r\n)\r\n\r\nconst OperatorActions: React.FC<OperatorActionsProps> = ({ isMarketClosed, close }) => (\r\n  <>\r\n    <h3>Operator actions:</h3>\r\n    <Button variant=\"contained\" onClick={close} disabled={isMarketClosed}>\r\n      Close\r\n    </Button>\r\n  </>\r\n)\r\n\r\n// const OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => (\r\n//   <>\r\n//     <h3>Oracle actions:</h3>\r\n//     <div className={styles.actions}>\r\n//       {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n//         <Button\r\n//           key={outcome.short}\r\n//           variant=\"contained\"\r\n//           onClick={() => resolve(index)}\r\n//           disabled={!isMarketClosed}\r\n//         >\r\n//           Resolve {outcome.title}\r\n//         </Button>\r\n//       ))}\r\n//     </div>\r\n//   </>\r\n// )\r\nconst OracleActions: React.FC<OracleActionsProps> = ({ isMarketClosed, marketInfo, resolve }) => {\r\n\r\n  const [checkedState, setCheckedState] = useState(\r\n    new Array(marketInfo.outcomes.length).fill(false)\r\n  );\r\n\r\n  const handleOnChange = (position:any) => {\r\n    const updatedCheckedState = checkedState.map((item, index) =>\r\n      index === position ? !item : item\r\n    );\r\n    setCheckedState(updatedCheckedState);\r\n  };\r\n\r\n  return (\r\n  <>\r\n    <h3>Oracle actions:</h3>\r\n    <div>\r\n      {marketInfo.outcomes.map((outcome: any, index: number) => (\r\n        <li key={index}>\r\n        <input\r\n        type=\"checkbox\"\r\n        id={`custom-checkbox-${index}`}\r\n        name={outcome.short}\r\n        value={outcome.title}\r\n        checked={checkedState[index]}\r\n        onChange={() => handleOnChange(index)}\r\n        />\r\n        <label htmlFor={`custom-checkbox-${index}`}> {outcome.title} </label>\r\n        </li>\r\n      ))}\r\n    <Button \r\n          onClick={() => resolve(checkedState)}\r\n          variant=\"contained\"\r\n          disabled={!isMarketClosed}\r\n    >Resolve</Button>\r\n\r\n    </div>\r\n  </>\r\n  )\r\n}\r\n\r\n\r\nconst Layout: React.FC<LayoutProps> = ({\r\n  account,\r\n  isConditionLoaded,\r\n  isMarketClosed,\r\n  marketInfo,\r\n  setSelectedAmount,\r\n  selectedAmount,\r\n  setSelectedOutcomeToken,\r\n  selectedOutcomeToken,\r\n  buy,\r\n  sell,\r\n  redeem,\r\n  close,\r\n  resolve,\r\n  oracle,\r\n  creator\r\n}) => {\r\n  return (\r\n    <Paper className={styles.condition}>\r\n      {isConditionLoaded ? (\r\n        <>\r\n          <h2>{marketInfo.title}</h2>\r\n          <p>State: {marketInfo.stage}</p>\r\n          <TradingForm\r\n            isMarketClosed={isMarketClosed}\r\n            marketInfo={marketInfo}\r\n            setSelectedAmount={setSelectedAmount}\r\n            setSelectedOutcomeToken={setSelectedOutcomeToken}\r\n            selectedOutcomeToken={selectedOutcomeToken}\r\n          />\r\n          <TraderActions\r\n            marketInfo={marketInfo}\r\n            isMarketClosed={isMarketClosed}\r\n            selectedAmount={selectedAmount}\r\n            redeem={redeem}\r\n            buy={buy}\r\n            sell={sell}\r\n          />\r\n          {account && account.toLowerCase() === creator && (\r\n            <OperatorActions isMarketClosed={isMarketClosed} close={close} />\r\n          )}\r\n          {account && account.toLowerCase() === oracle && (\r\n            <OracleActions\r\n              isMarketClosed={isMarketClosed}\r\n              marketInfo={marketInfo}\r\n              resolve={resolve}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>Loading...</div>\r\n      )}\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import ConditionalTokensRepo from './ConditionalTokensRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet conditionalTokensRepo: ConditionalTokensRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetConditionalTokensRepo = () => {\r\n  conditionalTokensRepo = undefined\r\n}\r\n\r\nconst loadConditionalTokensRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetConditionalTokensRepo()\r\n    }\r\n    if (!conditionalTokensRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      conditionalTokensRepo = new ConditionalTokensRepo(contracts)\r\n    }\r\n    return conditionalTokensRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadConditionalTokensRepo\r\n","const assert = require('assert')\r\n\r\nclass ConditionalTokensRepo {\r\n  conditionalTokens: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.conditionalTokens = contracts.conditionalTokens\r\n  }\r\n\r\n  balanceOf = async (account: string, positionId: number) => {\r\n    return this.conditionalTokens.balanceOf(account, positionId)\r\n  }\r\n\r\n  getOutcomeSlotCount = async (id: string) => {\r\n    return this.conditionalTokens.getOutcomeSlotCount(id)\r\n  }\r\n\r\n  getCollectionId = async (parentCollectionId: string, conditionId: string, indexSet: number[]) => {\r\n    return this.conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet)\r\n  }\r\n\r\n  payoutDenominator = async (conditionId: string) => {\r\n    return this.conditionalTokens.payoutDenominator(conditionId)\r\n  }\r\n\r\n  payoutNumerators = async (conditionId: string, outcomeIndex: number) => {\r\n    return this.conditionalTokens.payoutNumerators(conditionId, outcomeIndex)\r\n  }\r\n\r\n  isApprovedForAll = async (account: string, lmsrMarketMakerAddress: string) => {\r\n    return this.conditionalTokens.isApprovedForAll(account, lmsrMarketMakerAddress)\r\n  }\r\n\r\n  setApprovalForAll = async (lmsrMarketMakerAddress: string, approved: boolean, from: string) => {\r\n    return this.conditionalTokens.setApprovalForAll(lmsrMarketMakerAddress, approved, { from })\r\n  }\r\n\r\n  reportPayouts = async (questionId: string, payouts: number[], from: string) => {\r\n    return this.conditionalTokens.reportPayouts(questionId, payouts, { from })\r\n  }\r\n\r\n  redeemPositions = async (\r\n    collateralAddress: string,\r\n    parentCollectionId: string,\r\n    marketConditionId: string,\r\n    indexSets: number[],\r\n    from: string,\r\n  ) => {\r\n    return this.conditionalTokens.redeemPositions(\r\n      collateralAddress,\r\n      parentCollectionId,\r\n      marketConditionId,\r\n      indexSets,\r\n      { from },\r\n    )\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default ConditionalTokensRepo\r\n","import MarketMakersRepo from './MarketMakersRepo'\r\nimport loadContracts from '../contracts'\r\n\r\nlet marketMakersRepo: MarketMakersRepo | undefined\r\nlet lmsrAddressCache: string\r\nlet providerAccountCache: string\r\n\r\nconst resetMarketMakersRepo = () => {\r\n  marketMakersRepo = undefined\r\n}\r\n\r\nconst loadMarketMakersRepo = async (web3: any, lmsrAddress: string, account: string) => {\r\n  try {\r\n    if (\r\n      (account && account !== providerAccountCache) ||\r\n      (lmsrAddress && lmsrAddress !== lmsrAddressCache)\r\n    ) {\r\n      resetMarketMakersRepo()\r\n    }\r\n    if (!marketMakersRepo) {\r\n      lmsrAddressCache = lmsrAddress\r\n      providerAccountCache = account\r\n\r\n      const contracts = await loadContracts(web3, lmsrAddress, account)\r\n      marketMakersRepo = new MarketMakersRepo(contracts)\r\n    }\r\n    return marketMakersRepo\r\n  } catch (err) {\r\n    console.error(err)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default loadMarketMakersRepo\r\n","const assert = require('assert')\r\n\r\nclass MarketMakersRepo {\r\n  lmsrMarketMaker: any\r\n  collateralToken: any\r\n\r\n  constructor(contracts: any) {\r\n    assert(contracts, '\"contracts\" is required')\r\n\r\n    this.lmsrMarketMaker = contracts.lmsrMarketMaker\r\n    this.collateralToken = contracts.collateralToken\r\n  }\r\n\r\n  getAddress = async () => {\r\n    return this.lmsrMarketMaker.address\r\n  }\r\n\r\n  getCollateralToken = async () => {\r\n    return this.collateralToken\r\n  }\r\n\r\n  conditionIds = async (index: number) => {\r\n    return this.lmsrMarketMaker.conditionIds(index)\r\n  }\r\n\r\n  owner = async () => {\r\n    return this.lmsrMarketMaker.owner()\r\n  }\r\n\r\n  funding = async () => {\r\n    return this.lmsrMarketMaker.funding()\r\n  }\r\n\r\n  stage = async () => {\r\n    return this.lmsrMarketMaker.stage()\r\n  }\r\n\r\n  close = async (from: string) => {\r\n    return this.lmsrMarketMaker.close({ from })\r\n  }\r\n\r\n  calcNetCost = async (outcomeTokenAmounts: number[]) => {\r\n    return this.lmsrMarketMaker.calcNetCost(outcomeTokenAmounts)\r\n  }\r\n\r\n  calcMarginalPrice = async (outcomeIndex: number) => {\r\n    return this.lmsrMarketMaker.calcMarginalPrice(outcomeIndex)\r\n  }\r\n\r\n  trade = async (tradeAmounts: number[], collateralLimit: number, from: string) => {\r\n    return this.lmsrMarketMaker.trade(tradeAmounts, collateralLimit, { from })\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nexport default MarketMakersRepo\r\n"],"sourceRoot":""}