{"version":3,"sources":["utils/web3.ts","components/App.tsx","Root.tsx","serviceWorker.ts","index.tsx"],"names":["getWeb3Account","web3","a","defaultAccount","eth","getAccounts","accounts","About","lazy","Home","Header","MarketProvider","MarketRoutes","account","match","useRouteMatch","MARKET_QUERY","gql","useQuery","fetchPolicy","loading","error","data","refetch","console","log","lmsrmarketMakers","marketlist","map","to","url","id","fallback","path","App","useState","undefined","setWeb3","setAccount","setProviderData","provider","newWeb3","Web3","newAccount","client","ApolloClient","uri","process","cache","InMemoryCache","Container","Row","className","Col","ApolloProvider","Root","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d32f21b4.chunk.js","sourcesContent":["export const getCurrentNetworkName = () => {\r\n  // https://ethereum.stackexchange.com/a/17101\r\n  const networkId = process.env.REACT_APP_NETWORK_ID && parseInt(process.env.REACT_APP_NETWORK_ID)\r\n  switch (networkId) {\r\n    case 1:\r\n      return 'mainnet'\r\n    case 3:\r\n      return 'ropsten'\r\n    case 4:\r\n      return 'rinkeby'\r\n    case 5:\r\n      return 'goerli'\r\n    case 42:\r\n      return 'kovan'\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nexport const getWeb3Account = async (web3: any) => {\r\n  if (!web3) return null\r\n  if (web3.defaultAccount == null) {\r\n    const accounts = await web3.eth.getAccounts()\r\n    return accounts[0] || null\r\n  } else return web3.defaultAccount\r\n}\r\n","import React, { useState, Suspense, lazy } from 'react'\r\nimport Web3 from 'web3'\r\nimport { getWeb3Account } from 'src/utils/web3'\r\nimport {\r\n  BrowserRouter as Router,\r\n  // HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n} from 'react-router-dom';\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\nconst About = lazy(() => import('src/components/childs/About'))\r\nconst Home = lazy(() => import('src/components/childs/Home'))\r\nconst Header = lazy(() => import('src/components/Header'))\r\nconst MarketProvider = lazy(() => import('src/components/MarketList'))\r\n\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const [web3, setWeb3] = useState<any>(undefined)\r\n  const [account, setAccount] = useState<string>('')\r\n\r\n  const setProviderData = async (provider: any) => {\r\n    let newWeb3, newAccount\r\n    if (provider) {\r\n      newWeb3 = new Web3(provider)\r\n      // newWeb3 = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_NETWORK!));\r\n      // newWeb3 = new Web3(process.env.REACT_APP_NETWORK!)\r\n      newAccount = await getWeb3Account(newWeb3)\r\n    } else {\r\n      // newWeb3 = null\r\n      // newWeb3 = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_NETWORK!));\r\n      // newWeb3 = new Web3(process.env.REACT_APP_NETWORK!)\r\n      // newWeb3 = new Web3('https://data-seed-prebsc-1-s1.binance.org:8545');\r\n      newWeb3 = new Web3()\r\n      newAccount = null\r\n    }\r\n    setWeb3(newWeb3)\r\n    setAccount(newAccount)\r\n  }\r\n  const client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n    // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Header account={account} setProviderData={setProviderData}> </Header>\r\n      </Suspense>\r\n      <br></br>\r\n      <Container >\r\n        <Row className=\"align-items-center\">\r\n          <Col className=\"text-center\">\r\n            <h1>DAOrayaki Governance 2.0: Futarchy based governance tool</h1>\r\n          </Col>\r\n        </Row>\r\n        <br></br>\r\n        <Row>\r\n          {/* <Col className=\"text-center\">\r\n            <Web3ConnectButton account1={account} setProviderData={setProviderData} />\r\n          </Col> */}\r\n\r\n        </Row>\r\n        <br></br>\r\n\r\n        <Row>\r\n          {/* <Container> */}\r\n          <Col className=\"text-center\">\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Switch>\r\n                <Route path=\"/about\">\r\n                  <About />\r\n                </Route>\r\n                <Route path=\"/markets\">\r\n                  {account && web3 ? (\r\n                    <ApolloProvider client={client}>\r\n                      <MarketRoutes web3={web3} account={account} />\r\n                    </ApolloProvider>\r\n                  ) : (\r\n                    <div> Connect your account first </div>\r\n                  )\r\n                  }\r\n                </Route>\r\n                <Route path=\"/home\">\r\n                  <Home />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                  {/* <Redirect to=\"/markets\"></Redirect> */}\r\n                  {account && web3 ? (\r\n                    <ApolloProvider client={client}>\r\n                      <MarketRoutes web3={web3} account={account} />\r\n                    </ApolloProvider>\r\n                  ) : (\r\n                    <div> Connect your account first </div>\r\n                  )\r\n                  }\r\n\r\n                </Route>\r\n\r\n              </Switch>\r\n            </Suspense>\r\n          </Col>\r\n          {/* </Container> */}\r\n        </Row>\r\n\r\n      </Container>\r\n\r\n    </Router>\r\n  )\r\n}\r\n\r\n// function Home() {\r\n//   return <h2>Home</h2>\r\n// }\r\n\r\n// function About() {\r\n//   return <h2>About</h2>\r\n// }\r\n\r\ntype MarketProps = {\r\n  web3: any\r\n  account: string\r\n  // address: string\r\n}\r\n\r\nconst MarketRoutes: React.FC<MarketProps> = ({ web3, account }) => {\r\n  // function MarketRoutes() {\r\n  let match = useRouteMatch();\r\n\r\n  const MARKET_QUERY = gql`\r\n    query lsmrMarkets($id: String) {\r\n        lmsrmarketMakers(orderBy: creationTimestamp, orderDirection: desc, first:5) {\r\n          id\r\n          creator\r\n          creationTimestamp\r\n          collateralToken\r\n          conditions {\r\n            id\r\n            oracle\r\n            questionId\r\n            outcomeSlotCount\r\n          }\r\n          funding\r\n          fee\r\n          condition {\r\n            id\r\n          }\r\n          oracle\r\n          questionId\r\n          outcomeSlotCount\r\n        }\r\n   }\r\n  `\r\n  const { loading, error, data, refetch } = useQuery(MARKET_QUERY, {\r\n    fetchPolicy: \"no-cache\"\r\n  }\r\n  )\r\n\r\n  if (loading) return <p>Loading...</p>\r\n\r\n  if (error) return <p>Error :</p>\r\n\r\n  console.log(data.lmsrmarketMakers)\r\n\r\n  const marketlist = data.lmsrmarketMakers.map(\r\n    (data: any) =>\r\n      <li key={data.id}>\r\n        <Link to={`${match.url}/${data.id}`} key={data.id}>\r\n          {data.id}\r\n        </Link>\r\n      </li>\r\n\r\n  )\r\n\r\n  console.log(marketlist)\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Most Recently Created Markets</h2>\r\n      <ul>\r\n        {marketlist}\r\n      </ul>\r\n\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n\r\n      <Switch>\r\n        <Route path={`${match.path}/:address`}>\r\n          <MarketProvider web3={web3} account={account} />\r\n        </Route>\r\n        <Route path={match.path}>\r\n          <h3>Please select a markets.</h3>\r\n        </Route>\r\n      </Switch>\r\n      </Suspense>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport App from 'src/components/App'\r\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\"\r\n\r\n\r\nconst client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n    // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n\r\nconst Root: React.FC = () => {\r\n    return (\r\n    <ApolloProvider client={client}>\r\n\r\n    <App />\r\n    </ApolloProvider>\r\n    )\r\n}\r\n\r\nexport default Root\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Root from './Root'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {\r\n    UseWalletProvider,\r\n} from 'use-wallet'\r\nimport \"bootstrap/dist/css/bootstrap.css\"; // Import precompiled Bootstrap css\r\n// import \"@fortawesome/fontawesome-free/css/all.css\";\r\n// import { ApolloProvider, useQuery, ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\r\n\r\n\r\n// const client = new ApolloClient({\r\n//     uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\r\n//     // uri: \"http://127.0.0.1:8000/subgraphs/name/rembern/dgovgraph\",\r\n//     cache: new InMemoryCache()\r\n// });\r\n\r\n\r\nReactDOM.render(\r\n\r\n    // <ApolloProvider client={client}>\r\n    //@ts-ignore\r\n        <UseWalletProvider>\r\n            <Root />\r\n        </UseWalletProvider>\r\n\r\n    // </ApolloProvider>\r\n    , document.getElementById('root'))\r\n\r\n// ReactDOM.render(<Root />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}